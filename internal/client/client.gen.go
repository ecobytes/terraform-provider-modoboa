// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
	Jwt2FAAuthScopes = "jwt2FAAuth.Scopes"
	TokenAuthScopes  = "tokenAuth.Scopes"
)

// Defines values for DNSRecordTypeEnum.
const (
	Autoconfig   DNSRecordTypeEnum = "autoconfig"
	Autodiscover DNSRecordTypeEnum = "autodiscover"
	Dkim         DNSRecordTypeEnum = "dkim"
	Dmarc        DNSRecordTypeEnum = "dmarc"
	Spf          DNSRecordTypeEnum = "spf"
)

// Defines values for DkimKeyLengthEnum.
const (
	N1024 DkimKeyLengthEnum = 1024
	N2048 DkimKeyLengthEnum = 2048
	N4096 DkimKeyLengthEnum = 4096
)

// Defines values for LanguageEnum.
const (
	Br     LanguageEnum = "br"
	Cs     LanguageEnum = "cs"
	De     LanguageEnum = "de"
	El     LanguageEnum = "el"
	En     LanguageEnum = "en"
	Es     LanguageEnum = "es"
	Fi     LanguageEnum = "fi"
	Fr     LanguageEnum = "fr"
	It     LanguageEnum = "it"
	Ja     LanguageEnum = "ja"
	Nl     LanguageEnum = "nl"
	Pl     LanguageEnum = "pl"
	Pt     LanguageEnum = "pt"
	PtBr   LanguageEnum = "pt-br"
	Ro     LanguageEnum = "ro"
	Ru     LanguageEnum = "ru"
	Sv     LanguageEnum = "sv"
	Tr     LanguageEnum = "tr"
	ZhHant LanguageEnum = "zh-hant"
)

// Defines values for PhoneNumberTypeEnum.
const (
	PhoneNumberTypeEnumCell  PhoneNumberTypeEnum = "cell"
	PhoneNumberTypeEnumFax   PhoneNumberTypeEnum = "fax"
	PhoneNumberTypeEnumHome  PhoneNumberTypeEnum = "home"
	PhoneNumberTypeEnumMain  PhoneNumberTypeEnum = "main"
	PhoneNumberTypeEnumOther PhoneNumberTypeEnum = "other"
	PhoneNumberTypeEnumPager PhoneNumberTypeEnum = "pager"
	PhoneNumberTypeEnumWork  PhoneNumberTypeEnum = "work"
)

// Defines values for RoleEnum.
const (
	DomainAdmins RoleEnum = "DomainAdmins"
	Resellers    RoleEnum = "Resellers"
	SimpleUsers  RoleEnum = "SimpleUsers"
	SuperAdmins  RoleEnum = "SuperAdmins"
)

// Defines values for StatusEnum.
const (
	N1 StatusEnum = 1
	N2 StatusEnum = 2
)

// Defines values for Type9e9Enum.
const (
	Type9e9EnumHome  Type9e9Enum = "home"
	Type9e9EnumOther Type9e9Enum = "other"
	Type9e9EnumWork  Type9e9Enum = "work"
)

// Defines values for DomainaliasesListParamsFormat.
const (
	DomainaliasesListParamsFormatCsv  DomainaliasesListParamsFormat = "csv"
	DomainaliasesListParamsFormatJson DomainaliasesListParamsFormat = "json"
)

// Defines values for DomainaliasesCreateParamsFormat.
const (
	DomainaliasesCreateParamsFormatCsv  DomainaliasesCreateParamsFormat = "csv"
	DomainaliasesCreateParamsFormatJson DomainaliasesCreateParamsFormat = "json"
)

// Defines values for DomainaliasesDestroyParamsFormat.
const (
	DomainaliasesDestroyParamsFormatCsv  DomainaliasesDestroyParamsFormat = "csv"
	DomainaliasesDestroyParamsFormatJson DomainaliasesDestroyParamsFormat = "json"
)

// Defines values for DomainaliasesRetrieveParamsFormat.
const (
	DomainaliasesRetrieveParamsFormatCsv  DomainaliasesRetrieveParamsFormat = "csv"
	DomainaliasesRetrieveParamsFormatJson DomainaliasesRetrieveParamsFormat = "json"
)

// Defines values for DomainaliasesPartialUpdateParamsFormat.
const (
	DomainaliasesPartialUpdateParamsFormatCsv  DomainaliasesPartialUpdateParamsFormat = "csv"
	DomainaliasesPartialUpdateParamsFormatJson DomainaliasesPartialUpdateParamsFormat = "json"
)

// Defines values for DomainaliasesUpdateParamsFormat.
const (
	DomainaliasesUpdateParamsFormatCsv  DomainaliasesUpdateParamsFormat = "csv"
	DomainaliasesUpdateParamsFormatJson DomainaliasesUpdateParamsFormat = "json"
)

// Defines values for StatisticsListParamsPeriod.
const (
	Custom StatisticsListParamsPeriod = "custom"
	Day    StatisticsListParamsPeriod = "day"
	Month  StatisticsListParamsPeriod = "month"
	Week   StatisticsListParamsPeriod = "week"
	Year   StatisticsListParamsPeriod = "year"
)

// ARMessage A serializer for ARmessage.
type ARMessage struct {
	// Content The content that will appear in sent emails
	Content string `tfsdk:"content"`

	// Enabled Activate/Deactivate your auto reply
	Enabled  *bool      `tfsdk:"enabled"`
	Fromdate *string `tfsdk:"fromdate"`
	Id       *int       `tfsdk:"id"`
	Mbox     int        `tfsdk:"mbox"`

	// Subject The subject that will appear in sent emails
	Subject   string     `tfsdk:"subject"`
	Untildate *string `tfsdk:"untildate"`
}

// AccessRule AccessRule serializer.
type AccessRule struct {
	Calendar int `tfsdk:"calendar"`

	// Mailbox Mailbox serializer.
	Mailbox Mailbox `tfsdk:"mailbox"`
	Pk      *int    `tfsdk:"pk"`
	Read    *bool   `tfsdk:"read"`
	Write   *bool   `tfsdk:"write"`
}

// Account Base account serializer.
type Account struct {
	DateJoined *string `tfsdk:"date_joined"`

	// Domains List of administered domains (resellers and domain administrators only).
	Domains   *[]string `tfsdk:"domains"`
	FirstName *string   `tfsdk:"first_name"`
	IsActive  *bool     `tfsdk:"is_active"`

	// Language Prefered language to display pages.
	//
	// * `br` - breton
	// * `cs` - čeština
	// * `de` - deutsch
	// * `en` - english
	// * `el` - ελληνικά
	// * `es` - español
	// * `fi` - Suomalainen
	// * `fr` - français
	// * `it` - italiano
	// * `ja` - 日本の
	// * `nl` - nederlands
	// * `pt` - português
	// * `pt-br` - português (BR)
	// * `pl` - polski
	// * `ro` - Română
	// * `ru` - русский
	// * `sv` - svenska
	// * `tr` - türk
	// * `zh-hant` - 中文（台灣）
	Language  *LanguageEnum `tfsdk:"language"`
	LastLogin *string    `tfsdk:"last_login"`
	LastName  *string       `tfsdk:"last_name"`

	// Mailbox Mailbox serializer.
	Mailbox *Mailbox `tfsdk:"mailbox"`

	// MasterUser Allow this administrator to access user mailboxes
	MasterUser  *bool   `tfsdk:"master_user"`
	PhoneNumber *string `tfsdk:"phone_number"`
	Pk          *int    `tfsdk:"pk"`

	// Role Return role.
	Role *string `tfsdk:"role"`

	// SecondaryEmail An alternative e-mail address, can be used for recovery needs.
	SecondaryEmail *openapi_types.Email `tfsdk:"secondary_email"`
	TfaEnabled     *bool                `tfsdk:"tfa_enabled"`
	Username       string               `tfsdk:"username"`
}

// AccountPassword A serializer used to change a user password.
type AccountPassword struct {
	NewPassword string `tfsdk:"new_password"`
	Password    string `tfsdk:"password"`
}

// AddressBook Address book serializer.
type AddressBook struct {
	Name string  `tfsdk:"name"`
	Pk   *int    `tfsdk:"pk"`
	Url  *string `tfsdk:"url"`
}

// Alarm Serializer for Alarm related endpoints.
type Alarm struct {
	Closed       *string  `tfsdk:"closed"`
	Created      *string  `tfsdk:"created"`
	Domain       *Nested     `tfsdk:"domain"`
	Id           *int        `tfsdk:"id"`
	InternalName string      `tfsdk:"internal_name"`
	Mailbox      *Nested     `tfsdk:"mailbox"`
	Status       *StatusEnum `tfsdk:"status"`
	Title        string      `tfsdk:"title"`
}

// Alias Alias serializer for v2 API.
type Alias struct {
	Address     openapi_types.Email `tfsdk:"address"`
	Creation    *string          `tfsdk:"creation"`
	Description *string             `tfsdk:"description"`

	// Enabled Check to activate this alias
	Enabled          *bool      `tfsdk:"enabled"`
	ExpireAt         *string `tfsdk:"expire_at"`
	LastModification *string `tfsdk:"last_modification"`
	Pk               *int       `tfsdk:"pk"`

	// Recipients A list of recipient
	Recipients []openapi_types.Email `tfsdk:"recipients"`
}

// AppParameters Serializer for application parameters.
type AppParameters struct {
	Label  string                 `tfsdk:"label"`
	Params map[string]interface{} `tfsdk:"params"`
}

// Application Application serializer.
type Application struct {
	IsExtension bool   `tfsdk:"is_extension"`
	Label       string `tfsdk:"label"`
	Name        string `tfsdk:"name"`
}

// Attendee Attendee serializer.
type Attendee struct {
	DisplayName string              `tfsdk:"display_name"`
	Email       openapi_types.Email `tfsdk:"email"`
}

// CSVIdentityImport Custom serializer for identity import.
type CSVIdentityImport struct {
	ContinueIfExists *bool   `tfsdk:"continue_if_exists"`
	CryptPassword    bool    `tfsdk:"crypt_password"`
	Sepchar          *string `tfsdk:"sepchar"`
	Sourcefile       string  `tfsdk:"sourcefile"`
}

// CSVImport Base serializer for all CSV import endpoints.
type CSVImport struct {
	ContinueIfExists *bool   `tfsdk:"continue_if_exists"`
	Sepchar          *string `tfsdk:"sepchar"`
	Sourcefile       string  `tfsdk:"sourcefile"`
}

// Category Serializer for Category.
type Category struct {
	Name string `tfsdk:"name"`
	Pk   *int   `tfsdk:"pk"`
}

// CheckPassword Simple serializer to check user password.
type CheckPassword struct {
	Password string `tfsdk:"password"`
}

// CheckTFASetup Serializer used to finalize 2FA setup.
type CheckTFASetup struct {
	PinCode string `tfsdk:"pin_code"`
}

// CheckToken Serializer for the check_token action.
type CheckToken struct {
	Calendar string `tfsdk:"calendar"`
	Token    string `tfsdk:"token"`
}

// Contact Contact serializer.
type Contact struct {
	Address      *string             `tfsdk:"address"`
	BirthDate    *openapi_types.Date `tfsdk:"birth_date"`
	Categories   *[]int              `tfsdk:"categories"`
	City         *string             `tfsdk:"city"`
	Company      *string             `tfsdk:"company"`
	Country      *string             `tfsdk:"country"`
	DisplayName  *string             `tfsdk:"display_name"`
	Emails       []EmailAddress      `tfsdk:"emails"`
	FirstName    *string             `tfsdk:"first_name"`
	LastName     *string             `tfsdk:"last_name"`
	Note         *string             `tfsdk:"note"`
	PhoneNumbers *[]PhoneNumber      `tfsdk:"phone_numbers"`
	Pk           *int                `tfsdk:"pk"`
	Position     *string             `tfsdk:"position"`
	State        *string             `tfsdk:"state"`
	Zipcode      *string             `tfsdk:"zipcode"`
}

// CreateDomainAdmin Sub serializer for domain administrator creation.
type CreateDomainAdmin struct {
	Password    *string `tfsdk:"password"`
	Username    string  `tfsdk:"username"`
	WithAliases *bool   `tfsdk:"with_aliases"`
	WithMailbox *bool   `tfsdk:"with_mailbox"`
}

// DMARCAligment defines model for DMARCAligment.
type DMARCAligment struct {
	Aligned   map[string]map[string]Source `tfsdk:"aligned"`
	Failed    map[string]map[string]Source `tfsdk:"failed"`
	Forwarded map[string]map[string]Source `tfsdk:"forwarded"`
	Trusted   map[string]map[string]Source `tfsdk:"trusted"`
}

// DNSBLResult Serializer for DNSBLResult.
type DNSBLResult struct {
	// Mx Serializer for MXRecord.
	Mx       MXRecord `tfsdk:"mx"`
	Provider string   `tfsdk:"provider"`
	Status   *string  `tfsdk:"status"`
}

// DNSDetail defines model for DNSDetail.
type DNSDetail struct {
	// AutoconfigRecord Serializer for DNSRecord.
	AutoconfigRecord DNSRecord `tfsdk:"autoconfig_record"`

	// AutodiscoverRecord Serializer for DNSRecord.
	AutodiscoverRecord DNSRecord `tfsdk:"autodiscover_record"`

	// DkimRecord Serializer for DNSRecord.
	DkimRecord DNSRecord `tfsdk:"dkim_record"`

	// DmarcRecord Serializer for DNSRecord.
	DmarcRecord  DNSRecord     `tfsdk:"dmarc_record"`
	DnsblResults []DNSBLResult `tfsdk:"dnsbl_results"`
	MxRecords    []MXRecord    `tfsdk:"mx_records"`

	// SpfRecord Serializer for DNSRecord.
	SpfRecord DNSRecord `tfsdk:"spf_record"`
}

// DNSRecord Serializer for DNSRecord.
type DNSRecord struct {
	Error   *string `tfsdk:"error"`
	IsValid *bool   `tfsdk:"is_valid"`

	// Type * `spf` - SPF
	// * `dkim` - DKIM
	// * `dmarc` - DMARC
	// * `autoconfig` - Autoconfig
	// * `autodiscover` - Autodiscover
	Type    DNSRecordTypeEnum `tfsdk:"type"`
	Updated *string        `tfsdk:"updated"`
	Value   *string           `tfsdk:"value"`
}

// DNSRecordTypeEnum * `spf` - SPF
// * `dkim` - DKIM
// * `dmarc` - DMARC
// * `autoconfig` - Autoconfig
// * `autodiscover` - Autodiscover
type DNSRecordTypeEnum string

// DeleteAccount Serializer used with delete operation.
type DeleteAccount struct {
	Keepdir *bool `tfsdk:"keepdir"`
}

// DeleteDomain Serializer used with delete operation.
type DeleteDomain struct {
	KeepFolder *bool `tfsdk:"keep_folder"`
}

// DkimKeyLengthEnum * `1024` - 1024
// * `2048` - 2048
// * `4096` - 4096
type DkimKeyLengthEnum int

// Domain Domain serializer for v2 API.
type Domain struct {
	Creation *string `tfsdk:"creation"`

	// DefaultMailboxQuota Default quota in MB applied to mailboxes. A value of 0 means no quota.
	DefaultMailboxQuota *string               `tfsdk:"default_mailbox_quota"`
	DkimKeyLength       *Domain_DkimKeyLength `tfsdk:"dkim_key_length"`
	DkimKeySelector     *string               `tfsdk:"dkim_key_selector"`
	DkimPrivateKeyPath  *string               `tfsdk:"dkim_private_key_path"`
	DkimPublicKey       *string               `tfsdk:"dkim_public_key"`

	// DnsGlobalStatus Return global DNS status.
	DnsGlobalStatus  *string            `tfsdk:"dns_global_status"`
	DomainAdmin      *CreateDomainAdmin `tfsdk:"domain_admin"`
	DomainaliasCount *int               `tfsdk:"domainalias_count"`

	// EnableDkim If you activate this feature, a DKIM key will be generated for this domain.
	EnableDkim *bool `tfsdk:"enable_dkim"`

	// Enabled Check to activate this domain
	Enabled          *bool      `tfsdk:"enabled"`
	LastModification *string `tfsdk:"last_modification"`
	MailboxCount     *int       `tfsdk:"mailbox_count"`
	MbaliasCount     *int       `tfsdk:"mbalias_count"`

	// MessageLimit Number of messages this domain can send per day
	MessageLimit *int `tfsdk:"message_limit"`

	// Name The domain name
	Name string `tfsdk:"name"`

	// OpenedAlarmsCount Number of alarms currently opened for this domain.
	OpenedAlarmsCount *int `tfsdk:"opened_alarms_count"`
	Pk                *int `tfsdk:"pk"`

	// Quota Quota shared between mailboxes. Can be expressed in KB, MB (default) or GB. A value of 0 means no quota.
	Quota *string `tfsdk:"quota"`

	// Transport Serializer for Transport model.
	Transport *Transport `tfsdk:"transport"`
	Type      *string    `tfsdk:"type"`
}

// Domain_DkimKeyLength defines model for Domain.DkimKeyLength.
type Domain_DkimKeyLength struct {
	union json.RawMessage
}

// DomainAdmin Serializer used for administrator related routes.
type DomainAdmin struct {
	FirstName *string `tfsdk:"first_name"`
	Id        *int    `tfsdk:"id"`
	LastName  *string `tfsdk:"last_name"`
	Username  string  `tfsdk:"username"`
}

// DomainAlias Base DomainAlias serializer.
type DomainAlias struct {
	// Enabled Check to activate this alias
	Enabled *bool `tfsdk:"enabled"`

	// Name The alias name
	Name string `tfsdk:"name"`
	Pk   *int   `tfsdk:"pk"`

	// Target The domain this alias points to
	Target int `tfsdk:"target"`
}

// EmailAddress Email address serializer.
type EmailAddress struct {
	Address openapi_types.Email `tfsdk:"address"`
	Pk      *int                `tfsdk:"pk"`

	// Type * `home` - Home
	// * `work` - Work
	// * `other` - Other
	Type Type9e9Enum `tfsdk:"type"`
}

// EmailAddressWithName Email address + contact name serializer.
type EmailAddressWithName struct {
	Address     openapi_types.Email `tfsdk:"address"`
	DisplayName *string             `tfsdk:"display_name"`
	Pk          *int                `tfsdk:"pk"`

	// Type * `home` - Home
	// * `work` - Work
	// * `other` - Other
	Type Type9e9Enum `tfsdk:"type"`
}

// EmailProvider Serializer class for EmailProvider.
type EmailProvider struct {
	Address string                 `tfsdk:"address"`
	Domains *[]EmailProviderDomain `tfsdk:"domains"`
	Id      *int                   `tfsdk:"id"`
	Name    string                 `tfsdk:"name"`
	Port    *int                   `tfsdk:"port"`
	Secured *bool                  `tfsdk:"secured"`
}

// EmailProviderDomain Serializer class for EmailProviderDomain.
type EmailProviderDomain struct {
	Id        *int   `tfsdk:"id"`
	Name      string `tfsdk:"name"`
	NewDomain *int   `tfsdk:"new_domain"`
}

// GetAccountCredentials A serializer for get account credential view.
type GetAccountCredentials struct {
	AccountId int `tfsdk:"account_id"`
}

// Graph A serializer to represent a graph.
type Graph struct {
	Series []GraphCurve `tfsdk:"series"`
	Title  string       `tfsdk:"title"`
}

// GraphCurve A serializer to represent a curve in a graph.
type GraphCurve struct {
	BackgroundColor string       `tfsdk:"backgroundColor"`
	Data            []GraphPoint `tfsdk:"data"`
	Name            string       `tfsdk:"name"`
}

// GraphPoint A serializer to represent a point in a curve.
type GraphPoint struct {
	X float64 `tfsdk:"x"`
	Y float64 `tfsdk:"y"`
}

// LanguageEnum * `br` - breton
// * `cs` - čeština
// * `de` - deutsch
// * `en` - english
// * `el` - ελληνικά
// * `es` - español
// * `fi` - Suomalainen
// * `fr` - français
// * `it` - italiano
// * `ja` - 日本の
// * `nl` - nederlands
// * `pt` - português
// * `pt-br` - português (BR)
// * `pl` - polski
// * `ro` - Română
// * `ru` - русский
// * `sv` - svenska
// * `tr` - türk
// * `zh-hant` - 中文（台灣）
type LanguageEnum string

// Log Log serializer.
type Log struct {
	DateCreated *string `tfsdk:"date_created"`
	Level       string  `tfsdk:"level"`
	Logger      string  `tfsdk:"logger"`
	Message     string  `tfsdk:"message"`
}

// MXRecord Serializer for MXRecord.
type MXRecord struct {
	Address string    `tfsdk:"address"`
	Name    string    `tfsdk:"name"`
	Updated time.Time `tfsdk:"updated"`
}

// Mailbox Mailbox serializer.
type Mailbox struct {
	FullAddress openapi_types.Email `tfsdk:"full_address"`
	Pk          int                 `tfsdk:"pk"`
}

// Maillog Serializer for Maillog model.
type Maillog struct {
	Date         time.Time            `tfsdk:"date"`
	Id           *int                 `tfsdk:"id"`
	OriginalRcpt *openapi_types.Email `tfsdk:"original_rcpt"`
	QueueId      string               `tfsdk:"queue_id"`
	Rcpt         openapi_types.Email  `tfsdk:"rcpt"`
	Sender       openapi_types.Email  `tfsdk:"sender"`
	Size         int                  `tfsdk:"size"`
	Status       string               `tfsdk:"status"`
}

// Migration Serializer class for Migration.
type Migration struct {
	Id *int `tfsdk:"id"`

	// Mailbox Mailbox serializer.
	Mailbox  Mailbox `tfsdk:"mailbox"`
	Provider *Nested `tfsdk:"provider"`
	Username string  `tfsdk:"username"`
}

// ModoboaComponent Serializer used for information endpoint.
type ModoboaComponent struct {
	ChangelogUrl *string `tfsdk:"changelog_url"`
	Description  string  `tfsdk:"description"`
	Label        string  `tfsdk:"label"`
	LastVersion  *string `tfsdk:"last_version"`
	Name         string  `tfsdk:"name"`
	Update       *bool   `tfsdk:"update"`
	Version      string  `tfsdk:"version"`
}

// Nested defines model for Nested.
type Nested struct {
	Creation            *string            `tfsdk:"creation"`
	DefaultMailboxQuota *int                  `tfsdk:"default_mailbox_quota"`
	DkimKeyLength       *Nested_DkimKeyLength `tfsdk:"dkim_key_length"`
	DkimKeySelector     *string               `tfsdk:"dkim_key_selector"`
	DkimPrivateKeyPath  *string               `tfsdk:"dkim_private_key_path"`
	DkimPublicKey       *string               `tfsdk:"dkim_public_key"`

	// EnableDkim If you activate this feature, a DKIM key will be generated for this domain.
	EnableDkim *bool `tfsdk:"enable_dkim"`

	// EnableDnsChecks Check to enable DNS checks for this domain
	EnableDnsChecks *bool `tfsdk:"enable_dns_checks"`

	// Enabled Check to activate this domain
	Enabled          *bool      `tfsdk:"enabled"`
	Id               *int       `tfsdk:"id"`
	LastModification *string `tfsdk:"last_modification"`

	// MessageLimit Number of messages this domain can send per day
	MessageLimit *int `tfsdk:"message_limit"`

	// Name The domain name
	Name      string  `tfsdk:"name"`
	Quota     *int    `tfsdk:"quota"`
	Transport *int    `tfsdk:"transport"`
	Type      *string `tfsdk:"type"`
}

// Nested_DkimKeyLength defines model for Nested.DkimKeyLength.
type Nested_DkimKeyLength struct {
	union json.RawMessage
}

// NullEnum defines model for NullEnum.
type NullEnum = interface{}

// PaginatedAlarmList defines model for PaginatedAlarmList.
type PaginatedAlarmList struct {
	Count    *int     `tfsdk:"count"`
	Next     *string  `tfsdk:"next"`
	Previous *string  `tfsdk:"previous"`
	Results  *[]Alarm `tfsdk:"results"`
}

// PaginatedLogList defines model for PaginatedLogList.
type PaginatedLogList struct {
	Count    *int    `tfsdk:"count"`
	Next     *string `tfsdk:"next"`
	Previous *string `tfsdk:"previous"`
	Results  *[]Log  `tfsdk:"results"`
}

// PaginatedMaillogList defines model for PaginatedMaillogList.
type PaginatedMaillogList struct {
	Count    *int       `tfsdk:"count"`
	Next     *string    `tfsdk:"next"`
	Previous *string    `tfsdk:"previous"`
	Results  *[]Maillog `tfsdk:"results"`
}

// Parameter Parameter serializer.
type Parameter struct {
	Choices  []ParameterChoice `tfsdk:"choices"`
	Display  string            `tfsdk:"display"`
	HelpText string            `tfsdk:"help_text"`
	Label    string            `tfsdk:"label"`
	Name     string            `tfsdk:"name"`
	Widget   string            `tfsdk:"widget"`
}

// ParameterChoice Parameter choice serializer.
type ParameterChoice struct {
	Text  string `tfsdk:"text"`
	Value string `tfsdk:"value"`
}

// PatchedARMessage A serializer for ARmessage.
type PatchedARMessage struct {
	// Content The content that will appear in sent emails
	Content *string `tfsdk:"content"`

	// Enabled Activate/Deactivate your auto reply
	Enabled  *bool      `tfsdk:"enabled"`
	Fromdate *string `tfsdk:"fromdate"`
	Id       *int       `tfsdk:"id"`
	Mbox     *int       `tfsdk:"mbox"`

	// Subject The subject that will appear in sent emails
	Subject   *string    `tfsdk:"subject"`
	Untildate *string `tfsdk:"untildate"`
}

// PatchedAccessRule AccessRule serializer.
type PatchedAccessRule struct {
	Calendar *int `tfsdk:"calendar"`

	// Mailbox Mailbox serializer.
	Mailbox *Mailbox `tfsdk:"mailbox"`
	Pk      *int     `tfsdk:"pk"`
	Read    *bool    `tfsdk:"read"`
	Write   *bool    `tfsdk:"write"`
}

// PatchedAlarm Serializer for Alarm related endpoints.
type PatchedAlarm struct {
	Closed       *string  `tfsdk:"closed"`
	Created      *string  `tfsdk:"created"`
	Domain       *Nested     `tfsdk:"domain"`
	Id           *int        `tfsdk:"id"`
	InternalName *string     `tfsdk:"internal_name"`
	Mailbox      *Nested     `tfsdk:"mailbox"`
	Status       *StatusEnum `tfsdk:"status"`
	Title        *string     `tfsdk:"title"`
}

// PatchedAlias Alias serializer for v2 API.
type PatchedAlias struct {
	Address     *openapi_types.Email `tfsdk:"address"`
	Creation    *string           `tfsdk:"creation"`
	Description *string              `tfsdk:"description"`

	// Enabled Check to activate this alias
	Enabled          *bool      `tfsdk:"enabled"`
	ExpireAt         *string `tfsdk:"expire_at"`
	LastModification *string `tfsdk:"last_modification"`
	Pk               *int       `tfsdk:"pk"`

	// Recipients A list of recipient
	Recipients *[]openapi_types.Email `tfsdk:"recipients"`
}

// PatchedCategory Serializer for Category.
type PatchedCategory struct {
	Name *string `tfsdk:"name"`
	Pk   *int    `tfsdk:"pk"`
}

// PatchedContact Contact serializer.
type PatchedContact struct {
	Address      *string             `tfsdk:"address"`
	BirthDate    *openapi_types.Date `tfsdk:"birth_date"`
	Categories   *[]int              `tfsdk:"categories"`
	City         *string             `tfsdk:"city"`
	Company      *string             `tfsdk:"company"`
	Country      *string             `tfsdk:"country"`
	DisplayName  *string             `tfsdk:"display_name"`
	Emails       *[]EmailAddress     `tfsdk:"emails"`
	FirstName    *string             `tfsdk:"first_name"`
	LastName     *string             `tfsdk:"last_name"`
	Note         *string             `tfsdk:"note"`
	PhoneNumbers *[]PhoneNumber      `tfsdk:"phone_numbers"`
	Pk           *int                `tfsdk:"pk"`
	Position     *string             `tfsdk:"position"`
	State        *string             `tfsdk:"state"`
	Zipcode      *string             `tfsdk:"zipcode"`
}

// PatchedDomain Domain serializer for v2 API.
type PatchedDomain struct {
	Creation *string `tfsdk:"creation"`

	// DefaultMailboxQuota Default quota in MB applied to mailboxes. A value of 0 means no quota.
	DefaultMailboxQuota *string                      `tfsdk:"default_mailbox_quota"`
	DkimKeyLength       *PatchedDomain_DkimKeyLength `tfsdk:"dkim_key_length"`
	DkimKeySelector     *string                      `tfsdk:"dkim_key_selector"`
	DkimPrivateKeyPath  *string                      `tfsdk:"dkim_private_key_path"`
	DkimPublicKey       *string                      `tfsdk:"dkim_public_key"`

	// DnsGlobalStatus Return global DNS status.
	DnsGlobalStatus  *string            `tfsdk:"dns_global_status"`
	DomainAdmin      *CreateDomainAdmin `tfsdk:"domain_admin"`
	DomainaliasCount *int               `tfsdk:"domainalias_count"`

	// EnableDkim If you activate this feature, a DKIM key will be generated for this domain.
	EnableDkim *bool `tfsdk:"enable_dkim"`

	// Enabled Check to activate this domain
	Enabled          *bool      `tfsdk:"enabled"`
	LastModification *string `tfsdk:"last_modification"`
	MailboxCount     *int       `tfsdk:"mailbox_count"`
	MbaliasCount     *int       `tfsdk:"mbalias_count"`

	// MessageLimit Number of messages this domain can send per day
	MessageLimit *int `tfsdk:"message_limit"`

	// Name The domain name
	Name *string `tfsdk:"name"`

	// OpenedAlarmsCount Number of alarms currently opened for this domain.
	OpenedAlarmsCount *int `tfsdk:"opened_alarms_count"`
	Pk                *int `tfsdk:"pk"`

	// Quota Quota shared between mailboxes. Can be expressed in KB, MB (default) or GB. A value of 0 means no quota.
	Quota *string `tfsdk:"quota"`

	// Transport Serializer for Transport model.
	Transport *Transport `tfsdk:"transport"`
	Type      *string    `tfsdk:"type"`
}

// PatchedDomain_DkimKeyLength defines model for PatchedDomain.DkimKeyLength.
type PatchedDomain_DkimKeyLength struct {
	union json.RawMessage
}

// PatchedDomainAlias Base DomainAlias serializer.
type PatchedDomainAlias struct {
	// Enabled Check to activate this alias
	Enabled *bool `tfsdk:"enabled"`

	// Name The alias name
	Name *string `tfsdk:"name"`
	Pk   *int    `tfsdk:"pk"`

	// Target The domain this alias points to
	Target *int `tfsdk:"target"`
}

// PatchedEmailProvider Serializer class for EmailProvider.
type PatchedEmailProvider struct {
	Address *string                `tfsdk:"address"`
	Domains *[]EmailProviderDomain `tfsdk:"domains"`
	Id      *int                   `tfsdk:"id"`
	Name    *string                `tfsdk:"name"`
	Port    *int                   `tfsdk:"port"`
	Secured *bool                  `tfsdk:"secured"`
}

// PatchedRelayDomain RelayDomain serializer class.
type PatchedRelayDomain struct {
	DkimKeySelector *string `tfsdk:"dkim_key_selector"`
	DkimPublicKey   *string `tfsdk:"dkim_public_key"`

	// EnableDkim If you activate this feature, a DKIM key will be generated for this domain.
	EnableDkim *bool `tfsdk:"enable_dkim"`

	// Enabled Check to activate this domain
	Enabled *bool `tfsdk:"enabled"`

	// Name The domain name
	Name *string `tfsdk:"name"`
	Pk   *int    `tfsdk:"pk"`

	// Transport Serializer for Transport model.
	Transport *Transport `tfsdk:"transport"`
}

// PatchedResources Resources serializer.
type PatchedResources struct {
	DomainAdmins   *int `tfsdk:"domain_admins"`
	DomainAliases  *int `tfsdk:"domain_aliases"`
	Domains        *int `tfsdk:"domains"`
	MailboxAliases *int `tfsdk:"mailbox_aliases"`
	Mailboxes      *int `tfsdk:"mailboxes"`
	Quota          *int `tfsdk:"quota"`
}

// PatchedSenderAddress Base Alias serializer.
type PatchedSenderAddress struct {
	Address *openapi_types.Email `tfsdk:"address"`
	Mailbox *int                 `tfsdk:"mailbox"`
	Pk      *int                 `tfsdk:"pk"`
}

// PatchedSharedCalendar Shared calendar serializer.
type PatchedSharedCalendar struct {
	Color *string `tfsdk:"color"`

	// Domain Domain serializer for v2 API.
	Domain   *Domain `tfsdk:"domain"`
	FullUrl  *string `tfsdk:"full_url"`
	Name     *string `tfsdk:"name"`
	Path     *string `tfsdk:"path"`
	Pk       *int    `tfsdk:"pk"`
	ShareUrl *string `tfsdk:"share_url"`
}

// PatchedUserCalendar User calendar serializer.
type PatchedUserCalendar struct {
	Color    *string `tfsdk:"color"`
	FullUrl  *string `tfsdk:"full_url"`
	Name     *string `tfsdk:"name"`
	Path     *string `tfsdk:"path"`
	Pk       *int    `tfsdk:"pk"`
	ShareUrl *string `tfsdk:"share_url"`
}

// PatchedWritableAccount Add support for aliases and sender addresses.
type PatchedWritableAccount struct {
	Aliases    *[]openapi_types.Email `tfsdk:"aliases"`
	DateJoined *string             `tfsdk:"date_joined"`
	Domains    *[]string              `tfsdk:"domains"`
	FirstName  *string                `tfsdk:"first_name"`
	IsActive   *bool                  `tfsdk:"is_active"`

	// Language Prefered language to display pages.
	//
	// * `br` - breton
	// * `cs` - čeština
	// * `de` - deutsch
	// * `en` - english
	// * `el` - ελληνικά
	// * `es` - español
	// * `fi` - Suomalainen
	// * `fr` - français
	// * `it` - italiano
	// * `ja` - 日本の
	// * `nl` - nederlands
	// * `pt` - português
	// * `pt-br` - português (BR)
	// * `pl` - polski
	// * `ro` - Română
	// * `ru` - русский
	// * `sv` - svenska
	// * `tr` - türk
	// * `zh-hant` - 中文（台灣）
	Language  *LanguageEnum `tfsdk:"language"`
	LastLogin *string    `tfsdk:"last_login"`
	LastName  *string       `tfsdk:"last_name"`

	// Mailbox Mailbox serializer.
	Mailbox *Mailbox `tfsdk:"mailbox"`

	// MasterUser Allow this administrator to access user mailboxes
	MasterUser  *bool               `tfsdk:"master_user"`
	Password    *string             `tfsdk:"password"`
	PhoneNumber *string             `tfsdk:"phone_number"`
	Pk          *int                `tfsdk:"pk"`
	Resources   *[]WritableResource `tfsdk:"resources"`

	// Role * `DomainAdmins` - Domain administrator
	// * `Resellers` - Reseller
	// * `SimpleUsers` - Simple user
	// * `SuperAdmins` - Super administrator
	Role *RoleEnum `tfsdk:"role"`

	// SecondaryEmail An alternative e-mail address, can be used for recovery needs.
	SecondaryEmail *openapi_types.Email `tfsdk:"secondary_email"`
	TfaEnabled     *bool                `tfsdk:"tfa_enabled"`
	Username       *string              `tfsdk:"username"`
}

// PatchedWritableEvent Event serializer for write operations.
type PatchedWritableEvent struct {
	AllDay          *bool       `tfsdk:"allDay"`
	Attendees       *[]Attendee `tfsdk:"attendees"`
	Calendar        *int        `tfsdk:"calendar"`
	Color           *string     `tfsdk:"color"`
	Description     *string     `tfsdk:"description"`
	End             *string  `tfsdk:"end"`
	Id              *string     `tfsdk:"id"`
	NewCalendarType *string     `tfsdk:"new_calendar_type"`
	Start           *string  `tfsdk:"start"`
	Title           *string     `tfsdk:"title"`
}

// PhoneNumber Phone number serializer.
type PhoneNumber struct {
	Number string `tfsdk:"number"`
	Pk     *int   `tfsdk:"pk"`

	// Type * `home` - Home
	// * `work` - Work
	// * `other` - Other
	// * `main` - Main
	// * `cell` - Cellular
	// * `fax` - Fax
	// * `pager` - Pager
	Type PhoneNumberTypeEnum `tfsdk:"type"`
}

// PhoneNumberTypeEnum * `home` - Home
// * `work` - Work
// * `other` - Other
// * `main` - Main
// * `cell` - Cellular
// * `fax` - Fax
// * `pager` - Pager
type PhoneNumberTypeEnum string

// ROEvent Event serializer for read operations.
type ROEvent struct {
	AllDay    *bool       `tfsdk:"allDay"`
	Attendees *[]Attendee `tfsdk:"attendees"`

	// Calendar Shared calendar serializer.
	Calendar    SharedCalendar `tfsdk:"calendar"`
	Color       *string        `tfsdk:"color"`
	Description *string        `tfsdk:"description"`
	End         time.Time      `tfsdk:"end"`
	Id          *string        `tfsdk:"id"`
	Start       time.Time      `tfsdk:"start"`
	Title       string         `tfsdk:"title"`
}

// RelayDomain RelayDomain serializer class.
type RelayDomain struct {
	DkimKeySelector *string `tfsdk:"dkim_key_selector"`
	DkimPublicKey   *string `tfsdk:"dkim_public_key"`

	// EnableDkim If you activate this feature, a DKIM key will be generated for this domain.
	EnableDkim *bool `tfsdk:"enable_dkim"`

	// Enabled Check to activate this domain
	Enabled *bool `tfsdk:"enabled"`

	// Name The domain name
	Name string `tfsdk:"name"`
	Pk   *int   `tfsdk:"pk"`

	// Transport Serializer for Transport model.
	Transport Transport `tfsdk:"transport"`
}

// ResetPassword Serializer by the reset password endpoint.
type ResetPassword struct {
	Email openapi_types.Email `tfsdk:"email"`
}

// Resources Resources serializer.
type Resources struct {
	DomainAdmins   int `tfsdk:"domain_admins"`
	DomainAliases  int `tfsdk:"domain_aliases"`
	Domains        int `tfsdk:"domains"`
	MailboxAliases int `tfsdk:"mailbox_aliases"`
	Mailboxes      int `tfsdk:"mailboxes"`
	Quota          int `tfsdk:"quota"`
}

// RoleEnum * `DomainAdmins` - Domain administrator
// * `Resellers` - Reseller
// * `SimpleUsers` - Simple user
// * `SuperAdmins` - Super administrator
type RoleEnum string

// SenderAddress Base Alias serializer.
type SenderAddress struct {
	Address openapi_types.Email `tfsdk:"address"`
	Mailbox int                 `tfsdk:"mailbox"`
	Pk      *int                `tfsdk:"pk"`
}

// SharedCalendar Shared calendar serializer.
type SharedCalendar struct {
	Color *string `tfsdk:"color"`

	// Domain Domain serializer for v2 API.
	Domain   Domain  `tfsdk:"domain"`
	FullUrl  *string `tfsdk:"full_url"`
	Name     string  `tfsdk:"name"`
	Path     *string `tfsdk:"path"`
	Pk       *int    `tfsdk:"pk"`
	ShareUrl *string `tfsdk:"share_url"`
}

// SimpleDomainAdmin Serializer used for add/remove operations.
type SimpleDomainAdmin struct {
	Account int `tfsdk:"account"`
}

// Source defines model for Source.
type Source struct {
	Dkim  TestResult `tfsdk:"dkim"`
	Spf   TestResult `tfsdk:"spf"`
	Total int        `tfsdk:"total"`
}

// Statistics Serializer to return statistics.
type Statistics struct {
	Graphs []Graph `tfsdk:"graphs"`
}

// StatusEnum * `1` - Opened
// * `2` - Closed
type StatusEnum int

// TestResult defines model for TestResult.
type TestResult struct {
	Failure int `tfsdk:"failure"`
	Success int `tfsdk:"success"`
}

// TokenObtainPair defines model for TokenObtainPair.
type TokenObtainPair struct {
	Access   *string `tfsdk:"access"`
	Password *string `tfsdk:"password"`
	Refresh  *string `tfsdk:"refresh"`
	Username *string `tfsdk:"username"`
}

// TokenRefresh defines model for TokenRefresh.
type TokenRefresh struct {
	Access  *string `tfsdk:"access"`
	Refresh *string `tfsdk:"refresh"`
}

// Transport Serializer for Transport model.
type Transport struct {
	Service  string                 `tfsdk:"service"`
	Settings map[string]interface{} `tfsdk:"settings"`
}

// TransportBackend Serializer for transport backend.
type TransportBackend struct {
	Name     string                    `tfsdk:"name"`
	Settings []TransportBackendSetting `tfsdk:"settings"`
}

// TransportBackendSetting Serializer for transport backend setting.
type TransportBackendSetting struct {
	Default  *string `tfsdk:"default"`
	Label    string  `tfsdk:"label"`
	Name     string  `tfsdk:"name"`
	Required *bool   `tfsdk:"required"`
	Type     *string `tfsdk:"type"`
}

// Type9e9Enum * `home` - Home
// * `work` - Work
// * `other` - Other
type Type9e9Enum string

// UserAPIToken Serializer used by API access routes.
type UserAPIToken struct {
	Token string `tfsdk:"token"`
}

// UserCalendar User calendar serializer.
type UserCalendar struct {
	Color    *string `tfsdk:"color"`
	FullUrl  *string `tfsdk:"full_url"`
	Name     string  `tfsdk:"name"`
	Path     *string `tfsdk:"path"`
	Pk       *int    `tfsdk:"pk"`
	ShareUrl *string `tfsdk:"share_url"`
}

// WritableAccount Add support for aliases and sender addresses.
type WritableAccount struct {
	Aliases    *[]openapi_types.Email `tfsdk:"aliases"`
	DateJoined *string             `tfsdk:"date_joined"`
	Domains    *[]string              `tfsdk:"domains"`
	FirstName  *string                `tfsdk:"first_name"`
	IsActive   *bool                  `tfsdk:"is_active"`

	// Language Prefered language to display pages.
	//
	// * `br` - breton
	// * `cs` - čeština
	// * `de` - deutsch
	// * `en` - english
	// * `el` - ελληνικά
	// * `es` - español
	// * `fi` - Suomalainen
	// * `fr` - français
	// * `it` - italiano
	// * `ja` - 日本の
	// * `nl` - nederlands
	// * `pt` - português
	// * `pt-br` - português (BR)
	// * `pl` - polski
	// * `ro` - Română
	// * `ru` - русский
	// * `sv` - svenska
	// * `tr` - türk
	// * `zh-hant` - 中文（台灣）
	Language  *LanguageEnum `tfsdk:"language"`
	LastLogin *string    `tfsdk:"last_login"`
	LastName  *string       `tfsdk:"last_name"`

	// Mailbox Mailbox serializer.
	Mailbox *Mailbox `tfsdk:"mailbox"`

	// MasterUser Allow this administrator to access user mailboxes
	MasterUser  *bool               `tfsdk:"master_user"`
	Password    *string             `tfsdk:"password"`
	PhoneNumber *string             `tfsdk:"phone_number"`
	Pk          *int                `tfsdk:"pk"`
	Resources   *[]WritableResource `tfsdk:"resources"`

	// Role * `DomainAdmins` - Domain administrator
	// * `Resellers` - Reseller
	// * `SimpleUsers` - Simple user
	// * `SuperAdmins` - Super administrator
	Role RoleEnum `tfsdk:"role"`

	// SecondaryEmail An alternative e-mail address, can be used for recovery needs.
	SecondaryEmail *openapi_types.Email `tfsdk:"secondary_email"`
	TfaEnabled     *bool                `tfsdk:"tfa_enabled"`
	Username       string               `tfsdk:"username"`
}

// WritableEvent Event serializer for write operations.
type WritableEvent struct {
	AllDay          *bool       `tfsdk:"allDay"`
	Attendees       *[]Attendee `tfsdk:"attendees"`
	Calendar        int         `tfsdk:"calendar"`
	Color           *string     `tfsdk:"color"`
	Description     *string     `tfsdk:"description"`
	End             time.Time   `tfsdk:"end"`
	Id              *string     `tfsdk:"id"`
	NewCalendarType *string     `tfsdk:"new_calendar_type"`
	Start           time.Time   `tfsdk:"start"`
	Title           string      `tfsdk:"title"`
}

// WritableResource Serializer used to update resource.
type WritableResource struct {
	MaxValue *int   `tfsdk:"max_value"`
	Name     string `tfsdk:"name"`
}

// AccountsListParams defines parameters for AccountsList.
type AccountsListParams struct {
	Domain *int    `form:"domain" json:"domain"`
	Role   *string `form:"role" json:"role"`

	// Search A search term.
	Search *string `form:"search" json:"search"`
}

// AlarmsListParams defines parameters for AlarmsList.
type AlarmsListParams struct {
	Created *string `form:"created" json:"created"`
	MinDate *string `form:"min_date" json:"min_date"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering" json:"ordering"`

	// Page A page number within the paginated result set.
	Page *int `form:"page" json:"page"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size" json:"page_size"`

	// Search A search term.
	Search *string `form:"search" json:"search"`
}

// ArmessagesListParams defines parameters for ArmessagesList.
type ArmessagesListParams struct {
	Mbox     *string `form:"mbox" json:"mbox"`
	MboxUser *int    `form:"mbox__user" json:"mbox__user"`
}

// ContactsListParams defines parameters for ContactsList.
type ContactsListParams struct {
	Categories *[]int  `form:"categories" json:"categories"`
	Category   *string `form:"category" json:"category"`

	// Search A search term.
	Search *string `form:"search" json:"search"`
}

// DomainaliasesListParams defines parameters for DomainaliasesList.
type DomainaliasesListParams struct {
	Domain *string                        `form:"domain" json:"domain"`
	Format *DomainaliasesListParamsFormat `form:"format" json:"format"`
}

// DomainaliasesListParamsFormat defines parameters for DomainaliasesList.
type DomainaliasesListParamsFormat string

// DomainaliasesCreateParams defines parameters for DomainaliasesCreate.
type DomainaliasesCreateParams struct {
	Format *DomainaliasesCreateParamsFormat `form:"format" json:"format"`
}

// DomainaliasesCreateParamsFormat defines parameters for DomainaliasesCreate.
type DomainaliasesCreateParamsFormat string

// DomainaliasesDestroyParams defines parameters for DomainaliasesDestroy.
type DomainaliasesDestroyParams struct {
	Format *DomainaliasesDestroyParamsFormat `form:"format" json:"format"`
}

// DomainaliasesDestroyParamsFormat defines parameters for DomainaliasesDestroy.
type DomainaliasesDestroyParamsFormat string

// DomainaliasesRetrieveParams defines parameters for DomainaliasesRetrieve.
type DomainaliasesRetrieveParams struct {
	Format *DomainaliasesRetrieveParamsFormat `form:"format" json:"format"`
}

// DomainaliasesRetrieveParamsFormat defines parameters for DomainaliasesRetrieve.
type DomainaliasesRetrieveParamsFormat string

// DomainaliasesPartialUpdateParams defines parameters for DomainaliasesPartialUpdate.
type DomainaliasesPartialUpdateParams struct {
	Format *DomainaliasesPartialUpdateParamsFormat `form:"format" json:"format"`
}

// DomainaliasesPartialUpdateParamsFormat defines parameters for DomainaliasesPartialUpdate.
type DomainaliasesPartialUpdateParamsFormat string

// DomainaliasesUpdateParams defines parameters for DomainaliasesUpdate.
type DomainaliasesUpdateParams struct {
	Format *DomainaliasesUpdateParamsFormat `form:"format" json:"format"`
}

// DomainaliasesUpdateParamsFormat defines parameters for DomainaliasesUpdate.
type DomainaliasesUpdateParamsFormat string

// EmailProvidersListParams defines parameters for EmailProvidersList.
type EmailProvidersListParams struct {
	// Search A search term.
	Search *string `form:"search" json:"search"`
}

// EmailsListParams defines parameters for EmailsList.
type EmailsListParams struct {
	// Search A search term.
	Search *string `form:"search" json:"search"`
}

// LogsAuditTrailListParams defines parameters for LogsAuditTrailList.
type LogsAuditTrailListParams struct {
	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering" json:"ordering"`

	// Page A page number within the paginated result set.
	Page *int `form:"page" json:"page"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size" json:"page_size"`

	// Search A search term.
	Search *string `form:"search" json:"search"`
}

// LogsMessagesListParams defines parameters for LogsMessagesList.
type LogsMessagesListParams struct {
	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering" json:"ordering"`

	// Page A page number within the paginated result set.
	Page *int `form:"page" json:"page"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size" json:"page_size"`

	// Search A search term.
	Search *string `form:"search" json:"search"`
}

// MigrationsListParams defines parameters for MigrationsList.
type MigrationsListParams struct {
	// Search A search term.
	Search *string `form:"search" json:"search"`
}

// SenderaddressesListParams defines parameters for SenderaddressesList.
type SenderaddressesListParams struct {
	Mailbox *int `form:"mailbox" json:"mailbox"`
}

// StatisticsListParams defines parameters for StatisticsList.
type StatisticsListParams struct {
	End     *openapi_types.Date `form:"end" json:"end"`
	Graphic *string             `form:"graphic" json:"graphic"`
	Gset    string              `form:"gset" json:"gset"`

	// Period * `day` - Day
	// * `week` - Week
	// * `month` - Month
	// * `year` - Year
	// * `custom` - Custom
	Period      StatisticsListParamsPeriod `form:"period" json:"period"`
	Searchquery *string                    `form:"searchquery" json:"searchquery"`
	Start       *openapi_types.Date        `form:"start" json:"start"`
}

// StatisticsListParamsPeriod defines parameters for StatisticsList.
type StatisticsListParamsPeriod string

// AccessrulesCreateJSONRequestBody defines body for AccessrulesCreate for application/json ContentType.
type AccessrulesCreateJSONRequestBody = AccessRule

// AccessrulesCreateFormdataRequestBody defines body for AccessrulesCreate for application/x-www-form-urlencoded ContentType.
type AccessrulesCreateFormdataRequestBody = AccessRule

// AccessrulesCreateMultipartRequestBody defines body for AccessrulesCreate for multipart/form-data ContentType.
type AccessrulesCreateMultipartRequestBody = AccessRule

// AccessrulesPartialUpdateJSONRequestBody defines body for AccessrulesPartialUpdate for application/json ContentType.
type AccessrulesPartialUpdateJSONRequestBody = PatchedAccessRule

// AccessrulesPartialUpdateFormdataRequestBody defines body for AccessrulesPartialUpdate for application/x-www-form-urlencoded ContentType.
type AccessrulesPartialUpdateFormdataRequestBody = PatchedAccessRule

// AccessrulesPartialUpdateMultipartRequestBody defines body for AccessrulesPartialUpdate for multipart/form-data ContentType.
type AccessrulesPartialUpdateMultipartRequestBody = PatchedAccessRule

// AccessrulesUpdateJSONRequestBody defines body for AccessrulesUpdate for application/json ContentType.
type AccessrulesUpdateJSONRequestBody = AccessRule

// AccessrulesUpdateFormdataRequestBody defines body for AccessrulesUpdate for application/x-www-form-urlencoded ContentType.
type AccessrulesUpdateFormdataRequestBody = AccessRule

// AccessrulesUpdateMultipartRequestBody defines body for AccessrulesUpdate for multipart/form-data ContentType.
type AccessrulesUpdateMultipartRequestBody = AccessRule

// AccountMePasswordCreateJSONRequestBody defines body for AccountMePasswordCreate for application/json ContentType.
type AccountMePasswordCreateJSONRequestBody = CheckPassword

// AccountMePasswordCreateFormdataRequestBody defines body for AccountMePasswordCreate for application/x-www-form-urlencoded ContentType.
type AccountMePasswordCreateFormdataRequestBody = CheckPassword

// AccountMePasswordCreateMultipartRequestBody defines body for AccountMePasswordCreate for multipart/form-data ContentType.
type AccountMePasswordCreateMultipartRequestBody = CheckPassword

// AccountTfaSetupCheckCreateJSONRequestBody defines body for AccountTfaSetupCheckCreate for application/json ContentType.
type AccountTfaSetupCheckCreateJSONRequestBody = CheckTFASetup

// AccountTfaSetupCheckCreateFormdataRequestBody defines body for AccountTfaSetupCheckCreate for application/x-www-form-urlencoded ContentType.
type AccountTfaSetupCheckCreateFormdataRequestBody = CheckTFASetup

// AccountTfaSetupCheckCreateMultipartRequestBody defines body for AccountTfaSetupCheckCreate for multipart/form-data ContentType.
type AccountTfaSetupCheckCreateMultipartRequestBody = CheckTFASetup

// AccountsCreateJSONRequestBody defines body for AccountsCreate for application/json ContentType.
type AccountsCreateJSONRequestBody = WritableAccount

// AccountsCreateFormdataRequestBody defines body for AccountsCreate for application/x-www-form-urlencoded ContentType.
type AccountsCreateFormdataRequestBody = WritableAccount

// AccountsCreateMultipartRequestBody defines body for AccountsCreate for multipart/form-data ContentType.
type AccountsCreateMultipartRequestBody = WritableAccount

// AccountsResetPasswordCreateJSONRequestBody defines body for AccountsResetPasswordCreate for application/json ContentType.
type AccountsResetPasswordCreateJSONRequestBody = ResetPassword

// AccountsResetPasswordCreateFormdataRequestBody defines body for AccountsResetPasswordCreate for application/x-www-form-urlencoded ContentType.
type AccountsResetPasswordCreateFormdataRequestBody = ResetPassword

// AccountsResetPasswordCreateMultipartRequestBody defines body for AccountsResetPasswordCreate for multipart/form-data ContentType.
type AccountsResetPasswordCreateMultipartRequestBody = ResetPassword

// AccountsValidateCreateJSONRequestBody defines body for AccountsValidateCreate for application/json ContentType.
type AccountsValidateCreateJSONRequestBody = WritableAccount

// AccountsValidateCreateFormdataRequestBody defines body for AccountsValidateCreate for application/x-www-form-urlencoded ContentType.
type AccountsValidateCreateFormdataRequestBody = WritableAccount

// AccountsValidateCreateMultipartRequestBody defines body for AccountsValidateCreate for multipart/form-data ContentType.
type AccountsValidateCreateMultipartRequestBody = WritableAccount

// AccountsPartialUpdateJSONRequestBody defines body for AccountsPartialUpdate for application/json ContentType.
type AccountsPartialUpdateJSONRequestBody = PatchedWritableAccount

// AccountsPartialUpdateFormdataRequestBody defines body for AccountsPartialUpdate for application/x-www-form-urlencoded ContentType.
type AccountsPartialUpdateFormdataRequestBody = PatchedWritableAccount

// AccountsPartialUpdateMultipartRequestBody defines body for AccountsPartialUpdate for multipart/form-data ContentType.
type AccountsPartialUpdateMultipartRequestBody = PatchedWritableAccount

// AccountsUpdateJSONRequestBody defines body for AccountsUpdate for application/json ContentType.
type AccountsUpdateJSONRequestBody = WritableAccount

// AccountsUpdateFormdataRequestBody defines body for AccountsUpdate for application/x-www-form-urlencoded ContentType.
type AccountsUpdateFormdataRequestBody = WritableAccount

// AccountsUpdateMultipartRequestBody defines body for AccountsUpdate for multipart/form-data ContentType.
type AccountsUpdateMultipartRequestBody = WritableAccount

// AccountsDeleteCreateJSONRequestBody defines body for AccountsDeleteCreate for application/json ContentType.
type AccountsDeleteCreateJSONRequestBody = DeleteAccount

// AccountsDeleteCreateFormdataRequestBody defines body for AccountsDeleteCreate for application/x-www-form-urlencoded ContentType.
type AccountsDeleteCreateFormdataRequestBody = DeleteAccount

// AccountsDeleteCreateMultipartRequestBody defines body for AccountsDeleteCreate for multipart/form-data ContentType.
type AccountsDeleteCreateMultipartRequestBody = DeleteAccount

// AccountsPasswordUpdateJSONRequestBody defines body for AccountsPasswordUpdate for application/json ContentType.
type AccountsPasswordUpdateJSONRequestBody = AccountPassword

// AccountsPasswordUpdateFormdataRequestBody defines body for AccountsPasswordUpdate for application/x-www-form-urlencoded ContentType.
type AccountsPasswordUpdateFormdataRequestBody = AccountPassword

// AccountsPasswordUpdateMultipartRequestBody defines body for AccountsPasswordUpdate for multipart/form-data ContentType.
type AccountsPasswordUpdateMultipartRequestBody = AccountPassword

// AlarmsSwitchPartialUpdateJSONRequestBody defines body for AlarmsSwitchPartialUpdate for application/json ContentType.
type AlarmsSwitchPartialUpdateJSONRequestBody = PatchedAlarm

// AlarmsSwitchPartialUpdateFormdataRequestBody defines body for AlarmsSwitchPartialUpdate for application/x-www-form-urlencoded ContentType.
type AlarmsSwitchPartialUpdateFormdataRequestBody = PatchedAlarm

// AlarmsSwitchPartialUpdateMultipartRequestBody defines body for AlarmsSwitchPartialUpdate for multipart/form-data ContentType.
type AlarmsSwitchPartialUpdateMultipartRequestBody = PatchedAlarm

// AliasesCreateJSONRequestBody defines body for AliasesCreate for application/json ContentType.
type AliasesCreateJSONRequestBody = Alias

// AliasesCreateFormdataRequestBody defines body for AliasesCreate for application/x-www-form-urlencoded ContentType.
type AliasesCreateFormdataRequestBody = Alias

// AliasesCreateMultipartRequestBody defines body for AliasesCreate for multipart/form-data ContentType.
type AliasesCreateMultipartRequestBody = Alias

// AliasesValidateCreateJSONRequestBody defines body for AliasesValidateCreate for application/json ContentType.
type AliasesValidateCreateJSONRequestBody = Alias

// AliasesValidateCreateFormdataRequestBody defines body for AliasesValidateCreate for application/x-www-form-urlencoded ContentType.
type AliasesValidateCreateFormdataRequestBody = Alias

// AliasesValidateCreateMultipartRequestBody defines body for AliasesValidateCreate for multipart/form-data ContentType.
type AliasesValidateCreateMultipartRequestBody = Alias

// AliasesPartialUpdateJSONRequestBody defines body for AliasesPartialUpdate for application/json ContentType.
type AliasesPartialUpdateJSONRequestBody = PatchedAlias

// AliasesPartialUpdateFormdataRequestBody defines body for AliasesPartialUpdate for application/x-www-form-urlencoded ContentType.
type AliasesPartialUpdateFormdataRequestBody = PatchedAlias

// AliasesPartialUpdateMultipartRequestBody defines body for AliasesPartialUpdate for multipart/form-data ContentType.
type AliasesPartialUpdateMultipartRequestBody = PatchedAlias

// AliasesUpdateJSONRequestBody defines body for AliasesUpdate for application/json ContentType.
type AliasesUpdateJSONRequestBody = Alias

// AliasesUpdateFormdataRequestBody defines body for AliasesUpdate for application/x-www-form-urlencoded ContentType.
type AliasesUpdateFormdataRequestBody = Alias

// AliasesUpdateMultipartRequestBody defines body for AliasesUpdate for multipart/form-data ContentType.
type AliasesUpdateMultipartRequestBody = Alias

// ArmessagesCreateJSONRequestBody defines body for ArmessagesCreate for application/json ContentType.
type ArmessagesCreateJSONRequestBody = ARMessage

// ArmessagesCreateFormdataRequestBody defines body for ArmessagesCreate for application/x-www-form-urlencoded ContentType.
type ArmessagesCreateFormdataRequestBody = ARMessage

// ArmessagesCreateMultipartRequestBody defines body for ArmessagesCreate for multipart/form-data ContentType.
type ArmessagesCreateMultipartRequestBody = ARMessage

// ArmessagesPartialUpdateJSONRequestBody defines body for ArmessagesPartialUpdate for application/json ContentType.
type ArmessagesPartialUpdateJSONRequestBody = PatchedARMessage

// ArmessagesPartialUpdateFormdataRequestBody defines body for ArmessagesPartialUpdate for application/x-www-form-urlencoded ContentType.
type ArmessagesPartialUpdateFormdataRequestBody = PatchedARMessage

// ArmessagesPartialUpdateMultipartRequestBody defines body for ArmessagesPartialUpdate for multipart/form-data ContentType.
type ArmessagesPartialUpdateMultipartRequestBody = PatchedARMessage

// ArmessagesUpdateJSONRequestBody defines body for ArmessagesUpdate for application/json ContentType.
type ArmessagesUpdateJSONRequestBody = ARMessage

// ArmessagesUpdateFormdataRequestBody defines body for ArmessagesUpdate for application/x-www-form-urlencoded ContentType.
type ArmessagesUpdateFormdataRequestBody = ARMessage

// ArmessagesUpdateMultipartRequestBody defines body for ArmessagesUpdate for multipart/form-data ContentType.
type ArmessagesUpdateMultipartRequestBody = ARMessage

// CategoriesCreateJSONRequestBody defines body for CategoriesCreate for application/json ContentType.
type CategoriesCreateJSONRequestBody = Category

// CategoriesCreateFormdataRequestBody defines body for CategoriesCreate for application/x-www-form-urlencoded ContentType.
type CategoriesCreateFormdataRequestBody = Category

// CategoriesCreateMultipartRequestBody defines body for CategoriesCreate for multipart/form-data ContentType.
type CategoriesCreateMultipartRequestBody = Category

// CategoriesPartialUpdateJSONRequestBody defines body for CategoriesPartialUpdate for application/json ContentType.
type CategoriesPartialUpdateJSONRequestBody = PatchedCategory

// CategoriesPartialUpdateFormdataRequestBody defines body for CategoriesPartialUpdate for application/x-www-form-urlencoded ContentType.
type CategoriesPartialUpdateFormdataRequestBody = PatchedCategory

// CategoriesPartialUpdateMultipartRequestBody defines body for CategoriesPartialUpdate for multipart/form-data ContentType.
type CategoriesPartialUpdateMultipartRequestBody = PatchedCategory

// CategoriesUpdateJSONRequestBody defines body for CategoriesUpdate for application/json ContentType.
type CategoriesUpdateJSONRequestBody = Category

// CategoriesUpdateFormdataRequestBody defines body for CategoriesUpdate for application/x-www-form-urlencoded ContentType.
type CategoriesUpdateFormdataRequestBody = Category

// CategoriesUpdateMultipartRequestBody defines body for CategoriesUpdate for multipart/form-data ContentType.
type CategoriesUpdateMultipartRequestBody = Category

// ContactsCreateJSONRequestBody defines body for ContactsCreate for application/json ContentType.
type ContactsCreateJSONRequestBody = Contact

// ContactsCreateFormdataRequestBody defines body for ContactsCreate for application/x-www-form-urlencoded ContentType.
type ContactsCreateFormdataRequestBody = Contact

// ContactsCreateMultipartRequestBody defines body for ContactsCreate for multipart/form-data ContentType.
type ContactsCreateMultipartRequestBody = Contact

// ContactsPartialUpdateJSONRequestBody defines body for ContactsPartialUpdate for application/json ContentType.
type ContactsPartialUpdateJSONRequestBody = PatchedContact

// ContactsPartialUpdateFormdataRequestBody defines body for ContactsPartialUpdate for application/x-www-form-urlencoded ContentType.
type ContactsPartialUpdateFormdataRequestBody = PatchedContact

// ContactsPartialUpdateMultipartRequestBody defines body for ContactsPartialUpdate for multipart/form-data ContentType.
type ContactsPartialUpdateMultipartRequestBody = PatchedContact

// ContactsUpdateJSONRequestBody defines body for ContactsUpdate for application/json ContentType.
type ContactsUpdateJSONRequestBody = Contact

// ContactsUpdateFormdataRequestBody defines body for ContactsUpdate for application/x-www-form-urlencoded ContentType.
type ContactsUpdateFormdataRequestBody = Contact

// ContactsUpdateMultipartRequestBody defines body for ContactsUpdate for multipart/form-data ContentType.
type ContactsUpdateMultipartRequestBody = Contact

// DomainaliasesCreateJSONRequestBody defines body for DomainaliasesCreate for application/json ContentType.
type DomainaliasesCreateJSONRequestBody = DomainAlias

// DomainaliasesCreateFormdataRequestBody defines body for DomainaliasesCreate for application/x-www-form-urlencoded ContentType.
type DomainaliasesCreateFormdataRequestBody = DomainAlias

// DomainaliasesCreateMultipartRequestBody defines body for DomainaliasesCreate for multipart/form-data ContentType.
type DomainaliasesCreateMultipartRequestBody = DomainAlias

// DomainaliasesPartialUpdateJSONRequestBody defines body for DomainaliasesPartialUpdate for application/json ContentType.
type DomainaliasesPartialUpdateJSONRequestBody = PatchedDomainAlias

// DomainaliasesPartialUpdateFormdataRequestBody defines body for DomainaliasesPartialUpdate for application/x-www-form-urlencoded ContentType.
type DomainaliasesPartialUpdateFormdataRequestBody = PatchedDomainAlias

// DomainaliasesPartialUpdateMultipartRequestBody defines body for DomainaliasesPartialUpdate for multipart/form-data ContentType.
type DomainaliasesPartialUpdateMultipartRequestBody = PatchedDomainAlias

// DomainaliasesUpdateJSONRequestBody defines body for DomainaliasesUpdate for application/json ContentType.
type DomainaliasesUpdateJSONRequestBody = DomainAlias

// DomainaliasesUpdateFormdataRequestBody defines body for DomainaliasesUpdate for application/x-www-form-urlencoded ContentType.
type DomainaliasesUpdateFormdataRequestBody = DomainAlias

// DomainaliasesUpdateMultipartRequestBody defines body for DomainaliasesUpdate for multipart/form-data ContentType.
type DomainaliasesUpdateMultipartRequestBody = DomainAlias

// DomainsCreateJSONRequestBody defines body for DomainsCreate for application/json ContentType.
type DomainsCreateJSONRequestBody = Domain

// DomainsCreateFormdataRequestBody defines body for DomainsCreate for application/x-www-form-urlencoded ContentType.
type DomainsCreateFormdataRequestBody = Domain

// DomainsCreateMultipartRequestBody defines body for DomainsCreate for multipart/form-data ContentType.
type DomainsCreateMultipartRequestBody = Domain

// DomainsImportCreateFormdataRequestBody defines body for DomainsImportCreate for application/x-www-form-urlencoded ContentType.
type DomainsImportCreateFormdataRequestBody = CSVImport

// DomainsImportCreateMultipartRequestBody defines body for DomainsImportCreate for multipart/form-data ContentType.
type DomainsImportCreateMultipartRequestBody = CSVImport

// DomainsPartialUpdateJSONRequestBody defines body for DomainsPartialUpdate for application/json ContentType.
type DomainsPartialUpdateJSONRequestBody = PatchedDomain

// DomainsPartialUpdateFormdataRequestBody defines body for DomainsPartialUpdate for application/x-www-form-urlencoded ContentType.
type DomainsPartialUpdateFormdataRequestBody = PatchedDomain

// DomainsPartialUpdateMultipartRequestBody defines body for DomainsPartialUpdate for multipart/form-data ContentType.
type DomainsPartialUpdateMultipartRequestBody = PatchedDomain

// DomainsUpdateJSONRequestBody defines body for DomainsUpdate for application/json ContentType.
type DomainsUpdateJSONRequestBody = Domain

// DomainsUpdateFormdataRequestBody defines body for DomainsUpdate for application/x-www-form-urlencoded ContentType.
type DomainsUpdateFormdataRequestBody = Domain

// DomainsUpdateMultipartRequestBody defines body for DomainsUpdate for multipart/form-data ContentType.
type DomainsUpdateMultipartRequestBody = Domain

// DomainsAdministratorsAddCreateJSONRequestBody defines body for DomainsAdministratorsAddCreate for application/json ContentType.
type DomainsAdministratorsAddCreateJSONRequestBody = SimpleDomainAdmin

// DomainsAdministratorsAddCreateFormdataRequestBody defines body for DomainsAdministratorsAddCreate for application/x-www-form-urlencoded ContentType.
type DomainsAdministratorsAddCreateFormdataRequestBody = SimpleDomainAdmin

// DomainsAdministratorsAddCreateMultipartRequestBody defines body for DomainsAdministratorsAddCreate for multipart/form-data ContentType.
type DomainsAdministratorsAddCreateMultipartRequestBody = SimpleDomainAdmin

// DomainsAdministratorsRemoveCreateJSONRequestBody defines body for DomainsAdministratorsRemoveCreate for application/json ContentType.
type DomainsAdministratorsRemoveCreateJSONRequestBody = SimpleDomainAdmin

// DomainsAdministratorsRemoveCreateFormdataRequestBody defines body for DomainsAdministratorsRemoveCreate for application/x-www-form-urlencoded ContentType.
type DomainsAdministratorsRemoveCreateFormdataRequestBody = SimpleDomainAdmin

// DomainsAdministratorsRemoveCreateMultipartRequestBody defines body for DomainsAdministratorsRemoveCreate for multipart/form-data ContentType.
type DomainsAdministratorsRemoveCreateMultipartRequestBody = SimpleDomainAdmin

// DomainsDeleteCreateJSONRequestBody defines body for DomainsDeleteCreate for application/json ContentType.
type DomainsDeleteCreateJSONRequestBody = DeleteDomain

// DomainsDeleteCreateFormdataRequestBody defines body for DomainsDeleteCreate for application/x-www-form-urlencoded ContentType.
type DomainsDeleteCreateFormdataRequestBody = DeleteDomain

// DomainsDeleteCreateMultipartRequestBody defines body for DomainsDeleteCreate for multipart/form-data ContentType.
type DomainsDeleteCreateMultipartRequestBody = DeleteDomain

// EmailProvidersCreateJSONRequestBody defines body for EmailProvidersCreate for application/json ContentType.
type EmailProvidersCreateJSONRequestBody = EmailProvider

// EmailProvidersCreateFormdataRequestBody defines body for EmailProvidersCreate for application/x-www-form-urlencoded ContentType.
type EmailProvidersCreateFormdataRequestBody = EmailProvider

// EmailProvidersCreateMultipartRequestBody defines body for EmailProvidersCreate for multipart/form-data ContentType.
type EmailProvidersCreateMultipartRequestBody = EmailProvider

// EmailProvidersCheckAssociatedDomainCreateJSONRequestBody defines body for EmailProvidersCheckAssociatedDomainCreate for application/json ContentType.
type EmailProvidersCheckAssociatedDomainCreateJSONRequestBody = EmailProvider

// EmailProvidersCheckAssociatedDomainCreateFormdataRequestBody defines body for EmailProvidersCheckAssociatedDomainCreate for application/x-www-form-urlencoded ContentType.
type EmailProvidersCheckAssociatedDomainCreateFormdataRequestBody = EmailProvider

// EmailProvidersCheckAssociatedDomainCreateMultipartRequestBody defines body for EmailProvidersCheckAssociatedDomainCreate for multipart/form-data ContentType.
type EmailProvidersCheckAssociatedDomainCreateMultipartRequestBody = EmailProvider

// EmailProvidersCheckConnectionCreateJSONRequestBody defines body for EmailProvidersCheckConnectionCreate for application/json ContentType.
type EmailProvidersCheckConnectionCreateJSONRequestBody = EmailProvider

// EmailProvidersCheckConnectionCreateFormdataRequestBody defines body for EmailProvidersCheckConnectionCreate for application/x-www-form-urlencoded ContentType.
type EmailProvidersCheckConnectionCreateFormdataRequestBody = EmailProvider

// EmailProvidersCheckConnectionCreateMultipartRequestBody defines body for EmailProvidersCheckConnectionCreate for multipart/form-data ContentType.
type EmailProvidersCheckConnectionCreateMultipartRequestBody = EmailProvider

// EmailProvidersPartialUpdateJSONRequestBody defines body for EmailProvidersPartialUpdate for application/json ContentType.
type EmailProvidersPartialUpdateJSONRequestBody = PatchedEmailProvider

// EmailProvidersPartialUpdateFormdataRequestBody defines body for EmailProvidersPartialUpdate for application/x-www-form-urlencoded ContentType.
type EmailProvidersPartialUpdateFormdataRequestBody = PatchedEmailProvider

// EmailProvidersPartialUpdateMultipartRequestBody defines body for EmailProvidersPartialUpdate for multipart/form-data ContentType.
type EmailProvidersPartialUpdateMultipartRequestBody = PatchedEmailProvider

// EmailProvidersUpdateJSONRequestBody defines body for EmailProvidersUpdate for application/json ContentType.
type EmailProvidersUpdateJSONRequestBody = EmailProvider

// EmailProvidersUpdateFormdataRequestBody defines body for EmailProvidersUpdate for application/x-www-form-urlencoded ContentType.
type EmailProvidersUpdateFormdataRequestBody = EmailProvider

// EmailProvidersUpdateMultipartRequestBody defines body for EmailProvidersUpdate for multipart/form-data ContentType.
type EmailProvidersUpdateMultipartRequestBody = EmailProvider

// IdentitiesImportCreateFormdataRequestBody defines body for IdentitiesImportCreate for application/x-www-form-urlencoded ContentType.
type IdentitiesImportCreateFormdataRequestBody = CSVIdentityImport

// IdentitiesImportCreateMultipartRequestBody defines body for IdentitiesImportCreate for multipart/form-data ContentType.
type IdentitiesImportCreateMultipartRequestBody = CSVIdentityImport

// RelaydomainsCreateJSONRequestBody defines body for RelaydomainsCreate for application/json ContentType.
type RelaydomainsCreateJSONRequestBody = RelayDomain

// RelaydomainsCreateFormdataRequestBody defines body for RelaydomainsCreate for application/x-www-form-urlencoded ContentType.
type RelaydomainsCreateFormdataRequestBody = RelayDomain

// RelaydomainsCreateMultipartRequestBody defines body for RelaydomainsCreate for multipart/form-data ContentType.
type RelaydomainsCreateMultipartRequestBody = RelayDomain

// RelaydomainsPartialUpdateJSONRequestBody defines body for RelaydomainsPartialUpdate for application/json ContentType.
type RelaydomainsPartialUpdateJSONRequestBody = PatchedRelayDomain

// RelaydomainsPartialUpdateFormdataRequestBody defines body for RelaydomainsPartialUpdate for application/x-www-form-urlencoded ContentType.
type RelaydomainsPartialUpdateFormdataRequestBody = PatchedRelayDomain

// RelaydomainsPartialUpdateMultipartRequestBody defines body for RelaydomainsPartialUpdate for multipart/form-data ContentType.
type RelaydomainsPartialUpdateMultipartRequestBody = PatchedRelayDomain

// RelaydomainsUpdateJSONRequestBody defines body for RelaydomainsUpdate for application/json ContentType.
type RelaydomainsUpdateJSONRequestBody = RelayDomain

// RelaydomainsUpdateFormdataRequestBody defines body for RelaydomainsUpdate for application/x-www-form-urlencoded ContentType.
type RelaydomainsUpdateFormdataRequestBody = RelayDomain

// RelaydomainsUpdateMultipartRequestBody defines body for RelaydomainsUpdate for multipart/form-data ContentType.
type RelaydomainsUpdateMultipartRequestBody = RelayDomain

// ResourcesPartialUpdateJSONRequestBody defines body for ResourcesPartialUpdate for application/json ContentType.
type ResourcesPartialUpdateJSONRequestBody = PatchedResources

// ResourcesPartialUpdateFormdataRequestBody defines body for ResourcesPartialUpdate for application/x-www-form-urlencoded ContentType.
type ResourcesPartialUpdateFormdataRequestBody = PatchedResources

// ResourcesPartialUpdateMultipartRequestBody defines body for ResourcesPartialUpdate for multipart/form-data ContentType.
type ResourcesPartialUpdateMultipartRequestBody = PatchedResources

// ResourcesUpdateJSONRequestBody defines body for ResourcesUpdate for application/json ContentType.
type ResourcesUpdateJSONRequestBody = Resources

// ResourcesUpdateFormdataRequestBody defines body for ResourcesUpdate for application/x-www-form-urlencoded ContentType.
type ResourcesUpdateFormdataRequestBody = Resources

// ResourcesUpdateMultipartRequestBody defines body for ResourcesUpdate for multipart/form-data ContentType.
type ResourcesUpdateMultipartRequestBody = Resources

// SenderaddressesCreateJSONRequestBody defines body for SenderaddressesCreate for application/json ContentType.
type SenderaddressesCreateJSONRequestBody = SenderAddress

// SenderaddressesCreateFormdataRequestBody defines body for SenderaddressesCreate for application/x-www-form-urlencoded ContentType.
type SenderaddressesCreateFormdataRequestBody = SenderAddress

// SenderaddressesCreateMultipartRequestBody defines body for SenderaddressesCreate for multipart/form-data ContentType.
type SenderaddressesCreateMultipartRequestBody = SenderAddress

// SenderaddressesPartialUpdateJSONRequestBody defines body for SenderaddressesPartialUpdate for application/json ContentType.
type SenderaddressesPartialUpdateJSONRequestBody = PatchedSenderAddress

// SenderaddressesPartialUpdateFormdataRequestBody defines body for SenderaddressesPartialUpdate for application/x-www-form-urlencoded ContentType.
type SenderaddressesPartialUpdateFormdataRequestBody = PatchedSenderAddress

// SenderaddressesPartialUpdateMultipartRequestBody defines body for SenderaddressesPartialUpdate for multipart/form-data ContentType.
type SenderaddressesPartialUpdateMultipartRequestBody = PatchedSenderAddress

// SenderaddressesUpdateJSONRequestBody defines body for SenderaddressesUpdate for application/json ContentType.
type SenderaddressesUpdateJSONRequestBody = SenderAddress

// SenderaddressesUpdateFormdataRequestBody defines body for SenderaddressesUpdate for application/x-www-form-urlencoded ContentType.
type SenderaddressesUpdateFormdataRequestBody = SenderAddress

// SenderaddressesUpdateMultipartRequestBody defines body for SenderaddressesUpdate for multipart/form-data ContentType.
type SenderaddressesUpdateMultipartRequestBody = SenderAddress

// SharedCalendarsCreateJSONRequestBody defines body for SharedCalendarsCreate for application/json ContentType.
type SharedCalendarsCreateJSONRequestBody = SharedCalendar

// SharedCalendarsCreateFormdataRequestBody defines body for SharedCalendarsCreate for application/x-www-form-urlencoded ContentType.
type SharedCalendarsCreateFormdataRequestBody = SharedCalendar

// SharedCalendarsCreateMultipartRequestBody defines body for SharedCalendarsCreate for multipart/form-data ContentType.
type SharedCalendarsCreateMultipartRequestBody = SharedCalendar

// SharedCalendarsCheckTokenCreateJSONRequestBody defines body for SharedCalendarsCheckTokenCreate for application/json ContentType.
type SharedCalendarsCheckTokenCreateJSONRequestBody = CheckToken

// SharedCalendarsCheckTokenCreateFormdataRequestBody defines body for SharedCalendarsCheckTokenCreate for application/x-www-form-urlencoded ContentType.
type SharedCalendarsCheckTokenCreateFormdataRequestBody = CheckToken

// SharedCalendarsCheckTokenCreateMultipartRequestBody defines body for SharedCalendarsCheckTokenCreate for multipart/form-data ContentType.
type SharedCalendarsCheckTokenCreateMultipartRequestBody = CheckToken

// SharedCalendarsEventsCreateJSONRequestBody defines body for SharedCalendarsEventsCreate for application/json ContentType.
type SharedCalendarsEventsCreateJSONRequestBody = WritableEvent

// SharedCalendarsEventsCreateFormdataRequestBody defines body for SharedCalendarsEventsCreate for application/x-www-form-urlencoded ContentType.
type SharedCalendarsEventsCreateFormdataRequestBody = WritableEvent

// SharedCalendarsEventsCreateMultipartRequestBody defines body for SharedCalendarsEventsCreate for multipart/form-data ContentType.
type SharedCalendarsEventsCreateMultipartRequestBody = WritableEvent

// SharedCalendarsEventsImportFromFileCreateJSONRequestBody defines body for SharedCalendarsEventsImportFromFileCreate for application/json ContentType.
type SharedCalendarsEventsImportFromFileCreateJSONRequestBody = WritableEvent

// SharedCalendarsEventsImportFromFileCreateFormdataRequestBody defines body for SharedCalendarsEventsImportFromFileCreate for application/x-www-form-urlencoded ContentType.
type SharedCalendarsEventsImportFromFileCreateFormdataRequestBody = WritableEvent

// SharedCalendarsEventsImportFromFileCreateMultipartRequestBody defines body for SharedCalendarsEventsImportFromFileCreate for multipart/form-data ContentType.
type SharedCalendarsEventsImportFromFileCreateMultipartRequestBody = WritableEvent

// SharedCalendarsEventsPartialUpdateJSONRequestBody defines body for SharedCalendarsEventsPartialUpdate for application/json ContentType.
type SharedCalendarsEventsPartialUpdateJSONRequestBody = PatchedWritableEvent

// SharedCalendarsEventsPartialUpdateFormdataRequestBody defines body for SharedCalendarsEventsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SharedCalendarsEventsPartialUpdateFormdataRequestBody = PatchedWritableEvent

// SharedCalendarsEventsPartialUpdateMultipartRequestBody defines body for SharedCalendarsEventsPartialUpdate for multipart/form-data ContentType.
type SharedCalendarsEventsPartialUpdateMultipartRequestBody = PatchedWritableEvent

// SharedCalendarsEventsUpdateJSONRequestBody defines body for SharedCalendarsEventsUpdate for application/json ContentType.
type SharedCalendarsEventsUpdateJSONRequestBody = WritableEvent

// SharedCalendarsEventsUpdateFormdataRequestBody defines body for SharedCalendarsEventsUpdate for application/x-www-form-urlencoded ContentType.
type SharedCalendarsEventsUpdateFormdataRequestBody = WritableEvent

// SharedCalendarsEventsUpdateMultipartRequestBody defines body for SharedCalendarsEventsUpdate for multipart/form-data ContentType.
type SharedCalendarsEventsUpdateMultipartRequestBody = WritableEvent

// SharedCalendarsPartialUpdateJSONRequestBody defines body for SharedCalendarsPartialUpdate for application/json ContentType.
type SharedCalendarsPartialUpdateJSONRequestBody = PatchedSharedCalendar

// SharedCalendarsPartialUpdateFormdataRequestBody defines body for SharedCalendarsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SharedCalendarsPartialUpdateFormdataRequestBody = PatchedSharedCalendar

// SharedCalendarsPartialUpdateMultipartRequestBody defines body for SharedCalendarsPartialUpdate for multipart/form-data ContentType.
type SharedCalendarsPartialUpdateMultipartRequestBody = PatchedSharedCalendar

// SharedCalendarsUpdateJSONRequestBody defines body for SharedCalendarsUpdate for application/json ContentType.
type SharedCalendarsUpdateJSONRequestBody = SharedCalendar

// SharedCalendarsUpdateFormdataRequestBody defines body for SharedCalendarsUpdate for application/x-www-form-urlencoded ContentType.
type SharedCalendarsUpdateFormdataRequestBody = SharedCalendar

// SharedCalendarsUpdateMultipartRequestBody defines body for SharedCalendarsUpdate for multipart/form-data ContentType.
type SharedCalendarsUpdateMultipartRequestBody = SharedCalendar

// TokenCreateJSONRequestBody defines body for TokenCreate for application/json ContentType.
type TokenCreateJSONRequestBody = TokenObtainPair

// TokenCreateFormdataRequestBody defines body for TokenCreate for application/x-www-form-urlencoded ContentType.
type TokenCreateFormdataRequestBody = TokenObtainPair

// TokenCreateMultipartRequestBody defines body for TokenCreate for multipart/form-data ContentType.
type TokenCreateMultipartRequestBody = TokenObtainPair

// TokenRefreshCreateJSONRequestBody defines body for TokenRefreshCreate for application/json ContentType.
type TokenRefreshCreateJSONRequestBody = TokenRefresh

// TokenRefreshCreateFormdataRequestBody defines body for TokenRefreshCreate for application/x-www-form-urlencoded ContentType.
type TokenRefreshCreateFormdataRequestBody = TokenRefresh

// TokenRefreshCreateMultipartRequestBody defines body for TokenRefreshCreate for multipart/form-data ContentType.
type TokenRefreshCreateMultipartRequestBody = TokenRefresh

// UserCalendarsCreateJSONRequestBody defines body for UserCalendarsCreate for application/json ContentType.
type UserCalendarsCreateJSONRequestBody = UserCalendar

// UserCalendarsCreateFormdataRequestBody defines body for UserCalendarsCreate for application/x-www-form-urlencoded ContentType.
type UserCalendarsCreateFormdataRequestBody = UserCalendar

// UserCalendarsCreateMultipartRequestBody defines body for UserCalendarsCreate for multipart/form-data ContentType.
type UserCalendarsCreateMultipartRequestBody = UserCalendar

// UserCalendarsCheckTokenCreateJSONRequestBody defines body for UserCalendarsCheckTokenCreate for application/json ContentType.
type UserCalendarsCheckTokenCreateJSONRequestBody = CheckToken

// UserCalendarsCheckTokenCreateFormdataRequestBody defines body for UserCalendarsCheckTokenCreate for application/x-www-form-urlencoded ContentType.
type UserCalendarsCheckTokenCreateFormdataRequestBody = CheckToken

// UserCalendarsCheckTokenCreateMultipartRequestBody defines body for UserCalendarsCheckTokenCreate for multipart/form-data ContentType.
type UserCalendarsCheckTokenCreateMultipartRequestBody = CheckToken

// UserCalendarsEventsCreateJSONRequestBody defines body for UserCalendarsEventsCreate for application/json ContentType.
type UserCalendarsEventsCreateJSONRequestBody = WritableEvent

// UserCalendarsEventsCreateFormdataRequestBody defines body for UserCalendarsEventsCreate for application/x-www-form-urlencoded ContentType.
type UserCalendarsEventsCreateFormdataRequestBody = WritableEvent

// UserCalendarsEventsCreateMultipartRequestBody defines body for UserCalendarsEventsCreate for multipart/form-data ContentType.
type UserCalendarsEventsCreateMultipartRequestBody = WritableEvent

// UserCalendarsEventsImportFromFileCreateJSONRequestBody defines body for UserCalendarsEventsImportFromFileCreate for application/json ContentType.
type UserCalendarsEventsImportFromFileCreateJSONRequestBody = WritableEvent

// UserCalendarsEventsImportFromFileCreateFormdataRequestBody defines body for UserCalendarsEventsImportFromFileCreate for application/x-www-form-urlencoded ContentType.
type UserCalendarsEventsImportFromFileCreateFormdataRequestBody = WritableEvent

// UserCalendarsEventsImportFromFileCreateMultipartRequestBody defines body for UserCalendarsEventsImportFromFileCreate for multipart/form-data ContentType.
type UserCalendarsEventsImportFromFileCreateMultipartRequestBody = WritableEvent

// UserCalendarsEventsPartialUpdateJSONRequestBody defines body for UserCalendarsEventsPartialUpdate for application/json ContentType.
type UserCalendarsEventsPartialUpdateJSONRequestBody = PatchedWritableEvent

// UserCalendarsEventsPartialUpdateFormdataRequestBody defines body for UserCalendarsEventsPartialUpdate for application/x-www-form-urlencoded ContentType.
type UserCalendarsEventsPartialUpdateFormdataRequestBody = PatchedWritableEvent

// UserCalendarsEventsPartialUpdateMultipartRequestBody defines body for UserCalendarsEventsPartialUpdate for multipart/form-data ContentType.
type UserCalendarsEventsPartialUpdateMultipartRequestBody = PatchedWritableEvent

// UserCalendarsEventsUpdateJSONRequestBody defines body for UserCalendarsEventsUpdate for application/json ContentType.
type UserCalendarsEventsUpdateJSONRequestBody = WritableEvent

// UserCalendarsEventsUpdateFormdataRequestBody defines body for UserCalendarsEventsUpdate for application/x-www-form-urlencoded ContentType.
type UserCalendarsEventsUpdateFormdataRequestBody = WritableEvent

// UserCalendarsEventsUpdateMultipartRequestBody defines body for UserCalendarsEventsUpdate for multipart/form-data ContentType.
type UserCalendarsEventsUpdateMultipartRequestBody = WritableEvent

// UserCalendarsPartialUpdateJSONRequestBody defines body for UserCalendarsPartialUpdate for application/json ContentType.
type UserCalendarsPartialUpdateJSONRequestBody = PatchedUserCalendar

// UserCalendarsPartialUpdateFormdataRequestBody defines body for UserCalendarsPartialUpdate for application/x-www-form-urlencoded ContentType.
type UserCalendarsPartialUpdateFormdataRequestBody = PatchedUserCalendar

// UserCalendarsPartialUpdateMultipartRequestBody defines body for UserCalendarsPartialUpdate for multipart/form-data ContentType.
type UserCalendarsPartialUpdateMultipartRequestBody = PatchedUserCalendar

// UserCalendarsUpdateJSONRequestBody defines body for UserCalendarsUpdate for application/json ContentType.
type UserCalendarsUpdateJSONRequestBody = UserCalendar

// UserCalendarsUpdateFormdataRequestBody defines body for UserCalendarsUpdate for application/x-www-form-urlencoded ContentType.
type UserCalendarsUpdateFormdataRequestBody = UserCalendar

// UserCalendarsUpdateMultipartRequestBody defines body for UserCalendarsUpdate for multipart/form-data ContentType.
type UserCalendarsUpdateMultipartRequestBody = UserCalendar

// AsDkimKeyLengthEnum returns the union data inside the Domain_DkimKeyLength as a DkimKeyLengthEnum
func (t Domain_DkimKeyLength) AsDkimKeyLengthEnum() (DkimKeyLengthEnum, error) {
	var body DkimKeyLengthEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDkimKeyLengthEnum overwrites any union data inside the Domain_DkimKeyLength as the provided DkimKeyLengthEnum
func (t *Domain_DkimKeyLength) FromDkimKeyLengthEnum(v DkimKeyLengthEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDkimKeyLengthEnum performs a merge with any union data inside the Domain_DkimKeyLength, using the provided DkimKeyLengthEnum
func (t *Domain_DkimKeyLength) MergeDkimKeyLengthEnum(v DkimKeyLengthEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the Domain_DkimKeyLength as a NullEnum
func (t Domain_DkimKeyLength) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the Domain_DkimKeyLength as the provided NullEnum
func (t *Domain_DkimKeyLength) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the Domain_DkimKeyLength, using the provided NullEnum
func (t *Domain_DkimKeyLength) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Domain_DkimKeyLength) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Domain_DkimKeyLength) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDkimKeyLengthEnum returns the union data inside the Nested_DkimKeyLength as a DkimKeyLengthEnum
func (t Nested_DkimKeyLength) AsDkimKeyLengthEnum() (DkimKeyLengthEnum, error) {
	var body DkimKeyLengthEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDkimKeyLengthEnum overwrites any union data inside the Nested_DkimKeyLength as the provided DkimKeyLengthEnum
func (t *Nested_DkimKeyLength) FromDkimKeyLengthEnum(v DkimKeyLengthEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDkimKeyLengthEnum performs a merge with any union data inside the Nested_DkimKeyLength, using the provided DkimKeyLengthEnum
func (t *Nested_DkimKeyLength) MergeDkimKeyLengthEnum(v DkimKeyLengthEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the Nested_DkimKeyLength as a NullEnum
func (t Nested_DkimKeyLength) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the Nested_DkimKeyLength as the provided NullEnum
func (t *Nested_DkimKeyLength) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the Nested_DkimKeyLength, using the provided NullEnum
func (t *Nested_DkimKeyLength) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Nested_DkimKeyLength) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Nested_DkimKeyLength) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDkimKeyLengthEnum returns the union data inside the PatchedDomain_DkimKeyLength as a DkimKeyLengthEnum
func (t PatchedDomain_DkimKeyLength) AsDkimKeyLengthEnum() (DkimKeyLengthEnum, error) {
	var body DkimKeyLengthEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDkimKeyLengthEnum overwrites any union data inside the PatchedDomain_DkimKeyLength as the provided DkimKeyLengthEnum
func (t *PatchedDomain_DkimKeyLength) FromDkimKeyLengthEnum(v DkimKeyLengthEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDkimKeyLengthEnum performs a merge with any union data inside the PatchedDomain_DkimKeyLength, using the provided DkimKeyLengthEnum
func (t *PatchedDomain_DkimKeyLength) MergeDkimKeyLengthEnum(v DkimKeyLengthEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullEnum returns the union data inside the PatchedDomain_DkimKeyLength as a NullEnum
func (t PatchedDomain_DkimKeyLength) AsNullEnum() (NullEnum, error) {
	var body NullEnum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullEnum overwrites any union data inside the PatchedDomain_DkimKeyLength as the provided NullEnum
func (t *PatchedDomain_DkimKeyLength) FromNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullEnum performs a merge with any union data inside the PatchedDomain_DkimKeyLength, using the provided NullEnum
func (t *PatchedDomain_DkimKeyLength) MergeNullEnum(v NullEnum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedDomain_DkimKeyLength) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedDomain_DkimKeyLength) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AccessrulesList request
	AccessrulesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessrulesCreateWithBody request with any body
	AccessrulesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessrulesCreate(ctx context.Context, body AccessrulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessrulesCreateWithFormdataBody(ctx context.Context, body AccessrulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessrulesDestroy request
	AccessrulesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessrulesRetrieve request
	AccessrulesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessrulesPartialUpdateWithBody request with any body
	AccessrulesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessrulesPartialUpdate(ctx context.Context, id int, body AccessrulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessrulesPartialUpdateWithFormdataBody(ctx context.Context, id int, body AccessrulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessrulesUpdateWithBody request with any body
	AccessrulesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessrulesUpdate(ctx context.Context, id int, body AccessrulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessrulesUpdateWithFormdataBody(ctx context.Context, id int, body AccessrulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountApiTokenDestroy request
	AccountApiTokenDestroy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountApiTokenRetrieve request
	AccountApiTokenRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountApiTokenCreate request
	AccountApiTokenCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountForwardRetrieve request
	AccountForwardRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountForwardCreate request
	AccountForwardCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountMeRetrieve request
	AccountMeRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountMePasswordCreateWithBody request with any body
	AccountMePasswordCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountMePasswordCreate(ctx context.Context, body AccountMePasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountMePasswordCreateWithFormdataBody(ctx context.Context, body AccountMePasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountTfaDisableCreate request
	AccountTfaDisableCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountTfaResetCodesCreate request
	AccountTfaResetCodesCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountTfaSetupCreate request
	AccountTfaSetupCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountTfaSetupCheckCreateWithBody request with any body
	AccountTfaSetupCheckCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountTfaSetupCheckCreate(ctx context.Context, body AccountTfaSetupCheckCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountTfaSetupCheckCreateWithFormdataBody(ctx context.Context, body AccountTfaSetupCheckCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountTfaSetupKeyRetrieve request
	AccountTfaSetupKeyRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountTfaVerifyCreate request
	AccountTfaVerifyCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsList request
	AccountsList(ctx context.Context, params *AccountsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsCreateWithBody request with any body
	AccountsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsCreate(ctx context.Context, body AccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsCreateWithFormdataBody(ctx context.Context, body AccountsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsExistsRetrieve request
	AccountsExistsRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsRandomPasswordRetrieve request
	AccountsRandomPasswordRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsResetPasswordCreateWithBody request with any body
	AccountsResetPasswordCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsResetPasswordCreate(ctx context.Context, body AccountsResetPasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsResetPasswordCreateWithFormdataBody(ctx context.Context, body AccountsResetPasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsValidateCreateWithBody request with any body
	AccountsValidateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsValidateCreate(ctx context.Context, body AccountsValidateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsValidateCreateWithFormdataBody(ctx context.Context, body AccountsValidateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsDestroy request
	AccountsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsRetrieve request
	AccountsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsPartialUpdateWithBody request with any body
	AccountsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsPartialUpdate(ctx context.Context, id int, body AccountsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsPartialUpdateWithFormdataBody(ctx context.Context, id int, body AccountsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsUpdateWithBody request with any body
	AccountsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsUpdate(ctx context.Context, id int, body AccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsUpdateWithFormdataBody(ctx context.Context, id int, body AccountsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsDeleteCreateWithBody request with any body
	AccountsDeleteCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsDeleteCreate(ctx context.Context, id int, body AccountsDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsDeleteCreateWithFormdataBody(ctx context.Context, id int, body AccountsDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsPasswordUpdateWithBody request with any body
	AccountsPasswordUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsPasswordUpdate(ctx context.Context, id int, body AccountsPasswordUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsPasswordUpdateWithFormdataBody(ctx context.Context, id int, body AccountsPasswordUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddressBooksDefaultRetrieve request
	AddressBooksDefaultRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddressBooksSyncFromCdavRetrieve request
	AddressBooksSyncFromCdavRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddressBooksSyncToCdavRetrieve request
	AddressBooksSyncToCdavRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminComponentsList request
	AdminComponentsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmsList request
	AlarmsList(ctx context.Context, params *AlarmsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmsBulkDeleteDestroy request
	AlarmsBulkDeleteDestroy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmsDestroy request
	AlarmsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmsRetrieve request
	AlarmsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlarmsSwitchPartialUpdateWithBody request with any body
	AlarmsSwitchPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlarmsSwitchPartialUpdate(ctx context.Context, id int, body AlarmsSwitchPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlarmsSwitchPartialUpdateWithFormdataBody(ctx context.Context, id int, body AlarmsSwitchPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AliasesList request
	AliasesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AliasesCreateWithBody request with any body
	AliasesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AliasesCreate(ctx context.Context, body AliasesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AliasesCreateWithFormdataBody(ctx context.Context, body AliasesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AliasesRandomAddressRetrieve request
	AliasesRandomAddressRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AliasesValidateCreateWithBody request with any body
	AliasesValidateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AliasesValidateCreate(ctx context.Context, body AliasesValidateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AliasesValidateCreateWithFormdataBody(ctx context.Context, body AliasesValidateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AliasesDestroy request
	AliasesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AliasesRetrieve request
	AliasesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AliasesPartialUpdateWithBody request with any body
	AliasesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AliasesPartialUpdate(ctx context.Context, id int, body AliasesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AliasesPartialUpdateWithFormdataBody(ctx context.Context, id int, body AliasesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AliasesUpdateWithBody request with any body
	AliasesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AliasesUpdate(ctx context.Context, id int, body AliasesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	AliasesUpdateWithFormdataBody(ctx context.Context, id int, body AliasesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArmessagesList request
	ArmessagesList(ctx context.Context, params *ArmessagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArmessagesCreateWithBody request with any body
	ArmessagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArmessagesCreate(ctx context.Context, body ArmessagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArmessagesCreateWithFormdataBody(ctx context.Context, body ArmessagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArmessagesRetrieve request
	ArmessagesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArmessagesPartialUpdateWithBody request with any body
	ArmessagesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArmessagesPartialUpdate(ctx context.Context, id int, body ArmessagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArmessagesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ArmessagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArmessagesUpdateWithBody request with any body
	ArmessagesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArmessagesUpdate(ctx context.Context, id int, body ArmessagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArmessagesUpdateWithFormdataBody(ctx context.Context, id int, body ArmessagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttendeesList request
	AttendeesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttendeesRetrieve request
	AttendeesRetrieve(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoriesList request
	CategoriesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoriesCreateWithBody request with any body
	CategoriesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoriesCreate(ctx context.Context, body CategoriesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoriesCreateWithFormdataBody(ctx context.Context, body CategoriesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoriesDestroy request
	CategoriesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoriesRetrieve request
	CategoriesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoriesPartialUpdateWithBody request with any body
	CategoriesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoriesPartialUpdate(ctx context.Context, id int, body CategoriesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoriesPartialUpdateWithFormdataBody(ctx context.Context, id int, body CategoriesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoriesUpdateWithBody request with any body
	CategoriesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoriesUpdate(ctx context.Context, id int, body CategoriesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CategoriesUpdateWithFormdataBody(ctx context.Context, id int, body CategoriesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactsList request
	ContactsList(ctx context.Context, params *ContactsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactsCreateWithBody request with any body
	ContactsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContactsCreate(ctx context.Context, body ContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContactsCreateWithFormdataBody(ctx context.Context, body ContactsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactsDestroy request
	ContactsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactsRetrieve request
	ContactsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactsPartialUpdateWithBody request with any body
	ContactsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContactsPartialUpdate(ctx context.Context, id int, body ContactsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContactsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ContactsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactsUpdateWithBody request with any body
	ContactsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContactsUpdate(ctx context.Context, id int, body ContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContactsUpdateWithFormdataBody(ctx context.Context, id int, body ContactsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsRetrieve request
	CredentialsRetrieve(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainaliasesList request
	DomainaliasesList(ctx context.Context, params *DomainaliasesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainaliasesCreateWithBody request with any body
	DomainaliasesCreateWithBody(ctx context.Context, params *DomainaliasesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainaliasesCreate(ctx context.Context, params *DomainaliasesCreateParams, body DomainaliasesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainaliasesCreateWithFormdataBody(ctx context.Context, params *DomainaliasesCreateParams, body DomainaliasesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainaliasesDestroy request
	DomainaliasesDestroy(ctx context.Context, id int, params *DomainaliasesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainaliasesRetrieve request
	DomainaliasesRetrieve(ctx context.Context, id int, params *DomainaliasesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainaliasesPartialUpdateWithBody request with any body
	DomainaliasesPartialUpdateWithBody(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainaliasesPartialUpdate(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainaliasesPartialUpdateWithFormdataBody(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainaliasesUpdateWithBody request with any body
	DomainaliasesUpdateWithBody(ctx context.Context, id int, params *DomainaliasesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainaliasesUpdate(ctx context.Context, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainaliasesUpdateWithFormdataBody(ctx context.Context, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsList request
	DomainsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsCreateWithBody request with any body
	DomainsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsCreate(ctx context.Context, body DomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsCreateWithFormdataBody(ctx context.Context, body DomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsExportRetrieve request
	DomainsExportRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsImportCreateWithBody request with any body
	DomainsImportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsImportCreateWithFormdataBody(ctx context.Context, body DomainsImportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsRetrieve request
	DomainsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsPartialUpdateWithBody request with any body
	DomainsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsPartialUpdate(ctx context.Context, id int, body DomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsUpdateWithBody request with any body
	DomainsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsUpdate(ctx context.Context, id int, body DomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsUpdateWithFormdataBody(ctx context.Context, id int, body DomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsAdministratorsRetrieve request
	DomainsAdministratorsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsAdministratorsAddCreateWithBody request with any body
	DomainsAdministratorsAddCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsAdministratorsAddCreate(ctx context.Context, id int, body DomainsAdministratorsAddCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsAdministratorsAddCreateWithFormdataBody(ctx context.Context, id int, body DomainsAdministratorsAddCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsAdministratorsRemoveCreateWithBody request with any body
	DomainsAdministratorsRemoveCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsAdministratorsRemoveCreate(ctx context.Context, id int, body DomainsAdministratorsRemoveCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsAdministratorsRemoveCreateWithFormdataBody(ctx context.Context, id int, body DomainsAdministratorsRemoveCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsDeleteCreateWithBody request with any body
	DomainsDeleteCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsDeleteCreate(ctx context.Context, id int, body DomainsDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsDeleteCreateWithFormdataBody(ctx context.Context, id int, body DomainsDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsDmarcAlignmentStatsRetrieve request
	DomainsDmarcAlignmentStatsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsDnsDetailRetrieve request
	DomainsDnsDetailRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailProvidersList request
	EmailProvidersList(ctx context.Context, params *EmailProvidersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailProvidersCreateWithBody request with any body
	EmailProvidersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersCreate(ctx context.Context, body EmailProvidersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersCreateWithFormdataBody(ctx context.Context, body EmailProvidersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailProvidersCheckAssociatedDomainCreateWithBody request with any body
	EmailProvidersCheckAssociatedDomainCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersCheckAssociatedDomainCreate(ctx context.Context, body EmailProvidersCheckAssociatedDomainCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersCheckAssociatedDomainCreateWithFormdataBody(ctx context.Context, body EmailProvidersCheckAssociatedDomainCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailProvidersCheckConnectionCreateWithBody request with any body
	EmailProvidersCheckConnectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersCheckConnectionCreate(ctx context.Context, body EmailProvidersCheckConnectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersCheckConnectionCreateWithFormdataBody(ctx context.Context, body EmailProvidersCheckConnectionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailProvidersDestroy request
	EmailProvidersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailProvidersRetrieve request
	EmailProvidersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailProvidersPartialUpdateWithBody request with any body
	EmailProvidersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersPartialUpdate(ctx context.Context, id int, body EmailProvidersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersPartialUpdateWithFormdataBody(ctx context.Context, id int, body EmailProvidersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailProvidersUpdateWithBody request with any body
	EmailProvidersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersUpdate(ctx context.Context, id int, body EmailProvidersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailProvidersUpdateWithFormdataBody(ctx context.Context, id int, body EmailProvidersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailsList request
	EmailsList(ctx context.Context, params *EmailsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailsRetrieve request
	EmailsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdentitiesRetrieve request
	IdentitiesRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdentitiesExportRetrieve request
	IdentitiesExportRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdentitiesImportCreateWithBody request with any body
	IdentitiesImportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IdentitiesImportCreateWithFormdataBody(ctx context.Context, body IdentitiesImportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesRetrieve request
	LanguagesRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogsAuditTrailList request
	LogsAuditTrailList(ctx context.Context, params *LogsAuditTrailListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogsAuditTrailRetrieve request
	LogsAuditTrailRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogsMessagesList request
	LogsMessagesList(ctx context.Context, params *LogsMessagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogsMessagesRetrieve request
	LogsMessagesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailboxesList request
	MailboxesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MailboxesRetrieve request
	MailboxesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigrationsList request
	MigrationsList(ctx context.Context, params *MigrationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigrationsDestroy request
	MigrationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigrationsRetrieve request
	MigrationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParametersApplicationsList request
	ParametersApplicationsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParametersStructureList request
	ParametersStructureList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParametersRetrieve request
	ParametersRetrieve(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParametersUpdate request
	ParametersUpdate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PasswordResetCreate request
	PasswordResetCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RelaydomainsList request
	RelaydomainsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RelaydomainsCreateWithBody request with any body
	RelaydomainsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RelaydomainsCreate(ctx context.Context, body RelaydomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RelaydomainsCreateWithFormdataBody(ctx context.Context, body RelaydomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RelaydomainsDestroy request
	RelaydomainsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RelaydomainsRetrieve request
	RelaydomainsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RelaydomainsPartialUpdateWithBody request with any body
	RelaydomainsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RelaydomainsPartialUpdate(ctx context.Context, id int, body RelaydomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RelaydomainsPartialUpdateWithFormdataBody(ctx context.Context, id int, body RelaydomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RelaydomainsUpdateWithBody request with any body
	RelaydomainsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RelaydomainsUpdate(ctx context.Context, id int, body RelaydomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RelaydomainsUpdateWithFormdataBody(ctx context.Context, id int, body RelaydomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetConfirmCreate request
	ResetConfirmCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourcesRetrieve request
	ResourcesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourcesPartialUpdateWithBody request with any body
	ResourcesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResourcesPartialUpdate(ctx context.Context, id int, body ResourcesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResourcesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ResourcesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourcesUpdateWithBody request with any body
	ResourcesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResourcesUpdate(ctx context.Context, id int, body ResourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResourcesUpdateWithFormdataBody(ctx context.Context, id int, body ResourcesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SenderaddressesList request
	SenderaddressesList(ctx context.Context, params *SenderaddressesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SenderaddressesCreateWithBody request with any body
	SenderaddressesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SenderaddressesCreate(ctx context.Context, body SenderaddressesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SenderaddressesCreateWithFormdataBody(ctx context.Context, body SenderaddressesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SenderaddressesDestroy request
	SenderaddressesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SenderaddressesRetrieve request
	SenderaddressesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SenderaddressesPartialUpdateWithBody request with any body
	SenderaddressesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SenderaddressesPartialUpdate(ctx context.Context, id int, body SenderaddressesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SenderaddressesPartialUpdateWithFormdataBody(ctx context.Context, id int, body SenderaddressesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SenderaddressesUpdateWithBody request with any body
	SenderaddressesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SenderaddressesUpdate(ctx context.Context, id int, body SenderaddressesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SenderaddressesUpdateWithFormdataBody(ctx context.Context, id int, body SenderaddressesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsList request
	SharedCalendarsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsCreateWithBody request with any body
	SharedCalendarsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsCreate(ctx context.Context, body SharedCalendarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsCreateWithFormdataBody(ctx context.Context, body SharedCalendarsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsCheckTokenCreateWithBody request with any body
	SharedCalendarsCheckTokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsCheckTokenCreate(ctx context.Context, body SharedCalendarsCheckTokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsCheckTokenCreateWithFormdataBody(ctx context.Context, body SharedCalendarsCheckTokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsEventsList request
	SharedCalendarsEventsList(ctx context.Context, calendarPk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsEventsCreateWithBody request with any body
	SharedCalendarsEventsCreateWithBody(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsEventsCreate(ctx context.Context, calendarPk string, body SharedCalendarsEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsEventsCreateWithFormdataBody(ctx context.Context, calendarPk string, body SharedCalendarsEventsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsEventsImportFromFileCreateWithBody request with any body
	SharedCalendarsEventsImportFromFileCreateWithBody(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsEventsImportFromFileCreate(ctx context.Context, calendarPk string, body SharedCalendarsEventsImportFromFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsEventsImportFromFileCreateWithFormdataBody(ctx context.Context, calendarPk string, body SharedCalendarsEventsImportFromFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsEventsDestroy request
	SharedCalendarsEventsDestroy(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsEventsRetrieve request
	SharedCalendarsEventsRetrieve(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsEventsPartialUpdateWithBody request with any body
	SharedCalendarsEventsPartialUpdateWithBody(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsEventsPartialUpdate(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsEventsPartialUpdateWithFormdataBody(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsEventsUpdateWithBody request with any body
	SharedCalendarsEventsUpdateWithBody(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsEventsUpdate(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsEventsUpdateWithFormdataBody(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsDestroy request
	SharedCalendarsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsRetrieve request
	SharedCalendarsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsPartialUpdateWithBody request with any body
	SharedCalendarsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsPartialUpdate(ctx context.Context, id int, body SharedCalendarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SharedCalendarsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedCalendarsUpdateWithBody request with any body
	SharedCalendarsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsUpdate(ctx context.Context, id int, body SharedCalendarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SharedCalendarsUpdateWithFormdataBody(ctx context.Context, id int, body SharedCalendarsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmsTotpCreate request
	SmsTotpCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatisticsList request
	StatisticsList(ctx context.Context, params *StatisticsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenCreateWithBody request with any body
	TokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenCreate(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenCreateWithFormdataBody(ctx context.Context, body TokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenRefreshCreateWithBody request with any body
	TokenRefreshCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenRefreshCreate(ctx context.Context, body TokenRefreshCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenRefreshCreateWithFormdataBody(ctx context.Context, body TokenRefreshCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TransportsList request
	TransportsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsList request
	UserCalendarsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsCreateWithBody request with any body
	UserCalendarsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsCreate(ctx context.Context, body UserCalendarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsCreateWithFormdataBody(ctx context.Context, body UserCalendarsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsCheckTokenCreateWithBody request with any body
	UserCalendarsCheckTokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsCheckTokenCreate(ctx context.Context, body UserCalendarsCheckTokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsCheckTokenCreateWithFormdataBody(ctx context.Context, body UserCalendarsCheckTokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsEventsList request
	UserCalendarsEventsList(ctx context.Context, calendarPk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsEventsCreateWithBody request with any body
	UserCalendarsEventsCreateWithBody(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsEventsCreate(ctx context.Context, calendarPk string, body UserCalendarsEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsEventsCreateWithFormdataBody(ctx context.Context, calendarPk string, body UserCalendarsEventsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsEventsImportFromFileCreateWithBody request with any body
	UserCalendarsEventsImportFromFileCreateWithBody(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsEventsImportFromFileCreate(ctx context.Context, calendarPk string, body UserCalendarsEventsImportFromFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsEventsImportFromFileCreateWithFormdataBody(ctx context.Context, calendarPk string, body UserCalendarsEventsImportFromFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsEventsDestroy request
	UserCalendarsEventsDestroy(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsEventsRetrieve request
	UserCalendarsEventsRetrieve(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsEventsPartialUpdateWithBody request with any body
	UserCalendarsEventsPartialUpdateWithBody(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsEventsPartialUpdate(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsEventsPartialUpdateWithFormdataBody(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsEventsUpdateWithBody request with any body
	UserCalendarsEventsUpdateWithBody(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsEventsUpdate(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsEventsUpdateWithFormdataBody(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsDestroy request
	UserCalendarsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsRetrieve request
	UserCalendarsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsPartialUpdateWithBody request with any body
	UserCalendarsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsPartialUpdate(ctx context.Context, id int, body UserCalendarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsPartialUpdateWithFormdataBody(ctx context.Context, id int, body UserCalendarsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCalendarsUpdateWithBody request with any body
	UserCalendarsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsUpdate(ctx context.Context, id int, body UserCalendarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserCalendarsUpdateWithFormdataBody(ctx context.Context, id int, body UserCalendarsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AccessrulesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesCreate(ctx context.Context, body AccessrulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesCreateWithFormdataBody(ctx context.Context, body AccessrulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesPartialUpdate(ctx context.Context, id int, body AccessrulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesPartialUpdateWithFormdataBody(ctx context.Context, id int, body AccessrulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesUpdate(ctx context.Context, id int, body AccessrulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessrulesUpdateWithFormdataBody(ctx context.Context, id int, body AccessrulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessrulesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountApiTokenDestroy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountApiTokenDestroyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountApiTokenRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountApiTokenRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountApiTokenCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountApiTokenCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountForwardRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountForwardRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountForwardCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountForwardCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountMeRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountMeRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountMePasswordCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountMePasswordCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountMePasswordCreate(ctx context.Context, body AccountMePasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountMePasswordCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountMePasswordCreateWithFormdataBody(ctx context.Context, body AccountMePasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountMePasswordCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTfaDisableCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTfaDisableCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTfaResetCodesCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTfaResetCodesCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTfaSetupCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTfaSetupCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTfaSetupCheckCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTfaSetupCheckCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTfaSetupCheckCreate(ctx context.Context, body AccountTfaSetupCheckCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTfaSetupCheckCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTfaSetupCheckCreateWithFormdataBody(ctx context.Context, body AccountTfaSetupCheckCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTfaSetupCheckCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTfaSetupKeyRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTfaSetupKeyRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountTfaVerifyCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountTfaVerifyCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsList(ctx context.Context, params *AccountsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsCreate(ctx context.Context, body AccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsCreateWithFormdataBody(ctx context.Context, body AccountsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsExistsRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsExistsRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsRandomPasswordRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsRandomPasswordRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsResetPasswordCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsResetPasswordCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsResetPasswordCreate(ctx context.Context, body AccountsResetPasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsResetPasswordCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsResetPasswordCreateWithFormdataBody(ctx context.Context, body AccountsResetPasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsResetPasswordCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsValidateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsValidateCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsValidateCreate(ctx context.Context, body AccountsValidateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsValidateCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsValidateCreateWithFormdataBody(ctx context.Context, body AccountsValidateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsValidateCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsPartialUpdate(ctx context.Context, id int, body AccountsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsPartialUpdateWithFormdataBody(ctx context.Context, id int, body AccountsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdate(ctx context.Context, id int, body AccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateWithFormdataBody(ctx context.Context, id int, body AccountsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsDeleteCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsDeleteCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsDeleteCreate(ctx context.Context, id int, body AccountsDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsDeleteCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsDeleteCreateWithFormdataBody(ctx context.Context, id int, body AccountsDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsDeleteCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsPasswordUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsPasswordUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsPasswordUpdate(ctx context.Context, id int, body AccountsPasswordUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsPasswordUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsPasswordUpdateWithFormdataBody(ctx context.Context, id int, body AccountsPasswordUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsPasswordUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddressBooksDefaultRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddressBooksDefaultRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddressBooksSyncFromCdavRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddressBooksSyncFromCdavRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddressBooksSyncToCdavRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddressBooksSyncToCdavRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminComponentsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminComponentsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmsList(ctx context.Context, params *AlarmsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmsBulkDeleteDestroy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmsBulkDeleteDestroyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmsSwitchPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmsSwitchPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmsSwitchPartialUpdate(ctx context.Context, id int, body AlarmsSwitchPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmsSwitchPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlarmsSwitchPartialUpdateWithFormdataBody(ctx context.Context, id int, body AlarmsSwitchPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlarmsSwitchPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesCreate(ctx context.Context, body AliasesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesCreateWithFormdataBody(ctx context.Context, body AliasesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesRandomAddressRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesRandomAddressRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesValidateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesValidateCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesValidateCreate(ctx context.Context, body AliasesValidateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesValidateCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesValidateCreateWithFormdataBody(ctx context.Context, body AliasesValidateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesValidateCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesPartialUpdate(ctx context.Context, id int, body AliasesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesPartialUpdateWithFormdataBody(ctx context.Context, id int, body AliasesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesUpdate(ctx context.Context, id int, body AliasesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AliasesUpdateWithFormdataBody(ctx context.Context, id int, body AliasesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliasesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesList(ctx context.Context, params *ArmessagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesCreate(ctx context.Context, body ArmessagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesCreateWithFormdataBody(ctx context.Context, body ArmessagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesPartialUpdate(ctx context.Context, id int, body ArmessagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ArmessagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesUpdate(ctx context.Context, id int, body ArmessagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArmessagesUpdateWithFormdataBody(ctx context.Context, id int, body ArmessagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArmessagesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttendeesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttendeesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttendeesRetrieve(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttendeesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesCreate(ctx context.Context, body CategoriesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesCreateWithFormdataBody(ctx context.Context, body CategoriesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesPartialUpdate(ctx context.Context, id int, body CategoriesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesPartialUpdateWithFormdataBody(ctx context.Context, id int, body CategoriesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesUpdate(ctx context.Context, id int, body CategoriesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesUpdateWithFormdataBody(ctx context.Context, id int, body CategoriesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsList(ctx context.Context, params *ContactsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsCreate(ctx context.Context, body ContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsCreateWithFormdataBody(ctx context.Context, body ContactsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsPartialUpdate(ctx context.Context, id int, body ContactsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ContactsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsUpdate(ctx context.Context, id int, body ContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactsUpdateWithFormdataBody(ctx context.Context, id int, body ContactsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsRetrieve(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsRetrieveRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesList(ctx context.Context, params *DomainaliasesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesCreateWithBody(ctx context.Context, params *DomainaliasesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesCreate(ctx context.Context, params *DomainaliasesCreateParams, body DomainaliasesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesCreateWithFormdataBody(ctx context.Context, params *DomainaliasesCreateParams, body DomainaliasesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesDestroy(ctx context.Context, id int, params *DomainaliasesDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesRetrieve(ctx context.Context, id int, params *DomainaliasesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesPartialUpdateWithBody(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesPartialUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesPartialUpdate(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesPartialUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesPartialUpdateWithFormdataBody(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesPartialUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesUpdateWithBody(ctx context.Context, id int, params *DomainaliasesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesUpdateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesUpdate(ctx context.Context, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesUpdateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainaliasesUpdateWithFormdataBody(ctx context.Context, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainaliasesUpdateRequestWithFormdataBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreate(ctx context.Context, body DomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreateWithFormdataBody(ctx context.Context, body DomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsExportRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsExportRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsImportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsImportCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsImportCreateWithFormdataBody(ctx context.Context, body DomainsImportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsImportCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsPartialUpdate(ctx context.Context, id int, body DomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsUpdate(ctx context.Context, id int, body DomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsUpdateWithFormdataBody(ctx context.Context, id int, body DomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsAdministratorsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsAdministratorsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsAdministratorsAddCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsAdministratorsAddCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsAdministratorsAddCreate(ctx context.Context, id int, body DomainsAdministratorsAddCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsAdministratorsAddCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsAdministratorsAddCreateWithFormdataBody(ctx context.Context, id int, body DomainsAdministratorsAddCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsAdministratorsAddCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsAdministratorsRemoveCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsAdministratorsRemoveCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsAdministratorsRemoveCreate(ctx context.Context, id int, body DomainsAdministratorsRemoveCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsAdministratorsRemoveCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsAdministratorsRemoveCreateWithFormdataBody(ctx context.Context, id int, body DomainsAdministratorsRemoveCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsAdministratorsRemoveCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDeleteCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDeleteCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDeleteCreate(ctx context.Context, id int, body DomainsDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDeleteCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDeleteCreateWithFormdataBody(ctx context.Context, id int, body DomainsDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDeleteCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDmarcAlignmentStatsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDmarcAlignmentStatsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDnsDetailRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDnsDetailRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersList(ctx context.Context, params *EmailProvidersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersCreate(ctx context.Context, body EmailProvidersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersCreateWithFormdataBody(ctx context.Context, body EmailProvidersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersCheckAssociatedDomainCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersCheckAssociatedDomainCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersCheckAssociatedDomainCreate(ctx context.Context, body EmailProvidersCheckAssociatedDomainCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersCheckAssociatedDomainCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersCheckAssociatedDomainCreateWithFormdataBody(ctx context.Context, body EmailProvidersCheckAssociatedDomainCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersCheckAssociatedDomainCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersCheckConnectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersCheckConnectionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersCheckConnectionCreate(ctx context.Context, body EmailProvidersCheckConnectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersCheckConnectionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersCheckConnectionCreateWithFormdataBody(ctx context.Context, body EmailProvidersCheckConnectionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersCheckConnectionCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersPartialUpdate(ctx context.Context, id int, body EmailProvidersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersPartialUpdateWithFormdataBody(ctx context.Context, id int, body EmailProvidersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersUpdate(ctx context.Context, id int, body EmailProvidersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailProvidersUpdateWithFormdataBody(ctx context.Context, id int, body EmailProvidersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailProvidersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailsList(ctx context.Context, params *EmailsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdentitiesRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdentitiesRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdentitiesExportRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdentitiesExportRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdentitiesImportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdentitiesImportCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdentitiesImportCreateWithFormdataBody(ctx context.Context, body IdentitiesImportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdentitiesImportCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogsAuditTrailList(ctx context.Context, params *LogsAuditTrailListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogsAuditTrailListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogsAuditTrailRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogsAuditTrailRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogsMessagesList(ctx context.Context, params *LogsMessagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogsMessagesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogsMessagesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogsMessagesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailboxesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailboxesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MailboxesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMailboxesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrationsList(ctx context.Context, params *MigrationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParametersApplicationsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParametersApplicationsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParametersStructureList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParametersStructureListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParametersRetrieve(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParametersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParametersUpdate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParametersUpdateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PasswordResetCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPasswordResetCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsCreate(ctx context.Context, body RelaydomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsCreateWithFormdataBody(ctx context.Context, body RelaydomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsPartialUpdate(ctx context.Context, id int, body RelaydomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsPartialUpdateWithFormdataBody(ctx context.Context, id int, body RelaydomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsUpdate(ctx context.Context, id int, body RelaydomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelaydomainsUpdateWithFormdataBody(ctx context.Context, id int, body RelaydomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelaydomainsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetConfirmCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetConfirmCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesPartialUpdate(ctx context.Context, id int, body ResourcesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ResourcesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesUpdate(ctx context.Context, id int, body ResourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesUpdateWithFormdataBody(ctx context.Context, id int, body ResourcesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesList(ctx context.Context, params *SenderaddressesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesCreate(ctx context.Context, body SenderaddressesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesCreateWithFormdataBody(ctx context.Context, body SenderaddressesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesPartialUpdate(ctx context.Context, id int, body SenderaddressesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesPartialUpdateWithFormdataBody(ctx context.Context, id int, body SenderaddressesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesUpdate(ctx context.Context, id int, body SenderaddressesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SenderaddressesUpdateWithFormdataBody(ctx context.Context, id int, body SenderaddressesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSenderaddressesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsCreate(ctx context.Context, body SharedCalendarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsCreateWithFormdataBody(ctx context.Context, body SharedCalendarsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsCheckTokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsCheckTokenCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsCheckTokenCreate(ctx context.Context, body SharedCalendarsCheckTokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsCheckTokenCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsCheckTokenCreateWithFormdataBody(ctx context.Context, body SharedCalendarsCheckTokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsCheckTokenCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsList(ctx context.Context, calendarPk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsListRequest(c.Server, calendarPk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsCreateWithBody(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsCreateRequestWithBody(c.Server, calendarPk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsCreate(ctx context.Context, calendarPk string, body SharedCalendarsEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsCreateRequest(c.Server, calendarPk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsCreateWithFormdataBody(ctx context.Context, calendarPk string, body SharedCalendarsEventsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsCreateRequestWithFormdataBody(c.Server, calendarPk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsImportFromFileCreateWithBody(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsImportFromFileCreateRequestWithBody(c.Server, calendarPk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsImportFromFileCreate(ctx context.Context, calendarPk string, body SharedCalendarsEventsImportFromFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsImportFromFileCreateRequest(c.Server, calendarPk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsImportFromFileCreateWithFormdataBody(ctx context.Context, calendarPk string, body SharedCalendarsEventsImportFromFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsImportFromFileCreateRequestWithFormdataBody(c.Server, calendarPk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsDestroy(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsDestroyRequest(c.Server, calendarPk, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsRetrieve(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsRetrieveRequest(c.Server, calendarPk, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsPartialUpdateWithBody(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsPartialUpdateRequestWithBody(c.Server, calendarPk, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsPartialUpdate(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsPartialUpdateRequest(c.Server, calendarPk, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsPartialUpdateWithFormdataBody(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsPartialUpdateRequestWithFormdataBody(c.Server, calendarPk, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsUpdateWithBody(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsUpdateRequestWithBody(c.Server, calendarPk, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsUpdate(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsUpdateRequest(c.Server, calendarPk, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsEventsUpdateWithFormdataBody(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsEventsUpdateRequestWithFormdataBody(c.Server, calendarPk, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsPartialUpdate(ctx context.Context, id int, body SharedCalendarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SharedCalendarsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsUpdate(ctx context.Context, id int, body SharedCalendarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedCalendarsUpdateWithFormdataBody(ctx context.Context, id int, body SharedCalendarsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedCalendarsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTotpCreate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTotpCreateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatisticsList(ctx context.Context, params *StatisticsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatisticsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenCreate(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenCreateWithFormdataBody(ctx context.Context, body TokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenRefreshCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenRefreshCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenRefreshCreate(ctx context.Context, body TokenRefreshCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenRefreshCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenRefreshCreateWithFormdataBody(ctx context.Context, body TokenRefreshCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenRefreshCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransportsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransportsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsCreate(ctx context.Context, body UserCalendarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsCreateWithFormdataBody(ctx context.Context, body UserCalendarsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsCheckTokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsCheckTokenCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsCheckTokenCreate(ctx context.Context, body UserCalendarsCheckTokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsCheckTokenCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsCheckTokenCreateWithFormdataBody(ctx context.Context, body UserCalendarsCheckTokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsCheckTokenCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsList(ctx context.Context, calendarPk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsListRequest(c.Server, calendarPk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsCreateWithBody(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsCreateRequestWithBody(c.Server, calendarPk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsCreate(ctx context.Context, calendarPk string, body UserCalendarsEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsCreateRequest(c.Server, calendarPk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsCreateWithFormdataBody(ctx context.Context, calendarPk string, body UserCalendarsEventsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsCreateRequestWithFormdataBody(c.Server, calendarPk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsImportFromFileCreateWithBody(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsImportFromFileCreateRequestWithBody(c.Server, calendarPk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsImportFromFileCreate(ctx context.Context, calendarPk string, body UserCalendarsEventsImportFromFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsImportFromFileCreateRequest(c.Server, calendarPk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsImportFromFileCreateWithFormdataBody(ctx context.Context, calendarPk string, body UserCalendarsEventsImportFromFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsImportFromFileCreateRequestWithFormdataBody(c.Server, calendarPk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsDestroy(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsDestroyRequest(c.Server, calendarPk, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsRetrieve(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsRetrieveRequest(c.Server, calendarPk, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsPartialUpdateWithBody(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsPartialUpdateRequestWithBody(c.Server, calendarPk, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsPartialUpdate(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsPartialUpdateRequest(c.Server, calendarPk, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsPartialUpdateWithFormdataBody(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsPartialUpdateRequestWithFormdataBody(c.Server, calendarPk, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsUpdateWithBody(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsUpdateRequestWithBody(c.Server, calendarPk, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsUpdate(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsUpdateRequest(c.Server, calendarPk, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsEventsUpdateWithFormdataBody(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsEventsUpdateRequestWithFormdataBody(c.Server, calendarPk, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsPartialUpdate(ctx context.Context, id int, body UserCalendarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsPartialUpdateWithFormdataBody(ctx context.Context, id int, body UserCalendarsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsUpdate(ctx context.Context, id int, body UserCalendarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCalendarsUpdateWithFormdataBody(ctx context.Context, id int, body UserCalendarsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCalendarsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccessrulesListRequest generates requests for AccessrulesList
func NewAccessrulesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accessrules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessrulesCreateRequest calls the generic AccessrulesCreate builder with application/json body
func NewAccessrulesCreateRequest(server string, body AccessrulesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessrulesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccessrulesCreateRequestWithFormdataBody calls the generic AccessrulesCreate builder with application/x-www-form-urlencoded body
func NewAccessrulesCreateRequestWithFormdataBody(server string, body AccessrulesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccessrulesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccessrulesCreateRequestWithBody generates requests for AccessrulesCreate with any type of body
func NewAccessrulesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accessrules/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessrulesDestroyRequest generates requests for AccessrulesDestroy
func NewAccessrulesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accessrules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessrulesRetrieveRequest generates requests for AccessrulesRetrieve
func NewAccessrulesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accessrules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessrulesPartialUpdateRequest calls the generic AccessrulesPartialUpdate builder with application/json body
func NewAccessrulesPartialUpdateRequest(server string, id int, body AccessrulesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessrulesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccessrulesPartialUpdateRequestWithFormdataBody calls the generic AccessrulesPartialUpdate builder with application/x-www-form-urlencoded body
func NewAccessrulesPartialUpdateRequestWithFormdataBody(server string, id int, body AccessrulesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccessrulesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccessrulesPartialUpdateRequestWithBody generates requests for AccessrulesPartialUpdate with any type of body
func NewAccessrulesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accessrules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessrulesUpdateRequest calls the generic AccessrulesUpdate builder with application/json body
func NewAccessrulesUpdateRequest(server string, id int, body AccessrulesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessrulesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccessrulesUpdateRequestWithFormdataBody calls the generic AccessrulesUpdate builder with application/x-www-form-urlencoded body
func NewAccessrulesUpdateRequestWithFormdataBody(server string, id int, body AccessrulesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccessrulesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccessrulesUpdateRequestWithBody generates requests for AccessrulesUpdate with any type of body
func NewAccessrulesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accessrules/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountApiTokenDestroyRequest generates requests for AccountApiTokenDestroy
func NewAccountApiTokenDestroyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/api_token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountApiTokenRetrieveRequest generates requests for AccountApiTokenRetrieve
func NewAccountApiTokenRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/api_token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountApiTokenCreateRequest generates requests for AccountApiTokenCreate
func NewAccountApiTokenCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/api_token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountForwardRetrieveRequest generates requests for AccountForwardRetrieve
func NewAccountForwardRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/forward/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountForwardCreateRequest generates requests for AccountForwardCreate
func NewAccountForwardCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/forward/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountMeRetrieveRequest generates requests for AccountMeRetrieve
func NewAccountMeRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountMePasswordCreateRequest calls the generic AccountMePasswordCreate builder with application/json body
func NewAccountMePasswordCreateRequest(server string, body AccountMePasswordCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountMePasswordCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountMePasswordCreateRequestWithFormdataBody calls the generic AccountMePasswordCreate builder with application/x-www-form-urlencoded body
func NewAccountMePasswordCreateRequestWithFormdataBody(server string, body AccountMePasswordCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccountMePasswordCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccountMePasswordCreateRequestWithBody generates requests for AccountMePasswordCreate with any type of body
func NewAccountMePasswordCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/me/password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountTfaDisableCreateRequest generates requests for AccountTfaDisableCreate
func NewAccountTfaDisableCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/tfa/disable/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountTfaResetCodesCreateRequest generates requests for AccountTfaResetCodesCreate
func NewAccountTfaResetCodesCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/tfa/reset_codes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountTfaSetupCreateRequest generates requests for AccountTfaSetupCreate
func NewAccountTfaSetupCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/tfa/setup/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountTfaSetupCheckCreateRequest calls the generic AccountTfaSetupCheckCreate builder with application/json body
func NewAccountTfaSetupCheckCreateRequest(server string, body AccountTfaSetupCheckCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountTfaSetupCheckCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountTfaSetupCheckCreateRequestWithFormdataBody calls the generic AccountTfaSetupCheckCreate builder with application/x-www-form-urlencoded body
func NewAccountTfaSetupCheckCreateRequestWithFormdataBody(server string, body AccountTfaSetupCheckCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccountTfaSetupCheckCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccountTfaSetupCheckCreateRequestWithBody generates requests for AccountTfaSetupCheckCreate with any type of body
func NewAccountTfaSetupCheckCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/tfa/setup/check/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountTfaSetupKeyRetrieveRequest generates requests for AccountTfaSetupKeyRetrieve
func NewAccountTfaSetupKeyRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/tfa/setup/key/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountTfaVerifyCreateRequest generates requests for AccountTfaVerifyCreate
func NewAccountTfaVerifyCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/tfa/verify/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsListRequest generates requests for AccountsList
func NewAccountsListRequest(server string, params *AccountsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Domain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain", runtime.ParamLocationQuery, *params.Domain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsCreateRequest calls the generic AccountsCreate builder with application/json body
func NewAccountsCreateRequest(server string, body AccountsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsCreateRequestWithFormdataBody calls the generic AccountsCreate builder with application/x-www-form-urlencoded body
func NewAccountsCreateRequestWithFormdataBody(server string, body AccountsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccountsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccountsCreateRequestWithBody generates requests for AccountsCreate with any type of body
func NewAccountsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsExistsRetrieveRequest generates requests for AccountsExistsRetrieve
func NewAccountsExistsRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/exists/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsRandomPasswordRetrieveRequest generates requests for AccountsRandomPasswordRetrieve
func NewAccountsRandomPasswordRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/random_password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsResetPasswordCreateRequest calls the generic AccountsResetPasswordCreate builder with application/json body
func NewAccountsResetPasswordCreateRequest(server string, body AccountsResetPasswordCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsResetPasswordCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsResetPasswordCreateRequestWithFormdataBody calls the generic AccountsResetPasswordCreate builder with application/x-www-form-urlencoded body
func NewAccountsResetPasswordCreateRequestWithFormdataBody(server string, body AccountsResetPasswordCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccountsResetPasswordCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccountsResetPasswordCreateRequestWithBody generates requests for AccountsResetPasswordCreate with any type of body
func NewAccountsResetPasswordCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/reset_password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsValidateCreateRequest calls the generic AccountsValidateCreate builder with application/json body
func NewAccountsValidateCreateRequest(server string, body AccountsValidateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsValidateCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsValidateCreateRequestWithFormdataBody calls the generic AccountsValidateCreate builder with application/x-www-form-urlencoded body
func NewAccountsValidateCreateRequestWithFormdataBody(server string, body AccountsValidateCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccountsValidateCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccountsValidateCreateRequestWithBody generates requests for AccountsValidateCreate with any type of body
func NewAccountsValidateCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/validate/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsDestroyRequest generates requests for AccountsDestroy
func NewAccountsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsRetrieveRequest generates requests for AccountsRetrieve
func NewAccountsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsPartialUpdateRequest calls the generic AccountsPartialUpdate builder with application/json body
func NewAccountsPartialUpdateRequest(server string, id int, body AccountsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccountsPartialUpdateRequestWithFormdataBody calls the generic AccountsPartialUpdate builder with application/x-www-form-urlencoded body
func NewAccountsPartialUpdateRequestWithFormdataBody(server string, id int, body AccountsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccountsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccountsPartialUpdateRequestWithBody generates requests for AccountsPartialUpdate with any type of body
func NewAccountsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsUpdateRequest calls the generic AccountsUpdate builder with application/json body
func NewAccountsUpdateRequest(server string, id int, body AccountsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccountsUpdateRequestWithFormdataBody calls the generic AccountsUpdate builder with application/x-www-form-urlencoded body
func NewAccountsUpdateRequestWithFormdataBody(server string, id int, body AccountsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccountsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccountsUpdateRequestWithBody generates requests for AccountsUpdate with any type of body
func NewAccountsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsDeleteCreateRequest calls the generic AccountsDeleteCreate builder with application/json body
func NewAccountsDeleteCreateRequest(server string, id int, body AccountsDeleteCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsDeleteCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccountsDeleteCreateRequestWithFormdataBody calls the generic AccountsDeleteCreate builder with application/x-www-form-urlencoded body
func NewAccountsDeleteCreateRequestWithFormdataBody(server string, id int, body AccountsDeleteCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccountsDeleteCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccountsDeleteCreateRequestWithBody generates requests for AccountsDeleteCreate with any type of body
func NewAccountsDeleteCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/delete/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsPasswordUpdateRequest calls the generic AccountsPasswordUpdate builder with application/json body
func NewAccountsPasswordUpdateRequest(server string, id int, body AccountsPasswordUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsPasswordUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccountsPasswordUpdateRequestWithFormdataBody calls the generic AccountsPasswordUpdate builder with application/x-www-form-urlencoded body
func NewAccountsPasswordUpdateRequestWithFormdataBody(server string, id int, body AccountsPasswordUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccountsPasswordUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccountsPasswordUpdateRequestWithBody generates requests for AccountsPasswordUpdate with any type of body
func NewAccountsPasswordUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/password/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddressBooksDefaultRetrieveRequest generates requests for AddressBooksDefaultRetrieve
func NewAddressBooksDefaultRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/address-books/default/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddressBooksSyncFromCdavRetrieveRequest generates requests for AddressBooksSyncFromCdavRetrieve
func NewAddressBooksSyncFromCdavRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/address-books/sync_from_cdav/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddressBooksSyncToCdavRetrieveRequest generates requests for AddressBooksSyncToCdavRetrieve
func NewAddressBooksSyncToCdavRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/address-books/sync_to_cdav/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminComponentsListRequest generates requests for AdminComponentsList
func NewAdminComponentsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/admin/components/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlarmsListRequest generates requests for AlarmsList
func NewAlarmsListRequest(server string, params *AlarmsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/alarms/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_date", runtime.ParamLocationQuery, *params.MinDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlarmsBulkDeleteDestroyRequest generates requests for AlarmsBulkDeleteDestroy
func NewAlarmsBulkDeleteDestroyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/alarms/bulk_delete/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlarmsDestroyRequest generates requests for AlarmsDestroy
func NewAlarmsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/alarms/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlarmsRetrieveRequest generates requests for AlarmsRetrieve
func NewAlarmsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/alarms/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlarmsSwitchPartialUpdateRequest calls the generic AlarmsSwitchPartialUpdate builder with application/json body
func NewAlarmsSwitchPartialUpdateRequest(server string, id int, body AlarmsSwitchPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlarmsSwitchPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAlarmsSwitchPartialUpdateRequestWithFormdataBody calls the generic AlarmsSwitchPartialUpdate builder with application/x-www-form-urlencoded body
func NewAlarmsSwitchPartialUpdateRequestWithFormdataBody(server string, id int, body AlarmsSwitchPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAlarmsSwitchPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewAlarmsSwitchPartialUpdateRequestWithBody generates requests for AlarmsSwitchPartialUpdate with any type of body
func NewAlarmsSwitchPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/alarms/%s/switch/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAliasesListRequest generates requests for AliasesList
func NewAliasesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aliases/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAliasesCreateRequest calls the generic AliasesCreate builder with application/json body
func NewAliasesCreateRequest(server string, body AliasesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAliasesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAliasesCreateRequestWithFormdataBody calls the generic AliasesCreate builder with application/x-www-form-urlencoded body
func NewAliasesCreateRequestWithFormdataBody(server string, body AliasesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAliasesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAliasesCreateRequestWithBody generates requests for AliasesCreate with any type of body
func NewAliasesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aliases/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAliasesRandomAddressRetrieveRequest generates requests for AliasesRandomAddressRetrieve
func NewAliasesRandomAddressRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aliases/random_address/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAliasesValidateCreateRequest calls the generic AliasesValidateCreate builder with application/json body
func NewAliasesValidateCreateRequest(server string, body AliasesValidateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAliasesValidateCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAliasesValidateCreateRequestWithFormdataBody calls the generic AliasesValidateCreate builder with application/x-www-form-urlencoded body
func NewAliasesValidateCreateRequestWithFormdataBody(server string, body AliasesValidateCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAliasesValidateCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewAliasesValidateCreateRequestWithBody generates requests for AliasesValidateCreate with any type of body
func NewAliasesValidateCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aliases/validate/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAliasesDestroyRequest generates requests for AliasesDestroy
func NewAliasesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aliases/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAliasesRetrieveRequest generates requests for AliasesRetrieve
func NewAliasesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aliases/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAliasesPartialUpdateRequest calls the generic AliasesPartialUpdate builder with application/json body
func NewAliasesPartialUpdateRequest(server string, id int, body AliasesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAliasesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAliasesPartialUpdateRequestWithFormdataBody calls the generic AliasesPartialUpdate builder with application/x-www-form-urlencoded body
func NewAliasesPartialUpdateRequestWithFormdataBody(server string, id int, body AliasesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAliasesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewAliasesPartialUpdateRequestWithBody generates requests for AliasesPartialUpdate with any type of body
func NewAliasesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aliases/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAliasesUpdateRequest calls the generic AliasesUpdate builder with application/json body
func NewAliasesUpdateRequest(server string, id int, body AliasesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAliasesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAliasesUpdateRequestWithFormdataBody calls the generic AliasesUpdate builder with application/x-www-form-urlencoded body
func NewAliasesUpdateRequestWithFormdataBody(server string, id int, body AliasesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAliasesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewAliasesUpdateRequestWithBody generates requests for AliasesUpdate with any type of body
func NewAliasesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aliases/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArmessagesListRequest generates requests for ArmessagesList
func NewArmessagesListRequest(server string, params *ArmessagesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/armessages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Mbox != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mbox", runtime.ParamLocationQuery, *params.Mbox); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MboxUser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mbox__user", runtime.ParamLocationQuery, *params.MboxUser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArmessagesCreateRequest calls the generic ArmessagesCreate builder with application/json body
func NewArmessagesCreateRequest(server string, body ArmessagesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewArmessagesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewArmessagesCreateRequestWithFormdataBody calls the generic ArmessagesCreate builder with application/x-www-form-urlencoded body
func NewArmessagesCreateRequestWithFormdataBody(server string, body ArmessagesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewArmessagesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewArmessagesCreateRequestWithBody generates requests for ArmessagesCreate with any type of body
func NewArmessagesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/armessages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArmessagesRetrieveRequest generates requests for ArmessagesRetrieve
func NewArmessagesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/armessages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArmessagesPartialUpdateRequest calls the generic ArmessagesPartialUpdate builder with application/json body
func NewArmessagesPartialUpdateRequest(server string, id int, body ArmessagesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewArmessagesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewArmessagesPartialUpdateRequestWithFormdataBody calls the generic ArmessagesPartialUpdate builder with application/x-www-form-urlencoded body
func NewArmessagesPartialUpdateRequestWithFormdataBody(server string, id int, body ArmessagesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewArmessagesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewArmessagesPartialUpdateRequestWithBody generates requests for ArmessagesPartialUpdate with any type of body
func NewArmessagesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/armessages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArmessagesUpdateRequest calls the generic ArmessagesUpdate builder with application/json body
func NewArmessagesUpdateRequest(server string, id int, body ArmessagesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewArmessagesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewArmessagesUpdateRequestWithFormdataBody calls the generic ArmessagesUpdate builder with application/x-www-form-urlencoded body
func NewArmessagesUpdateRequestWithFormdataBody(server string, id int, body ArmessagesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewArmessagesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewArmessagesUpdateRequestWithBody generates requests for ArmessagesUpdate with any type of body
func NewArmessagesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/armessages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAttendeesListRequest generates requests for AttendeesList
func NewAttendeesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/attendees/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttendeesRetrieveRequest generates requests for AttendeesRetrieve
func NewAttendeesRetrieveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/attendees/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoriesListRequest generates requests for CategoriesList
func NewCategoriesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/categories/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoriesCreateRequest calls the generic CategoriesCreate builder with application/json body
func NewCategoriesCreateRequest(server string, body CategoriesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoriesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCategoriesCreateRequestWithFormdataBody calls the generic CategoriesCreate builder with application/x-www-form-urlencoded body
func NewCategoriesCreateRequestWithFormdataBody(server string, body CategoriesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCategoriesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCategoriesCreateRequestWithBody generates requests for CategoriesCreate with any type of body
func NewCategoriesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/categories/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategoriesDestroyRequest generates requests for CategoriesDestroy
func NewCategoriesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/categories/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoriesRetrieveRequest generates requests for CategoriesRetrieve
func NewCategoriesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/categories/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoriesPartialUpdateRequest calls the generic CategoriesPartialUpdate builder with application/json body
func NewCategoriesPartialUpdateRequest(server string, id int, body CategoriesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoriesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCategoriesPartialUpdateRequestWithFormdataBody calls the generic CategoriesPartialUpdate builder with application/x-www-form-urlencoded body
func NewCategoriesPartialUpdateRequestWithFormdataBody(server string, id int, body CategoriesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCategoriesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCategoriesPartialUpdateRequestWithBody generates requests for CategoriesPartialUpdate with any type of body
func NewCategoriesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/categories/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategoriesUpdateRequest calls the generic CategoriesUpdate builder with application/json body
func NewCategoriesUpdateRequest(server string, id int, body CategoriesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoriesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCategoriesUpdateRequestWithFormdataBody calls the generic CategoriesUpdate builder with application/x-www-form-urlencoded body
func NewCategoriesUpdateRequestWithFormdataBody(server string, id int, body CategoriesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCategoriesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCategoriesUpdateRequestWithBody generates requests for CategoriesUpdate with any type of body
func NewCategoriesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/categories/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContactsListRequest generates requests for ContactsList
func NewContactsListRequest(server string, params *ContactsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Categories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categories", runtime.ParamLocationQuery, *params.Categories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContactsCreateRequest calls the generic ContactsCreate builder with application/json body
func NewContactsCreateRequest(server string, body ContactsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContactsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewContactsCreateRequestWithFormdataBody calls the generic ContactsCreate builder with application/x-www-form-urlencoded body
func NewContactsCreateRequestWithFormdataBody(server string, body ContactsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContactsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewContactsCreateRequestWithBody generates requests for ContactsCreate with any type of body
func NewContactsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContactsDestroyRequest generates requests for ContactsDestroy
func NewContactsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContactsRetrieveRequest generates requests for ContactsRetrieve
func NewContactsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContactsPartialUpdateRequest calls the generic ContactsPartialUpdate builder with application/json body
func NewContactsPartialUpdateRequest(server string, id int, body ContactsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContactsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewContactsPartialUpdateRequestWithFormdataBody calls the generic ContactsPartialUpdate builder with application/x-www-form-urlencoded body
func NewContactsPartialUpdateRequestWithFormdataBody(server string, id int, body ContactsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContactsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewContactsPartialUpdateRequestWithBody generates requests for ContactsPartialUpdate with any type of body
func NewContactsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContactsUpdateRequest calls the generic ContactsUpdate builder with application/json body
func NewContactsUpdateRequest(server string, id int, body ContactsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContactsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewContactsUpdateRequestWithFormdataBody calls the generic ContactsUpdate builder with application/x-www-form-urlencoded body
func NewContactsUpdateRequestWithFormdataBody(server string, id int, body ContactsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewContactsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewContactsUpdateRequestWithBody generates requests for ContactsUpdate with any type of body
func NewContactsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCredentialsRetrieveRequest generates requests for CredentialsRetrieve
func NewCredentialsRetrieveRequest(server string, accountId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credentials/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainaliasesListRequest generates requests for DomainaliasesList
func NewDomainaliasesListRequest(server string, params *DomainaliasesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domainaliases/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Domain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain", runtime.ParamLocationQuery, *params.Domain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainaliasesCreateRequest calls the generic DomainaliasesCreate builder with application/json body
func NewDomainaliasesCreateRequest(server string, params *DomainaliasesCreateParams, body DomainaliasesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainaliasesCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDomainaliasesCreateRequestWithFormdataBody calls the generic DomainaliasesCreate builder with application/x-www-form-urlencoded body
func NewDomainaliasesCreateRequestWithFormdataBody(server string, params *DomainaliasesCreateParams, body DomainaliasesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainaliasesCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainaliasesCreateRequestWithBody generates requests for DomainaliasesCreate with any type of body
func NewDomainaliasesCreateRequestWithBody(server string, params *DomainaliasesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domainaliases/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainaliasesDestroyRequest generates requests for DomainaliasesDestroy
func NewDomainaliasesDestroyRequest(server string, id int, params *DomainaliasesDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domainaliases/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainaliasesRetrieveRequest generates requests for DomainaliasesRetrieve
func NewDomainaliasesRetrieveRequest(server string, id int, params *DomainaliasesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domainaliases/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainaliasesPartialUpdateRequest calls the generic DomainaliasesPartialUpdate builder with application/json body
func NewDomainaliasesPartialUpdateRequest(server string, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainaliasesPartialUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDomainaliasesPartialUpdateRequestWithFormdataBody calls the generic DomainaliasesPartialUpdate builder with application/x-www-form-urlencoded body
func NewDomainaliasesPartialUpdateRequestWithFormdataBody(server string, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainaliasesPartialUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainaliasesPartialUpdateRequestWithBody generates requests for DomainaliasesPartialUpdate with any type of body
func NewDomainaliasesPartialUpdateRequestWithBody(server string, id int, params *DomainaliasesPartialUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domainaliases/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainaliasesUpdateRequest calls the generic DomainaliasesUpdate builder with application/json body
func NewDomainaliasesUpdateRequest(server string, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainaliasesUpdateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDomainaliasesUpdateRequestWithFormdataBody calls the generic DomainaliasesUpdate builder with application/x-www-form-urlencoded body
func NewDomainaliasesUpdateRequestWithFormdataBody(server string, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainaliasesUpdateRequestWithBody(server, id, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainaliasesUpdateRequestWithBody generates requests for DomainaliasesUpdate with any type of body
func NewDomainaliasesUpdateRequestWithBody(server string, id int, params *DomainaliasesUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domainaliases/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsListRequest generates requests for DomainsList
func NewDomainsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsCreateRequest calls the generic DomainsCreate builder with application/json body
func NewDomainsCreateRequest(server string, body DomainsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDomainsCreateRequestWithFormdataBody calls the generic DomainsCreate builder with application/x-www-form-urlencoded body
func NewDomainsCreateRequestWithFormdataBody(server string, body DomainsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsCreateRequestWithBody generates requests for DomainsCreate with any type of body
func NewDomainsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsExportRetrieveRequest generates requests for DomainsExportRetrieve
func NewDomainsExportRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/export/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsImportCreateRequestWithFormdataBody calls the generic DomainsImportCreate builder with application/x-www-form-urlencoded body
func NewDomainsImportCreateRequestWithFormdataBody(server string, body DomainsImportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsImportCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsImportCreateRequestWithBody generates requests for DomainsImportCreate with any type of body
func NewDomainsImportCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsRetrieveRequest generates requests for DomainsRetrieve
func NewDomainsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsPartialUpdateRequest calls the generic DomainsPartialUpdate builder with application/json body
func NewDomainsPartialUpdateRequest(server string, id int, body DomainsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDomainsPartialUpdateRequestWithFormdataBody calls the generic DomainsPartialUpdate builder with application/x-www-form-urlencoded body
func NewDomainsPartialUpdateRequestWithFormdataBody(server string, id int, body DomainsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsPartialUpdateRequestWithBody generates requests for DomainsPartialUpdate with any type of body
func NewDomainsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsUpdateRequest calls the generic DomainsUpdate builder with application/json body
func NewDomainsUpdateRequest(server string, id int, body DomainsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDomainsUpdateRequestWithFormdataBody calls the generic DomainsUpdate builder with application/x-www-form-urlencoded body
func NewDomainsUpdateRequestWithFormdataBody(server string, id int, body DomainsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsUpdateRequestWithBody generates requests for DomainsUpdate with any type of body
func NewDomainsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsAdministratorsRetrieveRequest generates requests for DomainsAdministratorsRetrieve
func NewDomainsAdministratorsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/%s/administrators/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsAdministratorsAddCreateRequest calls the generic DomainsAdministratorsAddCreate builder with application/json body
func NewDomainsAdministratorsAddCreateRequest(server string, id int, body DomainsAdministratorsAddCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsAdministratorsAddCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDomainsAdministratorsAddCreateRequestWithFormdataBody calls the generic DomainsAdministratorsAddCreate builder with application/x-www-form-urlencoded body
func NewDomainsAdministratorsAddCreateRequestWithFormdataBody(server string, id int, body DomainsAdministratorsAddCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsAdministratorsAddCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsAdministratorsAddCreateRequestWithBody generates requests for DomainsAdministratorsAddCreate with any type of body
func NewDomainsAdministratorsAddCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/%s/administrators/add/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsAdministratorsRemoveCreateRequest calls the generic DomainsAdministratorsRemoveCreate builder with application/json body
func NewDomainsAdministratorsRemoveCreateRequest(server string, id int, body DomainsAdministratorsRemoveCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsAdministratorsRemoveCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDomainsAdministratorsRemoveCreateRequestWithFormdataBody calls the generic DomainsAdministratorsRemoveCreate builder with application/x-www-form-urlencoded body
func NewDomainsAdministratorsRemoveCreateRequestWithFormdataBody(server string, id int, body DomainsAdministratorsRemoveCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsAdministratorsRemoveCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsAdministratorsRemoveCreateRequestWithBody generates requests for DomainsAdministratorsRemoveCreate with any type of body
func NewDomainsAdministratorsRemoveCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/%s/administrators/remove/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsDeleteCreateRequest calls the generic DomainsDeleteCreate builder with application/json body
func NewDomainsDeleteCreateRequest(server string, id int, body DomainsDeleteCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsDeleteCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDomainsDeleteCreateRequestWithFormdataBody calls the generic DomainsDeleteCreate builder with application/x-www-form-urlencoded body
func NewDomainsDeleteCreateRequestWithFormdataBody(server string, id int, body DomainsDeleteCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDomainsDeleteCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDomainsDeleteCreateRequestWithBody generates requests for DomainsDeleteCreate with any type of body
func NewDomainsDeleteCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/%s/delete/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsDmarcAlignmentStatsRetrieveRequest generates requests for DomainsDmarcAlignmentStatsRetrieve
func NewDomainsDmarcAlignmentStatsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/%s/dmarc/alignment_stats/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsDnsDetailRetrieveRequest generates requests for DomainsDnsDetailRetrieve
func NewDomainsDnsDetailRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/domains/%s/dns_detail/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailProvidersListRequest generates requests for EmailProvidersList
func NewEmailProvidersListRequest(server string, params *EmailProvidersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/email-providers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailProvidersCreateRequest calls the generic EmailProvidersCreate builder with application/json body
func NewEmailProvidersCreateRequest(server string, body EmailProvidersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailProvidersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEmailProvidersCreateRequestWithFormdataBody calls the generic EmailProvidersCreate builder with application/x-www-form-urlencoded body
func NewEmailProvidersCreateRequestWithFormdataBody(server string, body EmailProvidersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEmailProvidersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEmailProvidersCreateRequestWithBody generates requests for EmailProvidersCreate with any type of body
func NewEmailProvidersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/email-providers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailProvidersCheckAssociatedDomainCreateRequest calls the generic EmailProvidersCheckAssociatedDomainCreate builder with application/json body
func NewEmailProvidersCheckAssociatedDomainCreateRequest(server string, body EmailProvidersCheckAssociatedDomainCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailProvidersCheckAssociatedDomainCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEmailProvidersCheckAssociatedDomainCreateRequestWithFormdataBody calls the generic EmailProvidersCheckAssociatedDomainCreate builder with application/x-www-form-urlencoded body
func NewEmailProvidersCheckAssociatedDomainCreateRequestWithFormdataBody(server string, body EmailProvidersCheckAssociatedDomainCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEmailProvidersCheckAssociatedDomainCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEmailProvidersCheckAssociatedDomainCreateRequestWithBody generates requests for EmailProvidersCheckAssociatedDomainCreate with any type of body
func NewEmailProvidersCheckAssociatedDomainCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/email-providers/check_associated_domain/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailProvidersCheckConnectionCreateRequest calls the generic EmailProvidersCheckConnectionCreate builder with application/json body
func NewEmailProvidersCheckConnectionCreateRequest(server string, body EmailProvidersCheckConnectionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailProvidersCheckConnectionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEmailProvidersCheckConnectionCreateRequestWithFormdataBody calls the generic EmailProvidersCheckConnectionCreate builder with application/x-www-form-urlencoded body
func NewEmailProvidersCheckConnectionCreateRequestWithFormdataBody(server string, body EmailProvidersCheckConnectionCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEmailProvidersCheckConnectionCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEmailProvidersCheckConnectionCreateRequestWithBody generates requests for EmailProvidersCheckConnectionCreate with any type of body
func NewEmailProvidersCheckConnectionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/email-providers/check_connection/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailProvidersDestroyRequest generates requests for EmailProvidersDestroy
func NewEmailProvidersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/email-providers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailProvidersRetrieveRequest generates requests for EmailProvidersRetrieve
func NewEmailProvidersRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/email-providers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailProvidersPartialUpdateRequest calls the generic EmailProvidersPartialUpdate builder with application/json body
func NewEmailProvidersPartialUpdateRequest(server string, id int, body EmailProvidersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailProvidersPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEmailProvidersPartialUpdateRequestWithFormdataBody calls the generic EmailProvidersPartialUpdate builder with application/x-www-form-urlencoded body
func NewEmailProvidersPartialUpdateRequestWithFormdataBody(server string, id int, body EmailProvidersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEmailProvidersPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEmailProvidersPartialUpdateRequestWithBody generates requests for EmailProvidersPartialUpdate with any type of body
func NewEmailProvidersPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/email-providers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailProvidersUpdateRequest calls the generic EmailProvidersUpdate builder with application/json body
func NewEmailProvidersUpdateRequest(server string, id int, body EmailProvidersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailProvidersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEmailProvidersUpdateRequestWithFormdataBody calls the generic EmailProvidersUpdate builder with application/x-www-form-urlencoded body
func NewEmailProvidersUpdateRequestWithFormdataBody(server string, id int, body EmailProvidersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEmailProvidersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEmailProvidersUpdateRequestWithBody generates requests for EmailProvidersUpdate with any type of body
func NewEmailProvidersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/email-providers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailsListRequest generates requests for EmailsList
func NewEmailsListRequest(server string, params *EmailsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/emails/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailsRetrieveRequest generates requests for EmailsRetrieve
func NewEmailsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/emails/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdentitiesRetrieveRequest generates requests for IdentitiesRetrieve
func NewIdentitiesRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/identities/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdentitiesExportRetrieveRequest generates requests for IdentitiesExportRetrieve
func NewIdentitiesExportRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/identities/export/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdentitiesImportCreateRequestWithFormdataBody calls the generic IdentitiesImportCreate builder with application/x-www-form-urlencoded body
func NewIdentitiesImportCreateRequestWithFormdataBody(server string, body IdentitiesImportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewIdentitiesImportCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewIdentitiesImportCreateRequestWithBody generates requests for IdentitiesImportCreate with any type of body
func NewIdentitiesImportCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/identities/import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguagesRetrieveRequest generates requests for LanguagesRetrieve
func NewLanguagesRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogsAuditTrailListRequest generates requests for LogsAuditTrailList
func NewLogsAuditTrailListRequest(server string, params *LogsAuditTrailListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/logs/audit-trail/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogsAuditTrailRetrieveRequest generates requests for LogsAuditTrailRetrieve
func NewLogsAuditTrailRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/logs/audit-trail/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogsMessagesListRequest generates requests for LogsMessagesList
func NewLogsMessagesListRequest(server string, params *LogsMessagesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/logs/messages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogsMessagesRetrieveRequest generates requests for LogsMessagesRetrieve
func NewLogsMessagesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/logs/messages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMailboxesListRequest generates requests for MailboxesList
func NewMailboxesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/mailboxes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMailboxesRetrieveRequest generates requests for MailboxesRetrieve
func NewMailboxesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/mailboxes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMigrationsListRequest generates requests for MigrationsList
func NewMigrationsListRequest(server string, params *MigrationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/migrations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMigrationsDestroyRequest generates requests for MigrationsDestroy
func NewMigrationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/migrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMigrationsRetrieveRequest generates requests for MigrationsRetrieve
func NewMigrationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/migrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewParametersApplicationsListRequest generates requests for ParametersApplicationsList
func NewParametersApplicationsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/parameters/applications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewParametersStructureListRequest generates requests for ParametersStructureList
func NewParametersStructureListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/parameters/structure/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewParametersRetrieveRequest generates requests for ParametersRetrieve
func NewParametersRetrieveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/parameters/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewParametersUpdateRequest generates requests for ParametersUpdate
func NewParametersUpdateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/parameters/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPasswordResetCreateRequest generates requests for PasswordResetCreate
func NewPasswordResetCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/password_reset/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRelaydomainsListRequest generates requests for RelaydomainsList
func NewRelaydomainsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/relaydomains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRelaydomainsCreateRequest calls the generic RelaydomainsCreate builder with application/json body
func NewRelaydomainsCreateRequest(server string, body RelaydomainsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRelaydomainsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewRelaydomainsCreateRequestWithFormdataBody calls the generic RelaydomainsCreate builder with application/x-www-form-urlencoded body
func NewRelaydomainsCreateRequestWithFormdataBody(server string, body RelaydomainsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRelaydomainsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewRelaydomainsCreateRequestWithBody generates requests for RelaydomainsCreate with any type of body
func NewRelaydomainsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/relaydomains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRelaydomainsDestroyRequest generates requests for RelaydomainsDestroy
func NewRelaydomainsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/relaydomains/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRelaydomainsRetrieveRequest generates requests for RelaydomainsRetrieve
func NewRelaydomainsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/relaydomains/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRelaydomainsPartialUpdateRequest calls the generic RelaydomainsPartialUpdate builder with application/json body
func NewRelaydomainsPartialUpdateRequest(server string, id int, body RelaydomainsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRelaydomainsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRelaydomainsPartialUpdateRequestWithFormdataBody calls the generic RelaydomainsPartialUpdate builder with application/x-www-form-urlencoded body
func NewRelaydomainsPartialUpdateRequestWithFormdataBody(server string, id int, body RelaydomainsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRelaydomainsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewRelaydomainsPartialUpdateRequestWithBody generates requests for RelaydomainsPartialUpdate with any type of body
func NewRelaydomainsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/relaydomains/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRelaydomainsUpdateRequest calls the generic RelaydomainsUpdate builder with application/json body
func NewRelaydomainsUpdateRequest(server string, id int, body RelaydomainsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRelaydomainsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRelaydomainsUpdateRequestWithFormdataBody calls the generic RelaydomainsUpdate builder with application/x-www-form-urlencoded body
func NewRelaydomainsUpdateRequestWithFormdataBody(server string, id int, body RelaydomainsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRelaydomainsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewRelaydomainsUpdateRequestWithBody generates requests for RelaydomainsUpdate with any type of body
func NewRelaydomainsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/relaydomains/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetConfirmCreateRequest generates requests for ResetConfirmCreate
func NewResetConfirmCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/reset_confirm/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourcesRetrieveRequest generates requests for ResourcesRetrieve
func NewResourcesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/resources/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourcesPartialUpdateRequest calls the generic ResourcesPartialUpdate builder with application/json body
func NewResourcesPartialUpdateRequest(server string, id int, body ResourcesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResourcesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewResourcesPartialUpdateRequestWithFormdataBody calls the generic ResourcesPartialUpdate builder with application/x-www-form-urlencoded body
func NewResourcesPartialUpdateRequestWithFormdataBody(server string, id int, body ResourcesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewResourcesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewResourcesPartialUpdateRequestWithBody generates requests for ResourcesPartialUpdate with any type of body
func NewResourcesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/resources/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResourcesUpdateRequest calls the generic ResourcesUpdate builder with application/json body
func NewResourcesUpdateRequest(server string, id int, body ResourcesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResourcesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewResourcesUpdateRequestWithFormdataBody calls the generic ResourcesUpdate builder with application/x-www-form-urlencoded body
func NewResourcesUpdateRequestWithFormdataBody(server string, id int, body ResourcesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewResourcesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewResourcesUpdateRequestWithBody generates requests for ResourcesUpdate with any type of body
func NewResourcesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/resources/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSenderaddressesListRequest generates requests for SenderaddressesList
func NewSenderaddressesListRequest(server string, params *SenderaddressesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/senderaddresses/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Mailbox != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mailbox", runtime.ParamLocationQuery, *params.Mailbox); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSenderaddressesCreateRequest calls the generic SenderaddressesCreate builder with application/json body
func NewSenderaddressesCreateRequest(server string, body SenderaddressesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSenderaddressesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSenderaddressesCreateRequestWithFormdataBody calls the generic SenderaddressesCreate builder with application/x-www-form-urlencoded body
func NewSenderaddressesCreateRequestWithFormdataBody(server string, body SenderaddressesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSenderaddressesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSenderaddressesCreateRequestWithBody generates requests for SenderaddressesCreate with any type of body
func NewSenderaddressesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/senderaddresses/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSenderaddressesDestroyRequest generates requests for SenderaddressesDestroy
func NewSenderaddressesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/senderaddresses/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSenderaddressesRetrieveRequest generates requests for SenderaddressesRetrieve
func NewSenderaddressesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/senderaddresses/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSenderaddressesPartialUpdateRequest calls the generic SenderaddressesPartialUpdate builder with application/json body
func NewSenderaddressesPartialUpdateRequest(server string, id int, body SenderaddressesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSenderaddressesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSenderaddressesPartialUpdateRequestWithFormdataBody calls the generic SenderaddressesPartialUpdate builder with application/x-www-form-urlencoded body
func NewSenderaddressesPartialUpdateRequestWithFormdataBody(server string, id int, body SenderaddressesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSenderaddressesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSenderaddressesPartialUpdateRequestWithBody generates requests for SenderaddressesPartialUpdate with any type of body
func NewSenderaddressesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/senderaddresses/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSenderaddressesUpdateRequest calls the generic SenderaddressesUpdate builder with application/json body
func NewSenderaddressesUpdateRequest(server string, id int, body SenderaddressesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSenderaddressesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSenderaddressesUpdateRequestWithFormdataBody calls the generic SenderaddressesUpdate builder with application/x-www-form-urlencoded body
func NewSenderaddressesUpdateRequestWithFormdataBody(server string, id int, body SenderaddressesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSenderaddressesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSenderaddressesUpdateRequestWithBody generates requests for SenderaddressesUpdate with any type of body
func NewSenderaddressesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/senderaddresses/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSharedCalendarsListRequest generates requests for SharedCalendarsList
func NewSharedCalendarsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharedCalendarsCreateRequest calls the generic SharedCalendarsCreate builder with application/json body
func NewSharedCalendarsCreateRequest(server string, body SharedCalendarsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSharedCalendarsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSharedCalendarsCreateRequestWithFormdataBody calls the generic SharedCalendarsCreate builder with application/x-www-form-urlencoded body
func NewSharedCalendarsCreateRequestWithFormdataBody(server string, body SharedCalendarsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSharedCalendarsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSharedCalendarsCreateRequestWithBody generates requests for SharedCalendarsCreate with any type of body
func NewSharedCalendarsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSharedCalendarsCheckTokenCreateRequest calls the generic SharedCalendarsCheckTokenCreate builder with application/json body
func NewSharedCalendarsCheckTokenCreateRequest(server string, body SharedCalendarsCheckTokenCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSharedCalendarsCheckTokenCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSharedCalendarsCheckTokenCreateRequestWithFormdataBody calls the generic SharedCalendarsCheckTokenCreate builder with application/x-www-form-urlencoded body
func NewSharedCalendarsCheckTokenCreateRequestWithFormdataBody(server string, body SharedCalendarsCheckTokenCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSharedCalendarsCheckTokenCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSharedCalendarsCheckTokenCreateRequestWithBody generates requests for SharedCalendarsCheckTokenCreate with any type of body
func NewSharedCalendarsCheckTokenCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/check_token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSharedCalendarsEventsListRequest generates requests for SharedCalendarsEventsList
func NewSharedCalendarsEventsListRequest(server string, calendarPk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/events/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharedCalendarsEventsCreateRequest calls the generic SharedCalendarsEventsCreate builder with application/json body
func NewSharedCalendarsEventsCreateRequest(server string, calendarPk string, body SharedCalendarsEventsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSharedCalendarsEventsCreateRequestWithBody(server, calendarPk, "application/json", bodyReader)
}

// NewSharedCalendarsEventsCreateRequestWithFormdataBody calls the generic SharedCalendarsEventsCreate builder with application/x-www-form-urlencoded body
func NewSharedCalendarsEventsCreateRequestWithFormdataBody(server string, calendarPk string, body SharedCalendarsEventsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSharedCalendarsEventsCreateRequestWithBody(server, calendarPk, "application/x-www-form-urlencoded", bodyReader)
}

// NewSharedCalendarsEventsCreateRequestWithBody generates requests for SharedCalendarsEventsCreate with any type of body
func NewSharedCalendarsEventsCreateRequestWithBody(server string, calendarPk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/events/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSharedCalendarsEventsImportFromFileCreateRequest calls the generic SharedCalendarsEventsImportFromFileCreate builder with application/json body
func NewSharedCalendarsEventsImportFromFileCreateRequest(server string, calendarPk string, body SharedCalendarsEventsImportFromFileCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSharedCalendarsEventsImportFromFileCreateRequestWithBody(server, calendarPk, "application/json", bodyReader)
}

// NewSharedCalendarsEventsImportFromFileCreateRequestWithFormdataBody calls the generic SharedCalendarsEventsImportFromFileCreate builder with application/x-www-form-urlencoded body
func NewSharedCalendarsEventsImportFromFileCreateRequestWithFormdataBody(server string, calendarPk string, body SharedCalendarsEventsImportFromFileCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSharedCalendarsEventsImportFromFileCreateRequestWithBody(server, calendarPk, "application/x-www-form-urlencoded", bodyReader)
}

// NewSharedCalendarsEventsImportFromFileCreateRequestWithBody generates requests for SharedCalendarsEventsImportFromFileCreate with any type of body
func NewSharedCalendarsEventsImportFromFileCreateRequestWithBody(server string, calendarPk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/events/import_from_file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSharedCalendarsEventsDestroyRequest generates requests for SharedCalendarsEventsDestroy
func NewSharedCalendarsEventsDestroyRequest(server string, calendarPk string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/events/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharedCalendarsEventsRetrieveRequest generates requests for SharedCalendarsEventsRetrieve
func NewSharedCalendarsEventsRetrieveRequest(server string, calendarPk string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/events/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharedCalendarsEventsPartialUpdateRequest calls the generic SharedCalendarsEventsPartialUpdate builder with application/json body
func NewSharedCalendarsEventsPartialUpdateRequest(server string, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSharedCalendarsEventsPartialUpdateRequestWithBody(server, calendarPk, id, "application/json", bodyReader)
}

// NewSharedCalendarsEventsPartialUpdateRequestWithFormdataBody calls the generic SharedCalendarsEventsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSharedCalendarsEventsPartialUpdateRequestWithFormdataBody(server string, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSharedCalendarsEventsPartialUpdateRequestWithBody(server, calendarPk, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSharedCalendarsEventsPartialUpdateRequestWithBody generates requests for SharedCalendarsEventsPartialUpdate with any type of body
func NewSharedCalendarsEventsPartialUpdateRequestWithBody(server string, calendarPk string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/events/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSharedCalendarsEventsUpdateRequest calls the generic SharedCalendarsEventsUpdate builder with application/json body
func NewSharedCalendarsEventsUpdateRequest(server string, calendarPk string, id string, body SharedCalendarsEventsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSharedCalendarsEventsUpdateRequestWithBody(server, calendarPk, id, "application/json", bodyReader)
}

// NewSharedCalendarsEventsUpdateRequestWithFormdataBody calls the generic SharedCalendarsEventsUpdate builder with application/x-www-form-urlencoded body
func NewSharedCalendarsEventsUpdateRequestWithFormdataBody(server string, calendarPk string, id string, body SharedCalendarsEventsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSharedCalendarsEventsUpdateRequestWithBody(server, calendarPk, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSharedCalendarsEventsUpdateRequestWithBody generates requests for SharedCalendarsEventsUpdate with any type of body
func NewSharedCalendarsEventsUpdateRequestWithBody(server string, calendarPk string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/events/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSharedCalendarsDestroyRequest generates requests for SharedCalendarsDestroy
func NewSharedCalendarsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharedCalendarsRetrieveRequest generates requests for SharedCalendarsRetrieve
func NewSharedCalendarsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharedCalendarsPartialUpdateRequest calls the generic SharedCalendarsPartialUpdate builder with application/json body
func NewSharedCalendarsPartialUpdateRequest(server string, id int, body SharedCalendarsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSharedCalendarsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSharedCalendarsPartialUpdateRequestWithFormdataBody calls the generic SharedCalendarsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSharedCalendarsPartialUpdateRequestWithFormdataBody(server string, id int, body SharedCalendarsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSharedCalendarsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSharedCalendarsPartialUpdateRequestWithBody generates requests for SharedCalendarsPartialUpdate with any type of body
func NewSharedCalendarsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSharedCalendarsUpdateRequest calls the generic SharedCalendarsUpdate builder with application/json body
func NewSharedCalendarsUpdateRequest(server string, id int, body SharedCalendarsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSharedCalendarsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSharedCalendarsUpdateRequestWithFormdataBody calls the generic SharedCalendarsUpdate builder with application/x-www-form-urlencoded body
func NewSharedCalendarsUpdateRequestWithFormdataBody(server string, id int, body SharedCalendarsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSharedCalendarsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSharedCalendarsUpdateRequestWithBody generates requests for SharedCalendarsUpdate with any type of body
func NewSharedCalendarsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/shared-calendars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSmsTotpCreateRequest generates requests for SmsTotpCreate
func NewSmsTotpCreateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sms_totp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatisticsListRequest generates requests for StatisticsList
func NewStatisticsListRequest(server string, params *StatisticsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/statistics/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Graphic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "graphic", runtime.ParamLocationQuery, *params.Graphic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gset", runtime.ParamLocationQuery, params.Gset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Searchquery != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchquery", runtime.ParamLocationQuery, *params.Searchquery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTokenCreateRequest calls the generic TokenCreate builder with application/json body
func NewTokenCreateRequest(server string, body TokenCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTokenCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenCreateRequestWithFormdataBody calls the generic TokenCreate builder with application/x-www-form-urlencoded body
func NewTokenCreateRequestWithFormdataBody(server string, body TokenCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTokenCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTokenCreateRequestWithBody generates requests for TokenCreate with any type of body
func NewTokenCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTokenRefreshCreateRequest calls the generic TokenRefreshCreate builder with application/json body
func NewTokenRefreshCreateRequest(server string, body TokenRefreshCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTokenRefreshCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenRefreshCreateRequestWithFormdataBody calls the generic TokenRefreshCreate builder with application/x-www-form-urlencoded body
func NewTokenRefreshCreateRequestWithFormdataBody(server string, body TokenRefreshCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTokenRefreshCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTokenRefreshCreateRequestWithBody generates requests for TokenRefreshCreate with any type of body
func NewTokenRefreshCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/token/refresh/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTransportsListRequest generates requests for TransportsList
func NewTransportsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/transports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserCalendarsListRequest generates requests for UserCalendarsList
func NewUserCalendarsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserCalendarsCreateRequest calls the generic UserCalendarsCreate builder with application/json body
func NewUserCalendarsCreateRequest(server string, body UserCalendarsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCalendarsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUserCalendarsCreateRequestWithFormdataBody calls the generic UserCalendarsCreate builder with application/x-www-form-urlencoded body
func NewUserCalendarsCreateRequestWithFormdataBody(server string, body UserCalendarsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserCalendarsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserCalendarsCreateRequestWithBody generates requests for UserCalendarsCreate with any type of body
func NewUserCalendarsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserCalendarsCheckTokenCreateRequest calls the generic UserCalendarsCheckTokenCreate builder with application/json body
func NewUserCalendarsCheckTokenCreateRequest(server string, body UserCalendarsCheckTokenCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCalendarsCheckTokenCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUserCalendarsCheckTokenCreateRequestWithFormdataBody calls the generic UserCalendarsCheckTokenCreate builder with application/x-www-form-urlencoded body
func NewUserCalendarsCheckTokenCreateRequestWithFormdataBody(server string, body UserCalendarsCheckTokenCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserCalendarsCheckTokenCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserCalendarsCheckTokenCreateRequestWithBody generates requests for UserCalendarsCheckTokenCreate with any type of body
func NewUserCalendarsCheckTokenCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/check_token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserCalendarsEventsListRequest generates requests for UserCalendarsEventsList
func NewUserCalendarsEventsListRequest(server string, calendarPk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/events/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserCalendarsEventsCreateRequest calls the generic UserCalendarsEventsCreate builder with application/json body
func NewUserCalendarsEventsCreateRequest(server string, calendarPk string, body UserCalendarsEventsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCalendarsEventsCreateRequestWithBody(server, calendarPk, "application/json", bodyReader)
}

// NewUserCalendarsEventsCreateRequestWithFormdataBody calls the generic UserCalendarsEventsCreate builder with application/x-www-form-urlencoded body
func NewUserCalendarsEventsCreateRequestWithFormdataBody(server string, calendarPk string, body UserCalendarsEventsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserCalendarsEventsCreateRequestWithBody(server, calendarPk, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserCalendarsEventsCreateRequestWithBody generates requests for UserCalendarsEventsCreate with any type of body
func NewUserCalendarsEventsCreateRequestWithBody(server string, calendarPk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/events/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserCalendarsEventsImportFromFileCreateRequest calls the generic UserCalendarsEventsImportFromFileCreate builder with application/json body
func NewUserCalendarsEventsImportFromFileCreateRequest(server string, calendarPk string, body UserCalendarsEventsImportFromFileCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCalendarsEventsImportFromFileCreateRequestWithBody(server, calendarPk, "application/json", bodyReader)
}

// NewUserCalendarsEventsImportFromFileCreateRequestWithFormdataBody calls the generic UserCalendarsEventsImportFromFileCreate builder with application/x-www-form-urlencoded body
func NewUserCalendarsEventsImportFromFileCreateRequestWithFormdataBody(server string, calendarPk string, body UserCalendarsEventsImportFromFileCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserCalendarsEventsImportFromFileCreateRequestWithBody(server, calendarPk, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserCalendarsEventsImportFromFileCreateRequestWithBody generates requests for UserCalendarsEventsImportFromFileCreate with any type of body
func NewUserCalendarsEventsImportFromFileCreateRequestWithBody(server string, calendarPk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/events/import_from_file/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserCalendarsEventsDestroyRequest generates requests for UserCalendarsEventsDestroy
func NewUserCalendarsEventsDestroyRequest(server string, calendarPk string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/events/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserCalendarsEventsRetrieveRequest generates requests for UserCalendarsEventsRetrieve
func NewUserCalendarsEventsRetrieveRequest(server string, calendarPk string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/events/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserCalendarsEventsPartialUpdateRequest calls the generic UserCalendarsEventsPartialUpdate builder with application/json body
func NewUserCalendarsEventsPartialUpdateRequest(server string, calendarPk string, id string, body UserCalendarsEventsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCalendarsEventsPartialUpdateRequestWithBody(server, calendarPk, id, "application/json", bodyReader)
}

// NewUserCalendarsEventsPartialUpdateRequestWithFormdataBody calls the generic UserCalendarsEventsPartialUpdate builder with application/x-www-form-urlencoded body
func NewUserCalendarsEventsPartialUpdateRequestWithFormdataBody(server string, calendarPk string, id string, body UserCalendarsEventsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserCalendarsEventsPartialUpdateRequestWithBody(server, calendarPk, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserCalendarsEventsPartialUpdateRequestWithBody generates requests for UserCalendarsEventsPartialUpdate with any type of body
func NewUserCalendarsEventsPartialUpdateRequestWithBody(server string, calendarPk string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/events/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserCalendarsEventsUpdateRequest calls the generic UserCalendarsEventsUpdate builder with application/json body
func NewUserCalendarsEventsUpdateRequest(server string, calendarPk string, id string, body UserCalendarsEventsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCalendarsEventsUpdateRequestWithBody(server, calendarPk, id, "application/json", bodyReader)
}

// NewUserCalendarsEventsUpdateRequestWithFormdataBody calls the generic UserCalendarsEventsUpdate builder with application/x-www-form-urlencoded body
func NewUserCalendarsEventsUpdateRequestWithFormdataBody(server string, calendarPk string, id string, body UserCalendarsEventsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserCalendarsEventsUpdateRequestWithBody(server, calendarPk, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserCalendarsEventsUpdateRequestWithBody generates requests for UserCalendarsEventsUpdate with any type of body
func NewUserCalendarsEventsUpdateRequestWithBody(server string, calendarPk string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "calendar_pk", runtime.ParamLocationPath, calendarPk)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/events/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserCalendarsDestroyRequest generates requests for UserCalendarsDestroy
func NewUserCalendarsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserCalendarsRetrieveRequest generates requests for UserCalendarsRetrieve
func NewUserCalendarsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserCalendarsPartialUpdateRequest calls the generic UserCalendarsPartialUpdate builder with application/json body
func NewUserCalendarsPartialUpdateRequest(server string, id int, body UserCalendarsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCalendarsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUserCalendarsPartialUpdateRequestWithFormdataBody calls the generic UserCalendarsPartialUpdate builder with application/x-www-form-urlencoded body
func NewUserCalendarsPartialUpdateRequestWithFormdataBody(server string, id int, body UserCalendarsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserCalendarsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserCalendarsPartialUpdateRequestWithBody generates requests for UserCalendarsPartialUpdate with any type of body
func NewUserCalendarsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserCalendarsUpdateRequest calls the generic UserCalendarsUpdate builder with application/json body
func NewUserCalendarsUpdateRequest(server string, id int, body UserCalendarsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserCalendarsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUserCalendarsUpdateRequestWithFormdataBody calls the generic UserCalendarsUpdate builder with application/x-www-form-urlencoded body
func NewUserCalendarsUpdateRequestWithFormdataBody(server string, id int, body UserCalendarsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserCalendarsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserCalendarsUpdateRequestWithBody generates requests for UserCalendarsUpdate with any type of body
func NewUserCalendarsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user-calendars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccessrulesListWithResponse request
	AccessrulesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccessrulesListResponse, error)

	// AccessrulesCreateWithBodyWithResponse request with any body
	AccessrulesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessrulesCreateResponse, error)

	AccessrulesCreateWithResponse(ctx context.Context, body AccessrulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesCreateResponse, error)

	AccessrulesCreateWithFormdataBodyWithResponse(ctx context.Context, body AccessrulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesCreateResponse, error)

	// AccessrulesDestroyWithResponse request
	AccessrulesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AccessrulesDestroyResponse, error)

	// AccessrulesRetrieveWithResponse request
	AccessrulesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AccessrulesRetrieveResponse, error)

	// AccessrulesPartialUpdateWithBodyWithResponse request with any body
	AccessrulesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessrulesPartialUpdateResponse, error)

	AccessrulesPartialUpdateWithResponse(ctx context.Context, id int, body AccessrulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesPartialUpdateResponse, error)

	AccessrulesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccessrulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesPartialUpdateResponse, error)

	// AccessrulesUpdateWithBodyWithResponse request with any body
	AccessrulesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessrulesUpdateResponse, error)

	AccessrulesUpdateWithResponse(ctx context.Context, id int, body AccessrulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesUpdateResponse, error)

	AccessrulesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccessrulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesUpdateResponse, error)

	// AccountApiTokenDestroyWithResponse request
	AccountApiTokenDestroyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountApiTokenDestroyResponse, error)

	// AccountApiTokenRetrieveWithResponse request
	AccountApiTokenRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountApiTokenRetrieveResponse, error)

	// AccountApiTokenCreateWithResponse request
	AccountApiTokenCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountApiTokenCreateResponse, error)

	// AccountForwardRetrieveWithResponse request
	AccountForwardRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountForwardRetrieveResponse, error)

	// AccountForwardCreateWithResponse request
	AccountForwardCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountForwardCreateResponse, error)

	// AccountMeRetrieveWithResponse request
	AccountMeRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountMeRetrieveResponse, error)

	// AccountMePasswordCreateWithBodyWithResponse request with any body
	AccountMePasswordCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountMePasswordCreateResponse, error)

	AccountMePasswordCreateWithResponse(ctx context.Context, body AccountMePasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountMePasswordCreateResponse, error)

	AccountMePasswordCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountMePasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountMePasswordCreateResponse, error)

	// AccountTfaDisableCreateWithResponse request
	AccountTfaDisableCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaDisableCreateResponse, error)

	// AccountTfaResetCodesCreateWithResponse request
	AccountTfaResetCodesCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaResetCodesCreateResponse, error)

	// AccountTfaSetupCreateWithResponse request
	AccountTfaSetupCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaSetupCreateResponse, error)

	// AccountTfaSetupCheckCreateWithBodyWithResponse request with any body
	AccountTfaSetupCheckCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountTfaSetupCheckCreateResponse, error)

	AccountTfaSetupCheckCreateWithResponse(ctx context.Context, body AccountTfaSetupCheckCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountTfaSetupCheckCreateResponse, error)

	AccountTfaSetupCheckCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountTfaSetupCheckCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountTfaSetupCheckCreateResponse, error)

	// AccountTfaSetupKeyRetrieveWithResponse request
	AccountTfaSetupKeyRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaSetupKeyRetrieveResponse, error)

	// AccountTfaVerifyCreateWithResponse request
	AccountTfaVerifyCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaVerifyCreateResponse, error)

	// AccountsListWithResponse request
	AccountsListWithResponse(ctx context.Context, params *AccountsListParams, reqEditors ...RequestEditorFn) (*AccountsListResponse, error)

	// AccountsCreateWithBodyWithResponse request with any body
	AccountsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsCreateResponse, error)

	AccountsCreateWithResponse(ctx context.Context, body AccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsCreateResponse, error)

	AccountsCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsCreateResponse, error)

	// AccountsExistsRetrieveWithResponse request
	AccountsExistsRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsExistsRetrieveResponse, error)

	// AccountsRandomPasswordRetrieveWithResponse request
	AccountsRandomPasswordRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsRandomPasswordRetrieveResponse, error)

	// AccountsResetPasswordCreateWithBodyWithResponse request with any body
	AccountsResetPasswordCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsResetPasswordCreateResponse, error)

	AccountsResetPasswordCreateWithResponse(ctx context.Context, body AccountsResetPasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsResetPasswordCreateResponse, error)

	AccountsResetPasswordCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountsResetPasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsResetPasswordCreateResponse, error)

	// AccountsValidateCreateWithBodyWithResponse request with any body
	AccountsValidateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsValidateCreateResponse, error)

	AccountsValidateCreateWithResponse(ctx context.Context, body AccountsValidateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsValidateCreateResponse, error)

	AccountsValidateCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountsValidateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsValidateCreateResponse, error)

	// AccountsDestroyWithResponse request
	AccountsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AccountsDestroyResponse, error)

	// AccountsRetrieveWithResponse request
	AccountsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AccountsRetrieveResponse, error)

	// AccountsPartialUpdateWithBodyWithResponse request with any body
	AccountsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsPartialUpdateResponse, error)

	AccountsPartialUpdateWithResponse(ctx context.Context, id int, body AccountsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsPartialUpdateResponse, error)

	AccountsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccountsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsPartialUpdateResponse, error)

	// AccountsUpdateWithBodyWithResponse request with any body
	AccountsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error)

	AccountsUpdateWithResponse(ctx context.Context, id int, body AccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error)

	AccountsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccountsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error)

	// AccountsDeleteCreateWithBodyWithResponse request with any body
	AccountsDeleteCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsDeleteCreateResponse, error)

	AccountsDeleteCreateWithResponse(ctx context.Context, id int, body AccountsDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsDeleteCreateResponse, error)

	AccountsDeleteCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccountsDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsDeleteCreateResponse, error)

	// AccountsPasswordUpdateWithBodyWithResponse request with any body
	AccountsPasswordUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsPasswordUpdateResponse, error)

	AccountsPasswordUpdateWithResponse(ctx context.Context, id int, body AccountsPasswordUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsPasswordUpdateResponse, error)

	AccountsPasswordUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccountsPasswordUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsPasswordUpdateResponse, error)

	// AddressBooksDefaultRetrieveWithResponse request
	AddressBooksDefaultRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AddressBooksDefaultRetrieveResponse, error)

	// AddressBooksSyncFromCdavRetrieveWithResponse request
	AddressBooksSyncFromCdavRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AddressBooksSyncFromCdavRetrieveResponse, error)

	// AddressBooksSyncToCdavRetrieveWithResponse request
	AddressBooksSyncToCdavRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AddressBooksSyncToCdavRetrieveResponse, error)

	// AdminComponentsListWithResponse request
	AdminComponentsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminComponentsListResponse, error)

	// AlarmsListWithResponse request
	AlarmsListWithResponse(ctx context.Context, params *AlarmsListParams, reqEditors ...RequestEditorFn) (*AlarmsListResponse, error)

	// AlarmsBulkDeleteDestroyWithResponse request
	AlarmsBulkDeleteDestroyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlarmsBulkDeleteDestroyResponse, error)

	// AlarmsDestroyWithResponse request
	AlarmsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AlarmsDestroyResponse, error)

	// AlarmsRetrieveWithResponse request
	AlarmsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AlarmsRetrieveResponse, error)

	// AlarmsSwitchPartialUpdateWithBodyWithResponse request with any body
	AlarmsSwitchPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlarmsSwitchPartialUpdateResponse, error)

	AlarmsSwitchPartialUpdateWithResponse(ctx context.Context, id int, body AlarmsSwitchPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AlarmsSwitchPartialUpdateResponse, error)

	AlarmsSwitchPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AlarmsSwitchPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AlarmsSwitchPartialUpdateResponse, error)

	// AliasesListWithResponse request
	AliasesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AliasesListResponse, error)

	// AliasesCreateWithBodyWithResponse request with any body
	AliasesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AliasesCreateResponse, error)

	AliasesCreateWithResponse(ctx context.Context, body AliasesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AliasesCreateResponse, error)

	AliasesCreateWithFormdataBodyWithResponse(ctx context.Context, body AliasesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AliasesCreateResponse, error)

	// AliasesRandomAddressRetrieveWithResponse request
	AliasesRandomAddressRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AliasesRandomAddressRetrieveResponse, error)

	// AliasesValidateCreateWithBodyWithResponse request with any body
	AliasesValidateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AliasesValidateCreateResponse, error)

	AliasesValidateCreateWithResponse(ctx context.Context, body AliasesValidateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AliasesValidateCreateResponse, error)

	AliasesValidateCreateWithFormdataBodyWithResponse(ctx context.Context, body AliasesValidateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AliasesValidateCreateResponse, error)

	// AliasesDestroyWithResponse request
	AliasesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AliasesDestroyResponse, error)

	// AliasesRetrieveWithResponse request
	AliasesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AliasesRetrieveResponse, error)

	// AliasesPartialUpdateWithBodyWithResponse request with any body
	AliasesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AliasesPartialUpdateResponse, error)

	AliasesPartialUpdateWithResponse(ctx context.Context, id int, body AliasesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AliasesPartialUpdateResponse, error)

	AliasesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AliasesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AliasesPartialUpdateResponse, error)

	// AliasesUpdateWithBodyWithResponse request with any body
	AliasesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AliasesUpdateResponse, error)

	AliasesUpdateWithResponse(ctx context.Context, id int, body AliasesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AliasesUpdateResponse, error)

	AliasesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AliasesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AliasesUpdateResponse, error)

	// ArmessagesListWithResponse request
	ArmessagesListWithResponse(ctx context.Context, params *ArmessagesListParams, reqEditors ...RequestEditorFn) (*ArmessagesListResponse, error)

	// ArmessagesCreateWithBodyWithResponse request with any body
	ArmessagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArmessagesCreateResponse, error)

	ArmessagesCreateWithResponse(ctx context.Context, body ArmessagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesCreateResponse, error)

	ArmessagesCreateWithFormdataBodyWithResponse(ctx context.Context, body ArmessagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesCreateResponse, error)

	// ArmessagesRetrieveWithResponse request
	ArmessagesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ArmessagesRetrieveResponse, error)

	// ArmessagesPartialUpdateWithBodyWithResponse request with any body
	ArmessagesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArmessagesPartialUpdateResponse, error)

	ArmessagesPartialUpdateWithResponse(ctx context.Context, id int, body ArmessagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesPartialUpdateResponse, error)

	ArmessagesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ArmessagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesPartialUpdateResponse, error)

	// ArmessagesUpdateWithBodyWithResponse request with any body
	ArmessagesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArmessagesUpdateResponse, error)

	ArmessagesUpdateWithResponse(ctx context.Context, id int, body ArmessagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesUpdateResponse, error)

	ArmessagesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ArmessagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesUpdateResponse, error)

	// AttendeesListWithResponse request
	AttendeesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AttendeesListResponse, error)

	// AttendeesRetrieveWithResponse request
	AttendeesRetrieveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AttendeesRetrieveResponse, error)

	// CategoriesListWithResponse request
	CategoriesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CategoriesListResponse, error)

	// CategoriesCreateWithBodyWithResponse request with any body
	CategoriesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoriesCreateResponse, error)

	CategoriesCreateWithResponse(ctx context.Context, body CategoriesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoriesCreateResponse, error)

	CategoriesCreateWithFormdataBodyWithResponse(ctx context.Context, body CategoriesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CategoriesCreateResponse, error)

	// CategoriesDestroyWithResponse request
	CategoriesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CategoriesDestroyResponse, error)

	// CategoriesRetrieveWithResponse request
	CategoriesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CategoriesRetrieveResponse, error)

	// CategoriesPartialUpdateWithBodyWithResponse request with any body
	CategoriesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoriesPartialUpdateResponse, error)

	CategoriesPartialUpdateWithResponse(ctx context.Context, id int, body CategoriesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoriesPartialUpdateResponse, error)

	CategoriesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CategoriesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CategoriesPartialUpdateResponse, error)

	// CategoriesUpdateWithBodyWithResponse request with any body
	CategoriesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoriesUpdateResponse, error)

	CategoriesUpdateWithResponse(ctx context.Context, id int, body CategoriesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoriesUpdateResponse, error)

	CategoriesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CategoriesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CategoriesUpdateResponse, error)

	// ContactsListWithResponse request
	ContactsListWithResponse(ctx context.Context, params *ContactsListParams, reqEditors ...RequestEditorFn) (*ContactsListResponse, error)

	// ContactsCreateWithBodyWithResponse request with any body
	ContactsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactsCreateResponse, error)

	ContactsCreateWithResponse(ctx context.Context, body ContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContactsCreateResponse, error)

	ContactsCreateWithFormdataBodyWithResponse(ctx context.Context, body ContactsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContactsCreateResponse, error)

	// ContactsDestroyWithResponse request
	ContactsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ContactsDestroyResponse, error)

	// ContactsRetrieveWithResponse request
	ContactsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ContactsRetrieveResponse, error)

	// ContactsPartialUpdateWithBodyWithResponse request with any body
	ContactsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactsPartialUpdateResponse, error)

	ContactsPartialUpdateWithResponse(ctx context.Context, id int, body ContactsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContactsPartialUpdateResponse, error)

	ContactsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ContactsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContactsPartialUpdateResponse, error)

	// ContactsUpdateWithBodyWithResponse request with any body
	ContactsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactsUpdateResponse, error)

	ContactsUpdateWithResponse(ctx context.Context, id int, body ContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContactsUpdateResponse, error)

	ContactsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ContactsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContactsUpdateResponse, error)

	// CredentialsRetrieveWithResponse request
	CredentialsRetrieveWithResponse(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*CredentialsRetrieveResponse, error)

	// DomainaliasesListWithResponse request
	DomainaliasesListWithResponse(ctx context.Context, params *DomainaliasesListParams, reqEditors ...RequestEditorFn) (*DomainaliasesListResponse, error)

	// DomainaliasesCreateWithBodyWithResponse request with any body
	DomainaliasesCreateWithBodyWithResponse(ctx context.Context, params *DomainaliasesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainaliasesCreateResponse, error)

	DomainaliasesCreateWithResponse(ctx context.Context, params *DomainaliasesCreateParams, body DomainaliasesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesCreateResponse, error)

	DomainaliasesCreateWithFormdataBodyWithResponse(ctx context.Context, params *DomainaliasesCreateParams, body DomainaliasesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesCreateResponse, error)

	// DomainaliasesDestroyWithResponse request
	DomainaliasesDestroyWithResponse(ctx context.Context, id int, params *DomainaliasesDestroyParams, reqEditors ...RequestEditorFn) (*DomainaliasesDestroyResponse, error)

	// DomainaliasesRetrieveWithResponse request
	DomainaliasesRetrieveWithResponse(ctx context.Context, id int, params *DomainaliasesRetrieveParams, reqEditors ...RequestEditorFn) (*DomainaliasesRetrieveResponse, error)

	// DomainaliasesPartialUpdateWithBodyWithResponse request with any body
	DomainaliasesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainaliasesPartialUpdateResponse, error)

	DomainaliasesPartialUpdateWithResponse(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesPartialUpdateResponse, error)

	DomainaliasesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesPartialUpdateResponse, error)

	// DomainaliasesUpdateWithBodyWithResponse request with any body
	DomainaliasesUpdateWithBodyWithResponse(ctx context.Context, id int, params *DomainaliasesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainaliasesUpdateResponse, error)

	DomainaliasesUpdateWithResponse(ctx context.Context, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesUpdateResponse, error)

	DomainaliasesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesUpdateResponse, error)

	// DomainsListWithResponse request
	DomainsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DomainsListResponse, error)

	// DomainsCreateWithBodyWithResponse request with any body
	DomainsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error)

	DomainsCreateWithResponse(ctx context.Context, body DomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error)

	DomainsCreateWithFormdataBodyWithResponse(ctx context.Context, body DomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error)

	// DomainsExportRetrieveWithResponse request
	DomainsExportRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DomainsExportRetrieveResponse, error)

	// DomainsImportCreateWithBodyWithResponse request with any body
	DomainsImportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsImportCreateResponse, error)

	DomainsImportCreateWithFormdataBodyWithResponse(ctx context.Context, body DomainsImportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsImportCreateResponse, error)

	// DomainsRetrieveWithResponse request
	DomainsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DomainsRetrieveResponse, error)

	// DomainsPartialUpdateWithBodyWithResponse request with any body
	DomainsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error)

	DomainsPartialUpdateWithResponse(ctx context.Context, id int, body DomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error)

	DomainsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error)

	// DomainsUpdateWithBodyWithResponse request with any body
	DomainsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error)

	DomainsUpdateWithResponse(ctx context.Context, id int, body DomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error)

	DomainsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error)

	// DomainsAdministratorsRetrieveWithResponse request
	DomainsAdministratorsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DomainsAdministratorsRetrieveResponse, error)

	// DomainsAdministratorsAddCreateWithBodyWithResponse request with any body
	DomainsAdministratorsAddCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsAdministratorsAddCreateResponse, error)

	DomainsAdministratorsAddCreateWithResponse(ctx context.Context, id int, body DomainsAdministratorsAddCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsAdministratorsAddCreateResponse, error)

	DomainsAdministratorsAddCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsAdministratorsAddCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsAdministratorsAddCreateResponse, error)

	// DomainsAdministratorsRemoveCreateWithBodyWithResponse request with any body
	DomainsAdministratorsRemoveCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsAdministratorsRemoveCreateResponse, error)

	DomainsAdministratorsRemoveCreateWithResponse(ctx context.Context, id int, body DomainsAdministratorsRemoveCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsAdministratorsRemoveCreateResponse, error)

	DomainsAdministratorsRemoveCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsAdministratorsRemoveCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsAdministratorsRemoveCreateResponse, error)

	// DomainsDeleteCreateWithBodyWithResponse request with any body
	DomainsDeleteCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsDeleteCreateResponse, error)

	DomainsDeleteCreateWithResponse(ctx context.Context, id int, body DomainsDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsDeleteCreateResponse, error)

	DomainsDeleteCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsDeleteCreateResponse, error)

	// DomainsDmarcAlignmentStatsRetrieveWithResponse request
	DomainsDmarcAlignmentStatsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DomainsDmarcAlignmentStatsRetrieveResponse, error)

	// DomainsDnsDetailRetrieveWithResponse request
	DomainsDnsDetailRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DomainsDnsDetailRetrieveResponse, error)

	// EmailProvidersListWithResponse request
	EmailProvidersListWithResponse(ctx context.Context, params *EmailProvidersListParams, reqEditors ...RequestEditorFn) (*EmailProvidersListResponse, error)

	// EmailProvidersCreateWithBodyWithResponse request with any body
	EmailProvidersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersCreateResponse, error)

	EmailProvidersCreateWithResponse(ctx context.Context, body EmailProvidersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCreateResponse, error)

	EmailProvidersCreateWithFormdataBodyWithResponse(ctx context.Context, body EmailProvidersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCreateResponse, error)

	// EmailProvidersCheckAssociatedDomainCreateWithBodyWithResponse request with any body
	EmailProvidersCheckAssociatedDomainCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersCheckAssociatedDomainCreateResponse, error)

	EmailProvidersCheckAssociatedDomainCreateWithResponse(ctx context.Context, body EmailProvidersCheckAssociatedDomainCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCheckAssociatedDomainCreateResponse, error)

	EmailProvidersCheckAssociatedDomainCreateWithFormdataBodyWithResponse(ctx context.Context, body EmailProvidersCheckAssociatedDomainCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCheckAssociatedDomainCreateResponse, error)

	// EmailProvidersCheckConnectionCreateWithBodyWithResponse request with any body
	EmailProvidersCheckConnectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersCheckConnectionCreateResponse, error)

	EmailProvidersCheckConnectionCreateWithResponse(ctx context.Context, body EmailProvidersCheckConnectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCheckConnectionCreateResponse, error)

	EmailProvidersCheckConnectionCreateWithFormdataBodyWithResponse(ctx context.Context, body EmailProvidersCheckConnectionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCheckConnectionCreateResponse, error)

	// EmailProvidersDestroyWithResponse request
	EmailProvidersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EmailProvidersDestroyResponse, error)

	// EmailProvidersRetrieveWithResponse request
	EmailProvidersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EmailProvidersRetrieveResponse, error)

	// EmailProvidersPartialUpdateWithBodyWithResponse request with any body
	EmailProvidersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersPartialUpdateResponse, error)

	EmailProvidersPartialUpdateWithResponse(ctx context.Context, id int, body EmailProvidersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersPartialUpdateResponse, error)

	EmailProvidersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EmailProvidersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersPartialUpdateResponse, error)

	// EmailProvidersUpdateWithBodyWithResponse request with any body
	EmailProvidersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersUpdateResponse, error)

	EmailProvidersUpdateWithResponse(ctx context.Context, id int, body EmailProvidersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersUpdateResponse, error)

	EmailProvidersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EmailProvidersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersUpdateResponse, error)

	// EmailsListWithResponse request
	EmailsListWithResponse(ctx context.Context, params *EmailsListParams, reqEditors ...RequestEditorFn) (*EmailsListResponse, error)

	// EmailsRetrieveWithResponse request
	EmailsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EmailsRetrieveResponse, error)

	// IdentitiesRetrieveWithResponse request
	IdentitiesRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IdentitiesRetrieveResponse, error)

	// IdentitiesExportRetrieveWithResponse request
	IdentitiesExportRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IdentitiesExportRetrieveResponse, error)

	// IdentitiesImportCreateWithBodyWithResponse request with any body
	IdentitiesImportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdentitiesImportCreateResponse, error)

	IdentitiesImportCreateWithFormdataBodyWithResponse(ctx context.Context, body IdentitiesImportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*IdentitiesImportCreateResponse, error)

	// LanguagesRetrieveWithResponse request
	LanguagesRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LanguagesRetrieveResponse, error)

	// LogsAuditTrailListWithResponse request
	LogsAuditTrailListWithResponse(ctx context.Context, params *LogsAuditTrailListParams, reqEditors ...RequestEditorFn) (*LogsAuditTrailListResponse, error)

	// LogsAuditTrailRetrieveWithResponse request
	LogsAuditTrailRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LogsAuditTrailRetrieveResponse, error)

	// LogsMessagesListWithResponse request
	LogsMessagesListWithResponse(ctx context.Context, params *LogsMessagesListParams, reqEditors ...RequestEditorFn) (*LogsMessagesListResponse, error)

	// LogsMessagesRetrieveWithResponse request
	LogsMessagesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LogsMessagesRetrieveResponse, error)

	// MailboxesListWithResponse request
	MailboxesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MailboxesListResponse, error)

	// MailboxesRetrieveWithResponse request
	MailboxesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailboxesRetrieveResponse, error)

	// MigrationsListWithResponse request
	MigrationsListWithResponse(ctx context.Context, params *MigrationsListParams, reqEditors ...RequestEditorFn) (*MigrationsListResponse, error)

	// MigrationsDestroyWithResponse request
	MigrationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MigrationsDestroyResponse, error)

	// MigrationsRetrieveWithResponse request
	MigrationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MigrationsRetrieveResponse, error)

	// ParametersApplicationsListWithResponse request
	ParametersApplicationsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ParametersApplicationsListResponse, error)

	// ParametersStructureListWithResponse request
	ParametersStructureListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ParametersStructureListResponse, error)

	// ParametersRetrieveWithResponse request
	ParametersRetrieveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ParametersRetrieveResponse, error)

	// ParametersUpdateWithResponse request
	ParametersUpdateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ParametersUpdateResponse, error)

	// PasswordResetCreateWithResponse request
	PasswordResetCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PasswordResetCreateResponse, error)

	// RelaydomainsListWithResponse request
	RelaydomainsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RelaydomainsListResponse, error)

	// RelaydomainsCreateWithBodyWithResponse request with any body
	RelaydomainsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RelaydomainsCreateResponse, error)

	RelaydomainsCreateWithResponse(ctx context.Context, body RelaydomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsCreateResponse, error)

	RelaydomainsCreateWithFormdataBodyWithResponse(ctx context.Context, body RelaydomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsCreateResponse, error)

	// RelaydomainsDestroyWithResponse request
	RelaydomainsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RelaydomainsDestroyResponse, error)

	// RelaydomainsRetrieveWithResponse request
	RelaydomainsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RelaydomainsRetrieveResponse, error)

	// RelaydomainsPartialUpdateWithBodyWithResponse request with any body
	RelaydomainsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RelaydomainsPartialUpdateResponse, error)

	RelaydomainsPartialUpdateWithResponse(ctx context.Context, id int, body RelaydomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsPartialUpdateResponse, error)

	RelaydomainsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RelaydomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsPartialUpdateResponse, error)

	// RelaydomainsUpdateWithBodyWithResponse request with any body
	RelaydomainsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RelaydomainsUpdateResponse, error)

	RelaydomainsUpdateWithResponse(ctx context.Context, id int, body RelaydomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsUpdateResponse, error)

	RelaydomainsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RelaydomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsUpdateResponse, error)

	// ResetConfirmCreateWithResponse request
	ResetConfirmCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetConfirmCreateResponse, error)

	// ResourcesRetrieveWithResponse request
	ResourcesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ResourcesRetrieveResponse, error)

	// ResourcesPartialUpdateWithBodyWithResponse request with any body
	ResourcesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourcesPartialUpdateResponse, error)

	ResourcesPartialUpdateWithResponse(ctx context.Context, id int, body ResourcesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourcesPartialUpdateResponse, error)

	ResourcesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ResourcesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ResourcesPartialUpdateResponse, error)

	// ResourcesUpdateWithBodyWithResponse request with any body
	ResourcesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error)

	ResourcesUpdateWithResponse(ctx context.Context, id int, body ResourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error)

	ResourcesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ResourcesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error)

	// SenderaddressesListWithResponse request
	SenderaddressesListWithResponse(ctx context.Context, params *SenderaddressesListParams, reqEditors ...RequestEditorFn) (*SenderaddressesListResponse, error)

	// SenderaddressesCreateWithBodyWithResponse request with any body
	SenderaddressesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SenderaddressesCreateResponse, error)

	SenderaddressesCreateWithResponse(ctx context.Context, body SenderaddressesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesCreateResponse, error)

	SenderaddressesCreateWithFormdataBodyWithResponse(ctx context.Context, body SenderaddressesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesCreateResponse, error)

	// SenderaddressesDestroyWithResponse request
	SenderaddressesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SenderaddressesDestroyResponse, error)

	// SenderaddressesRetrieveWithResponse request
	SenderaddressesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SenderaddressesRetrieveResponse, error)

	// SenderaddressesPartialUpdateWithBodyWithResponse request with any body
	SenderaddressesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SenderaddressesPartialUpdateResponse, error)

	SenderaddressesPartialUpdateWithResponse(ctx context.Context, id int, body SenderaddressesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesPartialUpdateResponse, error)

	SenderaddressesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SenderaddressesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesPartialUpdateResponse, error)

	// SenderaddressesUpdateWithBodyWithResponse request with any body
	SenderaddressesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SenderaddressesUpdateResponse, error)

	SenderaddressesUpdateWithResponse(ctx context.Context, id int, body SenderaddressesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesUpdateResponse, error)

	SenderaddressesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SenderaddressesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesUpdateResponse, error)

	// SharedCalendarsListWithResponse request
	SharedCalendarsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SharedCalendarsListResponse, error)

	// SharedCalendarsCreateWithBodyWithResponse request with any body
	SharedCalendarsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsCreateResponse, error)

	SharedCalendarsCreateWithResponse(ctx context.Context, body SharedCalendarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsCreateResponse, error)

	SharedCalendarsCreateWithFormdataBodyWithResponse(ctx context.Context, body SharedCalendarsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsCreateResponse, error)

	// SharedCalendarsCheckTokenCreateWithBodyWithResponse request with any body
	SharedCalendarsCheckTokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsCheckTokenCreateResponse, error)

	SharedCalendarsCheckTokenCreateWithResponse(ctx context.Context, body SharedCalendarsCheckTokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsCheckTokenCreateResponse, error)

	SharedCalendarsCheckTokenCreateWithFormdataBodyWithResponse(ctx context.Context, body SharedCalendarsCheckTokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsCheckTokenCreateResponse, error)

	// SharedCalendarsEventsListWithResponse request
	SharedCalendarsEventsListWithResponse(ctx context.Context, calendarPk string, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsListResponse, error)

	// SharedCalendarsEventsCreateWithBodyWithResponse request with any body
	SharedCalendarsEventsCreateWithBodyWithResponse(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsCreateResponse, error)

	SharedCalendarsEventsCreateWithResponse(ctx context.Context, calendarPk string, body SharedCalendarsEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsCreateResponse, error)

	SharedCalendarsEventsCreateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, body SharedCalendarsEventsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsCreateResponse, error)

	// SharedCalendarsEventsImportFromFileCreateWithBodyWithResponse request with any body
	SharedCalendarsEventsImportFromFileCreateWithBodyWithResponse(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsImportFromFileCreateResponse, error)

	SharedCalendarsEventsImportFromFileCreateWithResponse(ctx context.Context, calendarPk string, body SharedCalendarsEventsImportFromFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsImportFromFileCreateResponse, error)

	SharedCalendarsEventsImportFromFileCreateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, body SharedCalendarsEventsImportFromFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsImportFromFileCreateResponse, error)

	// SharedCalendarsEventsDestroyWithResponse request
	SharedCalendarsEventsDestroyWithResponse(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsDestroyResponse, error)

	// SharedCalendarsEventsRetrieveWithResponse request
	SharedCalendarsEventsRetrieveWithResponse(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsRetrieveResponse, error)

	// SharedCalendarsEventsPartialUpdateWithBodyWithResponse request with any body
	SharedCalendarsEventsPartialUpdateWithBodyWithResponse(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsPartialUpdateResponse, error)

	SharedCalendarsEventsPartialUpdateWithResponse(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsPartialUpdateResponse, error)

	SharedCalendarsEventsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsPartialUpdateResponse, error)

	// SharedCalendarsEventsUpdateWithBodyWithResponse request with any body
	SharedCalendarsEventsUpdateWithBodyWithResponse(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsUpdateResponse, error)

	SharedCalendarsEventsUpdateWithResponse(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsUpdateResponse, error)

	SharedCalendarsEventsUpdateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsUpdateResponse, error)

	// SharedCalendarsDestroyWithResponse request
	SharedCalendarsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SharedCalendarsDestroyResponse, error)

	// SharedCalendarsRetrieveWithResponse request
	SharedCalendarsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SharedCalendarsRetrieveResponse, error)

	// SharedCalendarsPartialUpdateWithBodyWithResponse request with any body
	SharedCalendarsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsPartialUpdateResponse, error)

	SharedCalendarsPartialUpdateWithResponse(ctx context.Context, id int, body SharedCalendarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsPartialUpdateResponse, error)

	SharedCalendarsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SharedCalendarsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsPartialUpdateResponse, error)

	// SharedCalendarsUpdateWithBodyWithResponse request with any body
	SharedCalendarsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsUpdateResponse, error)

	SharedCalendarsUpdateWithResponse(ctx context.Context, id int, body SharedCalendarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsUpdateResponse, error)

	SharedCalendarsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SharedCalendarsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsUpdateResponse, error)

	// SmsTotpCreateWithResponse request
	SmsTotpCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SmsTotpCreateResponse, error)

	// StatisticsListWithResponse request
	StatisticsListWithResponse(ctx context.Context, params *StatisticsListParams, reqEditors ...RequestEditorFn) (*StatisticsListResponse, error)

	// TokenCreateWithBodyWithResponse request with any body
	TokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error)

	TokenCreateWithResponse(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error)

	TokenCreateWithFormdataBodyWithResponse(ctx context.Context, body TokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error)

	// TokenRefreshCreateWithBodyWithResponse request with any body
	TokenRefreshCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenRefreshCreateResponse, error)

	TokenRefreshCreateWithResponse(ctx context.Context, body TokenRefreshCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenRefreshCreateResponse, error)

	TokenRefreshCreateWithFormdataBodyWithResponse(ctx context.Context, body TokenRefreshCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenRefreshCreateResponse, error)

	// TransportsListWithResponse request
	TransportsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TransportsListResponse, error)

	// UserCalendarsListWithResponse request
	UserCalendarsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserCalendarsListResponse, error)

	// UserCalendarsCreateWithBodyWithResponse request with any body
	UserCalendarsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsCreateResponse, error)

	UserCalendarsCreateWithResponse(ctx context.Context, body UserCalendarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsCreateResponse, error)

	UserCalendarsCreateWithFormdataBodyWithResponse(ctx context.Context, body UserCalendarsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsCreateResponse, error)

	// UserCalendarsCheckTokenCreateWithBodyWithResponse request with any body
	UserCalendarsCheckTokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsCheckTokenCreateResponse, error)

	UserCalendarsCheckTokenCreateWithResponse(ctx context.Context, body UserCalendarsCheckTokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsCheckTokenCreateResponse, error)

	UserCalendarsCheckTokenCreateWithFormdataBodyWithResponse(ctx context.Context, body UserCalendarsCheckTokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsCheckTokenCreateResponse, error)

	// UserCalendarsEventsListWithResponse request
	UserCalendarsEventsListWithResponse(ctx context.Context, calendarPk string, reqEditors ...RequestEditorFn) (*UserCalendarsEventsListResponse, error)

	// UserCalendarsEventsCreateWithBodyWithResponse request with any body
	UserCalendarsEventsCreateWithBodyWithResponse(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsEventsCreateResponse, error)

	UserCalendarsEventsCreateWithResponse(ctx context.Context, calendarPk string, body UserCalendarsEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsCreateResponse, error)

	UserCalendarsEventsCreateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, body UserCalendarsEventsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsCreateResponse, error)

	// UserCalendarsEventsImportFromFileCreateWithBodyWithResponse request with any body
	UserCalendarsEventsImportFromFileCreateWithBodyWithResponse(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsEventsImportFromFileCreateResponse, error)

	UserCalendarsEventsImportFromFileCreateWithResponse(ctx context.Context, calendarPk string, body UserCalendarsEventsImportFromFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsImportFromFileCreateResponse, error)

	UserCalendarsEventsImportFromFileCreateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, body UserCalendarsEventsImportFromFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsImportFromFileCreateResponse, error)

	// UserCalendarsEventsDestroyWithResponse request
	UserCalendarsEventsDestroyWithResponse(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*UserCalendarsEventsDestroyResponse, error)

	// UserCalendarsEventsRetrieveWithResponse request
	UserCalendarsEventsRetrieveWithResponse(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*UserCalendarsEventsRetrieveResponse, error)

	// UserCalendarsEventsPartialUpdateWithBodyWithResponse request with any body
	UserCalendarsEventsPartialUpdateWithBodyWithResponse(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsEventsPartialUpdateResponse, error)

	UserCalendarsEventsPartialUpdateWithResponse(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsPartialUpdateResponse, error)

	UserCalendarsEventsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsPartialUpdateResponse, error)

	// UserCalendarsEventsUpdateWithBodyWithResponse request with any body
	UserCalendarsEventsUpdateWithBodyWithResponse(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsEventsUpdateResponse, error)

	UserCalendarsEventsUpdateWithResponse(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsUpdateResponse, error)

	UserCalendarsEventsUpdateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsUpdateResponse, error)

	// UserCalendarsDestroyWithResponse request
	UserCalendarsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UserCalendarsDestroyResponse, error)

	// UserCalendarsRetrieveWithResponse request
	UserCalendarsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UserCalendarsRetrieveResponse, error)

	// UserCalendarsPartialUpdateWithBodyWithResponse request with any body
	UserCalendarsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsPartialUpdateResponse, error)

	UserCalendarsPartialUpdateWithResponse(ctx context.Context, id int, body UserCalendarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsPartialUpdateResponse, error)

	UserCalendarsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserCalendarsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsPartialUpdateResponse, error)

	// UserCalendarsUpdateWithBodyWithResponse request with any body
	UserCalendarsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsUpdateResponse, error)

	UserCalendarsUpdateWithResponse(ctx context.Context, id int, body UserCalendarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsUpdateResponse, error)

	UserCalendarsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserCalendarsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsUpdateResponse, error)
}

type AccessrulesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccessRule
}

// Status returns HTTPResponse.Status
func (r AccessrulesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessrulesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessrulesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccessRule
}

// Status returns HTTPResponse.Status
func (r AccessrulesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessrulesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessrulesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccessrulesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessrulesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessrulesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessRule
}

// Status returns HTTPResponse.Status
func (r AccessrulesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessrulesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessrulesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessRule
}

// Status returns HTTPResponse.Status
func (r AccessrulesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessrulesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessrulesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessRule
}

// Status returns HTTPResponse.Status
func (r AccessrulesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessrulesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountApiTokenDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountApiTokenDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountApiTokenDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountApiTokenRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAPIToken
}

// Status returns HTTPResponse.Status
func (r AccountApiTokenRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountApiTokenRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountApiTokenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserAPIToken
}

// Status returns HTTPResponse.Status
func (r AccountApiTokenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountApiTokenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountForwardRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountForwardRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountForwardRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountForwardCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountForwardCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountForwardCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountMeRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r AccountMeRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountMeRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountMePasswordCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckPassword
}

// Status returns HTTPResponse.Status
func (r AccountMePasswordCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountMePasswordCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountTfaDisableCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountTfaDisableCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountTfaDisableCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountTfaResetCodesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountTfaResetCodesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountTfaResetCodesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountTfaSetupCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountTfaSetupCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountTfaSetupCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountTfaSetupCheckCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountTfaSetupCheckCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountTfaSetupCheckCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountTfaSetupKeyRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountTfaSetupKeyRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountTfaSetupKeyRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountTfaVerifyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountTfaVerifyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountTfaVerifyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Account
}

// Status returns HTTPResponse.Status
func (r AccountsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WritableAccount
}

// Status returns HTTPResponse.Status
func (r AccountsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsExistsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableAccount
}

// Status returns HTTPResponse.Status
func (r AccountsExistsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsExistsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsRandomPasswordRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableAccount
}

// Status returns HTTPResponse.Status
func (r AccountsRandomPasswordRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsRandomPasswordRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsResetPasswordCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResetPassword
}

// Status returns HTTPResponse.Status
func (r AccountsResetPasswordCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsResetPasswordCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsValidateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableAccount
}

// Status returns HTTPResponse.Status
func (r AccountsValidateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsValidateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccountsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r AccountsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableAccount
}

// Status returns HTTPResponse.Status
func (r AccountsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableAccount
}

// Status returns HTTPResponse.Status
func (r AccountsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsDeleteCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteAccount
}

// Status returns HTTPResponse.Status
func (r AccountsDeleteCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsDeleteCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsPasswordUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountPassword
}

// Status returns HTTPResponse.Status
func (r AccountsPasswordUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsPasswordUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddressBooksDefaultRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressBook
}

// Status returns HTTPResponse.Status
func (r AddressBooksDefaultRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddressBooksDefaultRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddressBooksSyncFromCdavRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressBook
}

// Status returns HTTPResponse.Status
func (r AddressBooksSyncFromCdavRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddressBooksSyncFromCdavRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddressBooksSyncToCdavRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressBook
}

// Status returns HTTPResponse.Status
func (r AddressBooksSyncToCdavRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddressBooksSyncToCdavRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminComponentsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModoboaComponent
}

// Status returns HTTPResponse.Status
func (r AdminComponentsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminComponentsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAlarmList
}

// Status returns HTTPResponse.Status
func (r AlarmsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmsBulkDeleteDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AlarmsBulkDeleteDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmsBulkDeleteDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AlarmsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alarm
}

// Status returns HTTPResponse.Status
func (r AlarmsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlarmsSwitchPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alarm
}

// Status returns HTTPResponse.Status
func (r AlarmsSwitchPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlarmsSwitchPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AliasesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Alias
}

// Status returns HTTPResponse.Status
func (r AliasesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AliasesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AliasesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Alias
}

// Status returns HTTPResponse.Status
func (r AliasesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AliasesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AliasesRandomAddressRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alias
}

// Status returns HTTPResponse.Status
func (r AliasesRandomAddressRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AliasesRandomAddressRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AliasesValidateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alias
}

// Status returns HTTPResponse.Status
func (r AliasesValidateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AliasesValidateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AliasesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AliasesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AliasesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AliasesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alias
}

// Status returns HTTPResponse.Status
func (r AliasesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AliasesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AliasesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alias
}

// Status returns HTTPResponse.Status
func (r AliasesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AliasesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AliasesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alias
}

// Status returns HTTPResponse.Status
func (r AliasesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AliasesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArmessagesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ARMessage
}

// Status returns HTTPResponse.Status
func (r ArmessagesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArmessagesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArmessagesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ARMessage
}

// Status returns HTTPResponse.Status
func (r ArmessagesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArmessagesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArmessagesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ARMessage
}

// Status returns HTTPResponse.Status
func (r ArmessagesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArmessagesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArmessagesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ARMessage
}

// Status returns HTTPResponse.Status
func (r ArmessagesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArmessagesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArmessagesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ARMessage
}

// Status returns HTTPResponse.Status
func (r ArmessagesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArmessagesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttendeesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Attendee
}

// Status returns HTTPResponse.Status
func (r AttendeesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttendeesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttendeesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Attendee
}

// Status returns HTTPResponse.Status
func (r AttendeesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttendeesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoriesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Category
}

// Status returns HTTPResponse.Status
func (r CategoriesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoriesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoriesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Category
}

// Status returns HTTPResponse.Status
func (r CategoriesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoriesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoriesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CategoriesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoriesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoriesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
}

// Status returns HTTPResponse.Status
func (r CategoriesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoriesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoriesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
}

// Status returns HTTPResponse.Status
func (r CategoriesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoriesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoriesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
}

// Status returns HTTPResponse.Status
func (r CategoriesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoriesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Contact
}

// Status returns HTTPResponse.Status
func (r ContactsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Contact
}

// Status returns HTTPResponse.Status
func (r ContactsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ContactsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r ContactsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r ContactsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r ContactsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccountCredentials
}

// Status returns HTTPResponse.Status
func (r CredentialsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainaliasesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DomainAlias
}

// Status returns HTTPResponse.Status
func (r DomainaliasesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainaliasesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainaliasesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DomainAlias
}

// Status returns HTTPResponse.Status
func (r DomainaliasesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainaliasesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainaliasesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainaliasesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainaliasesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainaliasesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainAlias
}

// Status returns HTTPResponse.Status
func (r DomainaliasesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainaliasesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainaliasesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainAlias
}

// Status returns HTTPResponse.Status
func (r DomainaliasesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainaliasesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainaliasesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainAlias
}

// Status returns HTTPResponse.Status
func (r DomainaliasesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainaliasesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Domain
}

// Status returns HTTPResponse.Status
func (r DomainsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Domain
}

// Status returns HTTPResponse.Status
func (r DomainsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsExportRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainsExportRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsExportRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsImportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r DomainsImportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsImportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r DomainsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r DomainsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r DomainsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsAdministratorsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainAdmin
}

// Status returns HTTPResponse.Status
func (r DomainsAdministratorsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsAdministratorsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsAdministratorsAddCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleDomainAdmin
}

// Status returns HTTPResponse.Status
func (r DomainsAdministratorsAddCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsAdministratorsAddCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsAdministratorsRemoveCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleDomainAdmin
}

// Status returns HTTPResponse.Status
func (r DomainsAdministratorsRemoveCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsAdministratorsRemoveCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsDeleteCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteDomain
}

// Status returns HTTPResponse.Status
func (r DomainsDeleteCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsDeleteCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsDmarcAlignmentStatsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DMARCAligment
}

// Status returns HTTPResponse.Status
func (r DomainsDmarcAlignmentStatsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsDmarcAlignmentStatsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsDnsDetailRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSDetail
}

// Status returns HTTPResponse.Status
func (r DomainsDnsDetailRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsDnsDetailRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailProvidersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmailProvider
}

// Status returns HTTPResponse.Status
func (r EmailProvidersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailProvidersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailProvidersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EmailProvider
}

// Status returns HTTPResponse.Status
func (r EmailProvidersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailProvidersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailProvidersCheckAssociatedDomainCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailProvider
}

// Status returns HTTPResponse.Status
func (r EmailProvidersCheckAssociatedDomainCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailProvidersCheckAssociatedDomainCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailProvidersCheckConnectionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailProvider
}

// Status returns HTTPResponse.Status
func (r EmailProvidersCheckConnectionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailProvidersCheckConnectionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailProvidersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EmailProvidersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailProvidersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailProvidersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailProvider
}

// Status returns HTTPResponse.Status
func (r EmailProvidersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailProvidersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailProvidersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailProvider
}

// Status returns HTTPResponse.Status
func (r EmailProvidersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailProvidersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailProvidersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailProvider
}

// Status returns HTTPResponse.Status
func (r EmailProvidersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailProvidersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmailAddressWithName
}

// Status returns HTTPResponse.Status
func (r EmailsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailAddressWithName
}

// Status returns HTTPResponse.Status
func (r EmailsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdentitiesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdentitiesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdentitiesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdentitiesExportRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdentitiesExportRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdentitiesExportRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdentitiesImportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IdentitiesImportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdentitiesImportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LanguagesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogsAuditTrailListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedLogList
}

// Status returns HTTPResponse.Status
func (r LogsAuditTrailListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogsAuditTrailListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogsAuditTrailRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Log
}

// Status returns HTTPResponse.Status
func (r LogsAuditTrailRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogsAuditTrailRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogsMessagesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedMaillogList
}

// Status returns HTTPResponse.Status
func (r LogsMessagesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogsMessagesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogsMessagesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Maillog
}

// Status returns HTTPResponse.Status
func (r LogsMessagesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogsMessagesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailboxesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Mailbox
}

// Status returns HTTPResponse.Status
func (r MailboxesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailboxesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MailboxesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Mailbox
}

// Status returns HTTPResponse.Status
func (r MailboxesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MailboxesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigrationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Migration
}

// Status returns HTTPResponse.Status
func (r MigrationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigrationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigrationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MigrationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigrationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigrationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Migration
}

// Status returns HTTPResponse.Status
func (r MigrationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigrationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParametersApplicationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Application
}

// Status returns HTTPResponse.Status
func (r ParametersApplicationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParametersApplicationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParametersStructureListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Parameter
}

// Status returns HTTPResponse.Status
func (r ParametersStructureListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParametersStructureListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParametersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppParameters
}

// Status returns HTTPResponse.Status
func (r ParametersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParametersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParametersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ParametersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParametersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PasswordResetCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PasswordResetCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PasswordResetCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RelaydomainsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RelayDomain
}

// Status returns HTTPResponse.Status
func (r RelaydomainsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RelaydomainsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RelaydomainsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RelayDomain
}

// Status returns HTTPResponse.Status
func (r RelaydomainsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RelaydomainsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RelaydomainsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RelaydomainsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RelaydomainsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RelaydomainsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelayDomain
}

// Status returns HTTPResponse.Status
func (r RelaydomainsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RelaydomainsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RelaydomainsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelayDomain
}

// Status returns HTTPResponse.Status
func (r RelaydomainsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RelaydomainsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RelaydomainsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelayDomain
}

// Status returns HTTPResponse.Status
func (r RelaydomainsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RelaydomainsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetConfirmCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetConfirmCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetConfirmCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourcesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resources
}

// Status returns HTTPResponse.Status
func (r ResourcesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourcesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourcesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resources
}

// Status returns HTTPResponse.Status
func (r ResourcesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourcesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourcesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resources
}

// Status returns HTTPResponse.Status
func (r ResourcesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourcesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SenderaddressesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SenderAddress
}

// Status returns HTTPResponse.Status
func (r SenderaddressesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SenderaddressesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SenderaddressesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SenderAddress
}

// Status returns HTTPResponse.Status
func (r SenderaddressesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SenderaddressesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SenderaddressesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SenderaddressesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SenderaddressesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SenderaddressesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SenderAddress
}

// Status returns HTTPResponse.Status
func (r SenderaddressesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SenderaddressesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SenderaddressesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SenderAddress
}

// Status returns HTTPResponse.Status
func (r SenderaddressesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SenderaddressesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SenderaddressesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SenderAddress
}

// Status returns HTTPResponse.Status
func (r SenderaddressesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SenderaddressesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SharedCalendar
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SharedCalendar
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsCheckTokenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckToken
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsCheckTokenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsCheckTokenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsEventsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ROEvent
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsEventsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsEventsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsEventsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WritableEvent
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsEventsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsEventsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsEventsImportFromFileCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableEvent
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsEventsImportFromFileCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsEventsImportFromFileCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsEventsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsEventsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsEventsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsEventsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ROEvent
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsEventsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsEventsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsEventsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableEvent
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsEventsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsEventsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsEventsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableEvent
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsEventsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsEventsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedCalendar
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedCalendar
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedCalendarsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedCalendar
}

// Status returns HTTPResponse.Status
func (r SharedCalendarsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedCalendarsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmsTotpCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SmsTotpCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmsTotpCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatisticsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Statistics
}

// Status returns HTTPResponse.Status
func (r StatisticsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatisticsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenObtainPair
}

// Status returns HTTPResponse.Status
func (r TokenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenRefreshCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenRefresh
}

// Status returns HTTPResponse.Status
func (r TokenRefreshCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenRefreshCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransportsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TransportBackend
}

// Status returns HTTPResponse.Status
func (r TransportsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransportsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserCalendar
}

// Status returns HTTPResponse.Status
func (r UserCalendarsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserCalendar
}

// Status returns HTTPResponse.Status
func (r UserCalendarsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsCheckTokenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckToken
}

// Status returns HTTPResponse.Status
func (r UserCalendarsCheckTokenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsCheckTokenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsEventsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ROEvent
}

// Status returns HTTPResponse.Status
func (r UserCalendarsEventsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsEventsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsEventsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WritableEvent
}

// Status returns HTTPResponse.Status
func (r UserCalendarsEventsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsEventsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsEventsImportFromFileCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableEvent
}

// Status returns HTTPResponse.Status
func (r UserCalendarsEventsImportFromFileCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsEventsImportFromFileCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsEventsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UserCalendarsEventsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsEventsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsEventsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ROEvent
}

// Status returns HTTPResponse.Status
func (r UserCalendarsEventsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsEventsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsEventsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableEvent
}

// Status returns HTTPResponse.Status
func (r UserCalendarsEventsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsEventsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsEventsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WritableEvent
}

// Status returns HTTPResponse.Status
func (r UserCalendarsEventsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsEventsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UserCalendarsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserCalendar
}

// Status returns HTTPResponse.Status
func (r UserCalendarsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserCalendar
}

// Status returns HTTPResponse.Status
func (r UserCalendarsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCalendarsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserCalendar
}

// Status returns HTTPResponse.Status
func (r UserCalendarsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCalendarsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccessrulesListWithResponse request returning *AccessrulesListResponse
func (c *ClientWithResponses) AccessrulesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccessrulesListResponse, error) {
	rsp, err := c.AccessrulesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesListResponse(rsp)
}

// AccessrulesCreateWithBodyWithResponse request with arbitrary body returning *AccessrulesCreateResponse
func (c *ClientWithResponses) AccessrulesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessrulesCreateResponse, error) {
	rsp, err := c.AccessrulesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesCreateResponse(rsp)
}

func (c *ClientWithResponses) AccessrulesCreateWithResponse(ctx context.Context, body AccessrulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesCreateResponse, error) {
	rsp, err := c.AccessrulesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesCreateResponse(rsp)
}

func (c *ClientWithResponses) AccessrulesCreateWithFormdataBodyWithResponse(ctx context.Context, body AccessrulesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesCreateResponse, error) {
	rsp, err := c.AccessrulesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesCreateResponse(rsp)
}

// AccessrulesDestroyWithResponse request returning *AccessrulesDestroyResponse
func (c *ClientWithResponses) AccessrulesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AccessrulesDestroyResponse, error) {
	rsp, err := c.AccessrulesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesDestroyResponse(rsp)
}

// AccessrulesRetrieveWithResponse request returning *AccessrulesRetrieveResponse
func (c *ClientWithResponses) AccessrulesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AccessrulesRetrieveResponse, error) {
	rsp, err := c.AccessrulesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesRetrieveResponse(rsp)
}

// AccessrulesPartialUpdateWithBodyWithResponse request with arbitrary body returning *AccessrulesPartialUpdateResponse
func (c *ClientWithResponses) AccessrulesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessrulesPartialUpdateResponse, error) {
	rsp, err := c.AccessrulesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccessrulesPartialUpdateWithResponse(ctx context.Context, id int, body AccessrulesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesPartialUpdateResponse, error) {
	rsp, err := c.AccessrulesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccessrulesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccessrulesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesPartialUpdateResponse, error) {
	rsp, err := c.AccessrulesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesPartialUpdateResponse(rsp)
}

// AccessrulesUpdateWithBodyWithResponse request with arbitrary body returning *AccessrulesUpdateResponse
func (c *ClientWithResponses) AccessrulesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessrulesUpdateResponse, error) {
	rsp, err := c.AccessrulesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccessrulesUpdateWithResponse(ctx context.Context, id int, body AccessrulesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesUpdateResponse, error) {
	rsp, err := c.AccessrulesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccessrulesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccessrulesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccessrulesUpdateResponse, error) {
	rsp, err := c.AccessrulesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessrulesUpdateResponse(rsp)
}

// AccountApiTokenDestroyWithResponse request returning *AccountApiTokenDestroyResponse
func (c *ClientWithResponses) AccountApiTokenDestroyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountApiTokenDestroyResponse, error) {
	rsp, err := c.AccountApiTokenDestroy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountApiTokenDestroyResponse(rsp)
}

// AccountApiTokenRetrieveWithResponse request returning *AccountApiTokenRetrieveResponse
func (c *ClientWithResponses) AccountApiTokenRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountApiTokenRetrieveResponse, error) {
	rsp, err := c.AccountApiTokenRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountApiTokenRetrieveResponse(rsp)
}

// AccountApiTokenCreateWithResponse request returning *AccountApiTokenCreateResponse
func (c *ClientWithResponses) AccountApiTokenCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountApiTokenCreateResponse, error) {
	rsp, err := c.AccountApiTokenCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountApiTokenCreateResponse(rsp)
}

// AccountForwardRetrieveWithResponse request returning *AccountForwardRetrieveResponse
func (c *ClientWithResponses) AccountForwardRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountForwardRetrieveResponse, error) {
	rsp, err := c.AccountForwardRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountForwardRetrieveResponse(rsp)
}

// AccountForwardCreateWithResponse request returning *AccountForwardCreateResponse
func (c *ClientWithResponses) AccountForwardCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountForwardCreateResponse, error) {
	rsp, err := c.AccountForwardCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountForwardCreateResponse(rsp)
}

// AccountMeRetrieveWithResponse request returning *AccountMeRetrieveResponse
func (c *ClientWithResponses) AccountMeRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountMeRetrieveResponse, error) {
	rsp, err := c.AccountMeRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountMeRetrieveResponse(rsp)
}

// AccountMePasswordCreateWithBodyWithResponse request with arbitrary body returning *AccountMePasswordCreateResponse
func (c *ClientWithResponses) AccountMePasswordCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountMePasswordCreateResponse, error) {
	rsp, err := c.AccountMePasswordCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountMePasswordCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountMePasswordCreateWithResponse(ctx context.Context, body AccountMePasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountMePasswordCreateResponse, error) {
	rsp, err := c.AccountMePasswordCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountMePasswordCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountMePasswordCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountMePasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountMePasswordCreateResponse, error) {
	rsp, err := c.AccountMePasswordCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountMePasswordCreateResponse(rsp)
}

// AccountTfaDisableCreateWithResponse request returning *AccountTfaDisableCreateResponse
func (c *ClientWithResponses) AccountTfaDisableCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaDisableCreateResponse, error) {
	rsp, err := c.AccountTfaDisableCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTfaDisableCreateResponse(rsp)
}

// AccountTfaResetCodesCreateWithResponse request returning *AccountTfaResetCodesCreateResponse
func (c *ClientWithResponses) AccountTfaResetCodesCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaResetCodesCreateResponse, error) {
	rsp, err := c.AccountTfaResetCodesCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTfaResetCodesCreateResponse(rsp)
}

// AccountTfaSetupCreateWithResponse request returning *AccountTfaSetupCreateResponse
func (c *ClientWithResponses) AccountTfaSetupCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaSetupCreateResponse, error) {
	rsp, err := c.AccountTfaSetupCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTfaSetupCreateResponse(rsp)
}

// AccountTfaSetupCheckCreateWithBodyWithResponse request with arbitrary body returning *AccountTfaSetupCheckCreateResponse
func (c *ClientWithResponses) AccountTfaSetupCheckCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountTfaSetupCheckCreateResponse, error) {
	rsp, err := c.AccountTfaSetupCheckCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTfaSetupCheckCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountTfaSetupCheckCreateWithResponse(ctx context.Context, body AccountTfaSetupCheckCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountTfaSetupCheckCreateResponse, error) {
	rsp, err := c.AccountTfaSetupCheckCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTfaSetupCheckCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountTfaSetupCheckCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountTfaSetupCheckCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountTfaSetupCheckCreateResponse, error) {
	rsp, err := c.AccountTfaSetupCheckCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTfaSetupCheckCreateResponse(rsp)
}

// AccountTfaSetupKeyRetrieveWithResponse request returning *AccountTfaSetupKeyRetrieveResponse
func (c *ClientWithResponses) AccountTfaSetupKeyRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaSetupKeyRetrieveResponse, error) {
	rsp, err := c.AccountTfaSetupKeyRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTfaSetupKeyRetrieveResponse(rsp)
}

// AccountTfaVerifyCreateWithResponse request returning *AccountTfaVerifyCreateResponse
func (c *ClientWithResponses) AccountTfaVerifyCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountTfaVerifyCreateResponse, error) {
	rsp, err := c.AccountTfaVerifyCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountTfaVerifyCreateResponse(rsp)
}

// AccountsListWithResponse request returning *AccountsListResponse
func (c *ClientWithResponses) AccountsListWithResponse(ctx context.Context, params *AccountsListParams, reqEditors ...RequestEditorFn) (*AccountsListResponse, error) {
	rsp, err := c.AccountsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsListResponse(rsp)
}

// AccountsCreateWithBodyWithResponse request with arbitrary body returning *AccountsCreateResponse
func (c *ClientWithResponses) AccountsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsCreateResponse, error) {
	rsp, err := c.AccountsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountsCreateWithResponse(ctx context.Context, body AccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsCreateResponse, error) {
	rsp, err := c.AccountsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountsCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsCreateResponse, error) {
	rsp, err := c.AccountsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsCreateResponse(rsp)
}

// AccountsExistsRetrieveWithResponse request returning *AccountsExistsRetrieveResponse
func (c *ClientWithResponses) AccountsExistsRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsExistsRetrieveResponse, error) {
	rsp, err := c.AccountsExistsRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsExistsRetrieveResponse(rsp)
}

// AccountsRandomPasswordRetrieveWithResponse request returning *AccountsRandomPasswordRetrieveResponse
func (c *ClientWithResponses) AccountsRandomPasswordRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsRandomPasswordRetrieveResponse, error) {
	rsp, err := c.AccountsRandomPasswordRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsRandomPasswordRetrieveResponse(rsp)
}

// AccountsResetPasswordCreateWithBodyWithResponse request with arbitrary body returning *AccountsResetPasswordCreateResponse
func (c *ClientWithResponses) AccountsResetPasswordCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsResetPasswordCreateResponse, error) {
	rsp, err := c.AccountsResetPasswordCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsResetPasswordCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountsResetPasswordCreateWithResponse(ctx context.Context, body AccountsResetPasswordCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsResetPasswordCreateResponse, error) {
	rsp, err := c.AccountsResetPasswordCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsResetPasswordCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountsResetPasswordCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountsResetPasswordCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsResetPasswordCreateResponse, error) {
	rsp, err := c.AccountsResetPasswordCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsResetPasswordCreateResponse(rsp)
}

// AccountsValidateCreateWithBodyWithResponse request with arbitrary body returning *AccountsValidateCreateResponse
func (c *ClientWithResponses) AccountsValidateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsValidateCreateResponse, error) {
	rsp, err := c.AccountsValidateCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsValidateCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountsValidateCreateWithResponse(ctx context.Context, body AccountsValidateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsValidateCreateResponse, error) {
	rsp, err := c.AccountsValidateCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsValidateCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountsValidateCreateWithFormdataBodyWithResponse(ctx context.Context, body AccountsValidateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsValidateCreateResponse, error) {
	rsp, err := c.AccountsValidateCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsValidateCreateResponse(rsp)
}

// AccountsDestroyWithResponse request returning *AccountsDestroyResponse
func (c *ClientWithResponses) AccountsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AccountsDestroyResponse, error) {
	rsp, err := c.AccountsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsDestroyResponse(rsp)
}

// AccountsRetrieveWithResponse request returning *AccountsRetrieveResponse
func (c *ClientWithResponses) AccountsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AccountsRetrieveResponse, error) {
	rsp, err := c.AccountsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsRetrieveResponse(rsp)
}

// AccountsPartialUpdateWithBodyWithResponse request with arbitrary body returning *AccountsPartialUpdateResponse
func (c *ClientWithResponses) AccountsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsPartialUpdateResponse, error) {
	rsp, err := c.AccountsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountsPartialUpdateWithResponse(ctx context.Context, id int, body AccountsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsPartialUpdateResponse, error) {
	rsp, err := c.AccountsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccountsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsPartialUpdateResponse, error) {
	rsp, err := c.AccountsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsPartialUpdateResponse(rsp)
}

// AccountsUpdateWithBodyWithResponse request with arbitrary body returning *AccountsUpdateResponse
func (c *ClientWithResponses) AccountsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error) {
	rsp, err := c.AccountsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountsUpdateWithResponse(ctx context.Context, id int, body AccountsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error) {
	rsp, err := c.AccountsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccountsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateResponse, error) {
	rsp, err := c.AccountsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateResponse(rsp)
}

// AccountsDeleteCreateWithBodyWithResponse request with arbitrary body returning *AccountsDeleteCreateResponse
func (c *ClientWithResponses) AccountsDeleteCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsDeleteCreateResponse, error) {
	rsp, err := c.AccountsDeleteCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsDeleteCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountsDeleteCreateWithResponse(ctx context.Context, id int, body AccountsDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsDeleteCreateResponse, error) {
	rsp, err := c.AccountsDeleteCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsDeleteCreateResponse(rsp)
}

func (c *ClientWithResponses) AccountsDeleteCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccountsDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsDeleteCreateResponse, error) {
	rsp, err := c.AccountsDeleteCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsDeleteCreateResponse(rsp)
}

// AccountsPasswordUpdateWithBodyWithResponse request with arbitrary body returning *AccountsPasswordUpdateResponse
func (c *ClientWithResponses) AccountsPasswordUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsPasswordUpdateResponse, error) {
	rsp, err := c.AccountsPasswordUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsPasswordUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountsPasswordUpdateWithResponse(ctx context.Context, id int, body AccountsPasswordUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsPasswordUpdateResponse, error) {
	rsp, err := c.AccountsPasswordUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsPasswordUpdateResponse(rsp)
}

func (c *ClientWithResponses) AccountsPasswordUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AccountsPasswordUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccountsPasswordUpdateResponse, error) {
	rsp, err := c.AccountsPasswordUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsPasswordUpdateResponse(rsp)
}

// AddressBooksDefaultRetrieveWithResponse request returning *AddressBooksDefaultRetrieveResponse
func (c *ClientWithResponses) AddressBooksDefaultRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AddressBooksDefaultRetrieveResponse, error) {
	rsp, err := c.AddressBooksDefaultRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddressBooksDefaultRetrieveResponse(rsp)
}

// AddressBooksSyncFromCdavRetrieveWithResponse request returning *AddressBooksSyncFromCdavRetrieveResponse
func (c *ClientWithResponses) AddressBooksSyncFromCdavRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AddressBooksSyncFromCdavRetrieveResponse, error) {
	rsp, err := c.AddressBooksSyncFromCdavRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddressBooksSyncFromCdavRetrieveResponse(rsp)
}

// AddressBooksSyncToCdavRetrieveWithResponse request returning *AddressBooksSyncToCdavRetrieveResponse
func (c *ClientWithResponses) AddressBooksSyncToCdavRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AddressBooksSyncToCdavRetrieveResponse, error) {
	rsp, err := c.AddressBooksSyncToCdavRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddressBooksSyncToCdavRetrieveResponse(rsp)
}

// AdminComponentsListWithResponse request returning *AdminComponentsListResponse
func (c *ClientWithResponses) AdminComponentsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminComponentsListResponse, error) {
	rsp, err := c.AdminComponentsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminComponentsListResponse(rsp)
}

// AlarmsListWithResponse request returning *AlarmsListResponse
func (c *ClientWithResponses) AlarmsListWithResponse(ctx context.Context, params *AlarmsListParams, reqEditors ...RequestEditorFn) (*AlarmsListResponse, error) {
	rsp, err := c.AlarmsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmsListResponse(rsp)
}

// AlarmsBulkDeleteDestroyWithResponse request returning *AlarmsBulkDeleteDestroyResponse
func (c *ClientWithResponses) AlarmsBulkDeleteDestroyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AlarmsBulkDeleteDestroyResponse, error) {
	rsp, err := c.AlarmsBulkDeleteDestroy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmsBulkDeleteDestroyResponse(rsp)
}

// AlarmsDestroyWithResponse request returning *AlarmsDestroyResponse
func (c *ClientWithResponses) AlarmsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AlarmsDestroyResponse, error) {
	rsp, err := c.AlarmsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmsDestroyResponse(rsp)
}

// AlarmsRetrieveWithResponse request returning *AlarmsRetrieveResponse
func (c *ClientWithResponses) AlarmsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AlarmsRetrieveResponse, error) {
	rsp, err := c.AlarmsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmsRetrieveResponse(rsp)
}

// AlarmsSwitchPartialUpdateWithBodyWithResponse request with arbitrary body returning *AlarmsSwitchPartialUpdateResponse
func (c *ClientWithResponses) AlarmsSwitchPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlarmsSwitchPartialUpdateResponse, error) {
	rsp, err := c.AlarmsSwitchPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmsSwitchPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AlarmsSwitchPartialUpdateWithResponse(ctx context.Context, id int, body AlarmsSwitchPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AlarmsSwitchPartialUpdateResponse, error) {
	rsp, err := c.AlarmsSwitchPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmsSwitchPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AlarmsSwitchPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AlarmsSwitchPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AlarmsSwitchPartialUpdateResponse, error) {
	rsp, err := c.AlarmsSwitchPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlarmsSwitchPartialUpdateResponse(rsp)
}

// AliasesListWithResponse request returning *AliasesListResponse
func (c *ClientWithResponses) AliasesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AliasesListResponse, error) {
	rsp, err := c.AliasesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesListResponse(rsp)
}

// AliasesCreateWithBodyWithResponse request with arbitrary body returning *AliasesCreateResponse
func (c *ClientWithResponses) AliasesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AliasesCreateResponse, error) {
	rsp, err := c.AliasesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesCreateResponse(rsp)
}

func (c *ClientWithResponses) AliasesCreateWithResponse(ctx context.Context, body AliasesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AliasesCreateResponse, error) {
	rsp, err := c.AliasesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesCreateResponse(rsp)
}

func (c *ClientWithResponses) AliasesCreateWithFormdataBodyWithResponse(ctx context.Context, body AliasesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AliasesCreateResponse, error) {
	rsp, err := c.AliasesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesCreateResponse(rsp)
}

// AliasesRandomAddressRetrieveWithResponse request returning *AliasesRandomAddressRetrieveResponse
func (c *ClientWithResponses) AliasesRandomAddressRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AliasesRandomAddressRetrieveResponse, error) {
	rsp, err := c.AliasesRandomAddressRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesRandomAddressRetrieveResponse(rsp)
}

// AliasesValidateCreateWithBodyWithResponse request with arbitrary body returning *AliasesValidateCreateResponse
func (c *ClientWithResponses) AliasesValidateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AliasesValidateCreateResponse, error) {
	rsp, err := c.AliasesValidateCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesValidateCreateResponse(rsp)
}

func (c *ClientWithResponses) AliasesValidateCreateWithResponse(ctx context.Context, body AliasesValidateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AliasesValidateCreateResponse, error) {
	rsp, err := c.AliasesValidateCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesValidateCreateResponse(rsp)
}

func (c *ClientWithResponses) AliasesValidateCreateWithFormdataBodyWithResponse(ctx context.Context, body AliasesValidateCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AliasesValidateCreateResponse, error) {
	rsp, err := c.AliasesValidateCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesValidateCreateResponse(rsp)
}

// AliasesDestroyWithResponse request returning *AliasesDestroyResponse
func (c *ClientWithResponses) AliasesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AliasesDestroyResponse, error) {
	rsp, err := c.AliasesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesDestroyResponse(rsp)
}

// AliasesRetrieveWithResponse request returning *AliasesRetrieveResponse
func (c *ClientWithResponses) AliasesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*AliasesRetrieveResponse, error) {
	rsp, err := c.AliasesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesRetrieveResponse(rsp)
}

// AliasesPartialUpdateWithBodyWithResponse request with arbitrary body returning *AliasesPartialUpdateResponse
func (c *ClientWithResponses) AliasesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AliasesPartialUpdateResponse, error) {
	rsp, err := c.AliasesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AliasesPartialUpdateWithResponse(ctx context.Context, id int, body AliasesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AliasesPartialUpdateResponse, error) {
	rsp, err := c.AliasesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) AliasesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AliasesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AliasesPartialUpdateResponse, error) {
	rsp, err := c.AliasesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesPartialUpdateResponse(rsp)
}

// AliasesUpdateWithBodyWithResponse request with arbitrary body returning *AliasesUpdateResponse
func (c *ClientWithResponses) AliasesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AliasesUpdateResponse, error) {
	rsp, err := c.AliasesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesUpdateResponse(rsp)
}

func (c *ClientWithResponses) AliasesUpdateWithResponse(ctx context.Context, id int, body AliasesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AliasesUpdateResponse, error) {
	rsp, err := c.AliasesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesUpdateResponse(rsp)
}

func (c *ClientWithResponses) AliasesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body AliasesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*AliasesUpdateResponse, error) {
	rsp, err := c.AliasesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliasesUpdateResponse(rsp)
}

// ArmessagesListWithResponse request returning *ArmessagesListResponse
func (c *ClientWithResponses) ArmessagesListWithResponse(ctx context.Context, params *ArmessagesListParams, reqEditors ...RequestEditorFn) (*ArmessagesListResponse, error) {
	rsp, err := c.ArmessagesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesListResponse(rsp)
}

// ArmessagesCreateWithBodyWithResponse request with arbitrary body returning *ArmessagesCreateResponse
func (c *ClientWithResponses) ArmessagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArmessagesCreateResponse, error) {
	rsp, err := c.ArmessagesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesCreateResponse(rsp)
}

func (c *ClientWithResponses) ArmessagesCreateWithResponse(ctx context.Context, body ArmessagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesCreateResponse, error) {
	rsp, err := c.ArmessagesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesCreateResponse(rsp)
}

func (c *ClientWithResponses) ArmessagesCreateWithFormdataBodyWithResponse(ctx context.Context, body ArmessagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesCreateResponse, error) {
	rsp, err := c.ArmessagesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesCreateResponse(rsp)
}

// ArmessagesRetrieveWithResponse request returning *ArmessagesRetrieveResponse
func (c *ClientWithResponses) ArmessagesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ArmessagesRetrieveResponse, error) {
	rsp, err := c.ArmessagesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesRetrieveResponse(rsp)
}

// ArmessagesPartialUpdateWithBodyWithResponse request with arbitrary body returning *ArmessagesPartialUpdateResponse
func (c *ClientWithResponses) ArmessagesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArmessagesPartialUpdateResponse, error) {
	rsp, err := c.ArmessagesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ArmessagesPartialUpdateWithResponse(ctx context.Context, id int, body ArmessagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesPartialUpdateResponse, error) {
	rsp, err := c.ArmessagesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ArmessagesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ArmessagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesPartialUpdateResponse, error) {
	rsp, err := c.ArmessagesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesPartialUpdateResponse(rsp)
}

// ArmessagesUpdateWithBodyWithResponse request with arbitrary body returning *ArmessagesUpdateResponse
func (c *ClientWithResponses) ArmessagesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArmessagesUpdateResponse, error) {
	rsp, err := c.ArmessagesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ArmessagesUpdateWithResponse(ctx context.Context, id int, body ArmessagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesUpdateResponse, error) {
	rsp, err := c.ArmessagesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ArmessagesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ArmessagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ArmessagesUpdateResponse, error) {
	rsp, err := c.ArmessagesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArmessagesUpdateResponse(rsp)
}

// AttendeesListWithResponse request returning *AttendeesListResponse
func (c *ClientWithResponses) AttendeesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AttendeesListResponse, error) {
	rsp, err := c.AttendeesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttendeesListResponse(rsp)
}

// AttendeesRetrieveWithResponse request returning *AttendeesRetrieveResponse
func (c *ClientWithResponses) AttendeesRetrieveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AttendeesRetrieveResponse, error) {
	rsp, err := c.AttendeesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttendeesRetrieveResponse(rsp)
}

// CategoriesListWithResponse request returning *CategoriesListResponse
func (c *ClientWithResponses) CategoriesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CategoriesListResponse, error) {
	rsp, err := c.CategoriesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesListResponse(rsp)
}

// CategoriesCreateWithBodyWithResponse request with arbitrary body returning *CategoriesCreateResponse
func (c *ClientWithResponses) CategoriesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoriesCreateResponse, error) {
	rsp, err := c.CategoriesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesCreateResponse(rsp)
}

func (c *ClientWithResponses) CategoriesCreateWithResponse(ctx context.Context, body CategoriesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoriesCreateResponse, error) {
	rsp, err := c.CategoriesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesCreateResponse(rsp)
}

func (c *ClientWithResponses) CategoriesCreateWithFormdataBodyWithResponse(ctx context.Context, body CategoriesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CategoriesCreateResponse, error) {
	rsp, err := c.CategoriesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesCreateResponse(rsp)
}

// CategoriesDestroyWithResponse request returning *CategoriesDestroyResponse
func (c *ClientWithResponses) CategoriesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CategoriesDestroyResponse, error) {
	rsp, err := c.CategoriesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesDestroyResponse(rsp)
}

// CategoriesRetrieveWithResponse request returning *CategoriesRetrieveResponse
func (c *ClientWithResponses) CategoriesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CategoriesRetrieveResponse, error) {
	rsp, err := c.CategoriesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesRetrieveResponse(rsp)
}

// CategoriesPartialUpdateWithBodyWithResponse request with arbitrary body returning *CategoriesPartialUpdateResponse
func (c *ClientWithResponses) CategoriesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoriesPartialUpdateResponse, error) {
	rsp, err := c.CategoriesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) CategoriesPartialUpdateWithResponse(ctx context.Context, id int, body CategoriesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoriesPartialUpdateResponse, error) {
	rsp, err := c.CategoriesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) CategoriesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CategoriesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CategoriesPartialUpdateResponse, error) {
	rsp, err := c.CategoriesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesPartialUpdateResponse(rsp)
}

// CategoriesUpdateWithBodyWithResponse request with arbitrary body returning *CategoriesUpdateResponse
func (c *ClientWithResponses) CategoriesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoriesUpdateResponse, error) {
	rsp, err := c.CategoriesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesUpdateResponse(rsp)
}

func (c *ClientWithResponses) CategoriesUpdateWithResponse(ctx context.Context, id int, body CategoriesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoriesUpdateResponse, error) {
	rsp, err := c.CategoriesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesUpdateResponse(rsp)
}

func (c *ClientWithResponses) CategoriesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CategoriesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CategoriesUpdateResponse, error) {
	rsp, err := c.CategoriesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesUpdateResponse(rsp)
}

// ContactsListWithResponse request returning *ContactsListResponse
func (c *ClientWithResponses) ContactsListWithResponse(ctx context.Context, params *ContactsListParams, reqEditors ...RequestEditorFn) (*ContactsListResponse, error) {
	rsp, err := c.ContactsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsListResponse(rsp)
}

// ContactsCreateWithBodyWithResponse request with arbitrary body returning *ContactsCreateResponse
func (c *ClientWithResponses) ContactsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactsCreateResponse, error) {
	rsp, err := c.ContactsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsCreateResponse(rsp)
}

func (c *ClientWithResponses) ContactsCreateWithResponse(ctx context.Context, body ContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContactsCreateResponse, error) {
	rsp, err := c.ContactsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsCreateResponse(rsp)
}

func (c *ClientWithResponses) ContactsCreateWithFormdataBodyWithResponse(ctx context.Context, body ContactsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContactsCreateResponse, error) {
	rsp, err := c.ContactsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsCreateResponse(rsp)
}

// ContactsDestroyWithResponse request returning *ContactsDestroyResponse
func (c *ClientWithResponses) ContactsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ContactsDestroyResponse, error) {
	rsp, err := c.ContactsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsDestroyResponse(rsp)
}

// ContactsRetrieveWithResponse request returning *ContactsRetrieveResponse
func (c *ClientWithResponses) ContactsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ContactsRetrieveResponse, error) {
	rsp, err := c.ContactsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsRetrieveResponse(rsp)
}

// ContactsPartialUpdateWithBodyWithResponse request with arbitrary body returning *ContactsPartialUpdateResponse
func (c *ClientWithResponses) ContactsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactsPartialUpdateResponse, error) {
	rsp, err := c.ContactsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContactsPartialUpdateWithResponse(ctx context.Context, id int, body ContactsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContactsPartialUpdateResponse, error) {
	rsp, err := c.ContactsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContactsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ContactsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContactsPartialUpdateResponse, error) {
	rsp, err := c.ContactsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsPartialUpdateResponse(rsp)
}

// ContactsUpdateWithBodyWithResponse request with arbitrary body returning *ContactsUpdateResponse
func (c *ClientWithResponses) ContactsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactsUpdateResponse, error) {
	rsp, err := c.ContactsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContactsUpdateWithResponse(ctx context.Context, id int, body ContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContactsUpdateResponse, error) {
	rsp, err := c.ContactsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ContactsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ContactsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ContactsUpdateResponse, error) {
	rsp, err := c.ContactsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactsUpdateResponse(rsp)
}

// CredentialsRetrieveWithResponse request returning *CredentialsRetrieveResponse
func (c *ClientWithResponses) CredentialsRetrieveWithResponse(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*CredentialsRetrieveResponse, error) {
	rsp, err := c.CredentialsRetrieve(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsRetrieveResponse(rsp)
}

// DomainaliasesListWithResponse request returning *DomainaliasesListResponse
func (c *ClientWithResponses) DomainaliasesListWithResponse(ctx context.Context, params *DomainaliasesListParams, reqEditors ...RequestEditorFn) (*DomainaliasesListResponse, error) {
	rsp, err := c.DomainaliasesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesListResponse(rsp)
}

// DomainaliasesCreateWithBodyWithResponse request with arbitrary body returning *DomainaliasesCreateResponse
func (c *ClientWithResponses) DomainaliasesCreateWithBodyWithResponse(ctx context.Context, params *DomainaliasesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainaliasesCreateResponse, error) {
	rsp, err := c.DomainaliasesCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainaliasesCreateWithResponse(ctx context.Context, params *DomainaliasesCreateParams, body DomainaliasesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesCreateResponse, error) {
	rsp, err := c.DomainaliasesCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainaliasesCreateWithFormdataBodyWithResponse(ctx context.Context, params *DomainaliasesCreateParams, body DomainaliasesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesCreateResponse, error) {
	rsp, err := c.DomainaliasesCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesCreateResponse(rsp)
}

// DomainaliasesDestroyWithResponse request returning *DomainaliasesDestroyResponse
func (c *ClientWithResponses) DomainaliasesDestroyWithResponse(ctx context.Context, id int, params *DomainaliasesDestroyParams, reqEditors ...RequestEditorFn) (*DomainaliasesDestroyResponse, error) {
	rsp, err := c.DomainaliasesDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesDestroyResponse(rsp)
}

// DomainaliasesRetrieveWithResponse request returning *DomainaliasesRetrieveResponse
func (c *ClientWithResponses) DomainaliasesRetrieveWithResponse(ctx context.Context, id int, params *DomainaliasesRetrieveParams, reqEditors ...RequestEditorFn) (*DomainaliasesRetrieveResponse, error) {
	rsp, err := c.DomainaliasesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesRetrieveResponse(rsp)
}

// DomainaliasesPartialUpdateWithBodyWithResponse request with arbitrary body returning *DomainaliasesPartialUpdateResponse
func (c *ClientWithResponses) DomainaliasesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainaliasesPartialUpdateResponse, error) {
	rsp, err := c.DomainaliasesPartialUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainaliasesPartialUpdateWithResponse(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesPartialUpdateResponse, error) {
	rsp, err := c.DomainaliasesPartialUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainaliasesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, params *DomainaliasesPartialUpdateParams, body DomainaliasesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesPartialUpdateResponse, error) {
	rsp, err := c.DomainaliasesPartialUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesPartialUpdateResponse(rsp)
}

// DomainaliasesUpdateWithBodyWithResponse request with arbitrary body returning *DomainaliasesUpdateResponse
func (c *ClientWithResponses) DomainaliasesUpdateWithBodyWithResponse(ctx context.Context, id int, params *DomainaliasesUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainaliasesUpdateResponse, error) {
	rsp, err := c.DomainaliasesUpdateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainaliasesUpdateWithResponse(ctx context.Context, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesUpdateResponse, error) {
	rsp, err := c.DomainaliasesUpdate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainaliasesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, params *DomainaliasesUpdateParams, body DomainaliasesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainaliasesUpdateResponse, error) {
	rsp, err := c.DomainaliasesUpdateWithFormdataBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainaliasesUpdateResponse(rsp)
}

// DomainsListWithResponse request returning *DomainsListResponse
func (c *ClientWithResponses) DomainsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DomainsListResponse, error) {
	rsp, err := c.DomainsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsListResponse(rsp)
}

// DomainsCreateWithBodyWithResponse request with arbitrary body returning *DomainsCreateResponse
func (c *ClientWithResponses) DomainsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error) {
	rsp, err := c.DomainsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsCreateWithResponse(ctx context.Context, body DomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error) {
	rsp, err := c.DomainsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsCreateWithFormdataBodyWithResponse(ctx context.Context, body DomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateResponse, error) {
	rsp, err := c.DomainsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateResponse(rsp)
}

// DomainsExportRetrieveWithResponse request returning *DomainsExportRetrieveResponse
func (c *ClientWithResponses) DomainsExportRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DomainsExportRetrieveResponse, error) {
	rsp, err := c.DomainsExportRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsExportRetrieveResponse(rsp)
}

// DomainsImportCreateWithBodyWithResponse request with arbitrary body returning *DomainsImportCreateResponse
func (c *ClientWithResponses) DomainsImportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsImportCreateResponse, error) {
	rsp, err := c.DomainsImportCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsImportCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsImportCreateWithFormdataBodyWithResponse(ctx context.Context, body DomainsImportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsImportCreateResponse, error) {
	rsp, err := c.DomainsImportCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsImportCreateResponse(rsp)
}

// DomainsRetrieveWithResponse request returning *DomainsRetrieveResponse
func (c *ClientWithResponses) DomainsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DomainsRetrieveResponse, error) {
	rsp, err := c.DomainsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsRetrieveResponse(rsp)
}

// DomainsPartialUpdateWithBodyWithResponse request with arbitrary body returning *DomainsPartialUpdateResponse
func (c *ClientWithResponses) DomainsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error) {
	rsp, err := c.DomainsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainsPartialUpdateWithResponse(ctx context.Context, id int, body DomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error) {
	rsp, err := c.DomainsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsPartialUpdateResponse, error) {
	rsp, err := c.DomainsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsPartialUpdateResponse(rsp)
}

// DomainsUpdateWithBodyWithResponse request with arbitrary body returning *DomainsUpdateResponse
func (c *ClientWithResponses) DomainsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error) {
	rsp, err := c.DomainsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainsUpdateWithResponse(ctx context.Context, id int, body DomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error) {
	rsp, err := c.DomainsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateResponse, error) {
	rsp, err := c.DomainsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsUpdateResponse(rsp)
}

// DomainsAdministratorsRetrieveWithResponse request returning *DomainsAdministratorsRetrieveResponse
func (c *ClientWithResponses) DomainsAdministratorsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DomainsAdministratorsRetrieveResponse, error) {
	rsp, err := c.DomainsAdministratorsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsAdministratorsRetrieveResponse(rsp)
}

// DomainsAdministratorsAddCreateWithBodyWithResponse request with arbitrary body returning *DomainsAdministratorsAddCreateResponse
func (c *ClientWithResponses) DomainsAdministratorsAddCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsAdministratorsAddCreateResponse, error) {
	rsp, err := c.DomainsAdministratorsAddCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsAdministratorsAddCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsAdministratorsAddCreateWithResponse(ctx context.Context, id int, body DomainsAdministratorsAddCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsAdministratorsAddCreateResponse, error) {
	rsp, err := c.DomainsAdministratorsAddCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsAdministratorsAddCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsAdministratorsAddCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsAdministratorsAddCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsAdministratorsAddCreateResponse, error) {
	rsp, err := c.DomainsAdministratorsAddCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsAdministratorsAddCreateResponse(rsp)
}

// DomainsAdministratorsRemoveCreateWithBodyWithResponse request with arbitrary body returning *DomainsAdministratorsRemoveCreateResponse
func (c *ClientWithResponses) DomainsAdministratorsRemoveCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsAdministratorsRemoveCreateResponse, error) {
	rsp, err := c.DomainsAdministratorsRemoveCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsAdministratorsRemoveCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsAdministratorsRemoveCreateWithResponse(ctx context.Context, id int, body DomainsAdministratorsRemoveCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsAdministratorsRemoveCreateResponse, error) {
	rsp, err := c.DomainsAdministratorsRemoveCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsAdministratorsRemoveCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsAdministratorsRemoveCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsAdministratorsRemoveCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsAdministratorsRemoveCreateResponse, error) {
	rsp, err := c.DomainsAdministratorsRemoveCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsAdministratorsRemoveCreateResponse(rsp)
}

// DomainsDeleteCreateWithBodyWithResponse request with arbitrary body returning *DomainsDeleteCreateResponse
func (c *ClientWithResponses) DomainsDeleteCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsDeleteCreateResponse, error) {
	rsp, err := c.DomainsDeleteCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDeleteCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsDeleteCreateWithResponse(ctx context.Context, id int, body DomainsDeleteCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsDeleteCreateResponse, error) {
	rsp, err := c.DomainsDeleteCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDeleteCreateResponse(rsp)
}

func (c *ClientWithResponses) DomainsDeleteCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body DomainsDeleteCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DomainsDeleteCreateResponse, error) {
	rsp, err := c.DomainsDeleteCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDeleteCreateResponse(rsp)
}

// DomainsDmarcAlignmentStatsRetrieveWithResponse request returning *DomainsDmarcAlignmentStatsRetrieveResponse
func (c *ClientWithResponses) DomainsDmarcAlignmentStatsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DomainsDmarcAlignmentStatsRetrieveResponse, error) {
	rsp, err := c.DomainsDmarcAlignmentStatsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDmarcAlignmentStatsRetrieveResponse(rsp)
}

// DomainsDnsDetailRetrieveWithResponse request returning *DomainsDnsDetailRetrieveResponse
func (c *ClientWithResponses) DomainsDnsDetailRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DomainsDnsDetailRetrieveResponse, error) {
	rsp, err := c.DomainsDnsDetailRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDnsDetailRetrieveResponse(rsp)
}

// EmailProvidersListWithResponse request returning *EmailProvidersListResponse
func (c *ClientWithResponses) EmailProvidersListWithResponse(ctx context.Context, params *EmailProvidersListParams, reqEditors ...RequestEditorFn) (*EmailProvidersListResponse, error) {
	rsp, err := c.EmailProvidersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersListResponse(rsp)
}

// EmailProvidersCreateWithBodyWithResponse request with arbitrary body returning *EmailProvidersCreateResponse
func (c *ClientWithResponses) EmailProvidersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersCreateResponse, error) {
	rsp, err := c.EmailProvidersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersCreateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersCreateWithResponse(ctx context.Context, body EmailProvidersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCreateResponse, error) {
	rsp, err := c.EmailProvidersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersCreateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersCreateWithFormdataBodyWithResponse(ctx context.Context, body EmailProvidersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCreateResponse, error) {
	rsp, err := c.EmailProvidersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersCreateResponse(rsp)
}

// EmailProvidersCheckAssociatedDomainCreateWithBodyWithResponse request with arbitrary body returning *EmailProvidersCheckAssociatedDomainCreateResponse
func (c *ClientWithResponses) EmailProvidersCheckAssociatedDomainCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersCheckAssociatedDomainCreateResponse, error) {
	rsp, err := c.EmailProvidersCheckAssociatedDomainCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersCheckAssociatedDomainCreateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersCheckAssociatedDomainCreateWithResponse(ctx context.Context, body EmailProvidersCheckAssociatedDomainCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCheckAssociatedDomainCreateResponse, error) {
	rsp, err := c.EmailProvidersCheckAssociatedDomainCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersCheckAssociatedDomainCreateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersCheckAssociatedDomainCreateWithFormdataBodyWithResponse(ctx context.Context, body EmailProvidersCheckAssociatedDomainCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCheckAssociatedDomainCreateResponse, error) {
	rsp, err := c.EmailProvidersCheckAssociatedDomainCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersCheckAssociatedDomainCreateResponse(rsp)
}

// EmailProvidersCheckConnectionCreateWithBodyWithResponse request with arbitrary body returning *EmailProvidersCheckConnectionCreateResponse
func (c *ClientWithResponses) EmailProvidersCheckConnectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersCheckConnectionCreateResponse, error) {
	rsp, err := c.EmailProvidersCheckConnectionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersCheckConnectionCreateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersCheckConnectionCreateWithResponse(ctx context.Context, body EmailProvidersCheckConnectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCheckConnectionCreateResponse, error) {
	rsp, err := c.EmailProvidersCheckConnectionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersCheckConnectionCreateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersCheckConnectionCreateWithFormdataBodyWithResponse(ctx context.Context, body EmailProvidersCheckConnectionCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersCheckConnectionCreateResponse, error) {
	rsp, err := c.EmailProvidersCheckConnectionCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersCheckConnectionCreateResponse(rsp)
}

// EmailProvidersDestroyWithResponse request returning *EmailProvidersDestroyResponse
func (c *ClientWithResponses) EmailProvidersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EmailProvidersDestroyResponse, error) {
	rsp, err := c.EmailProvidersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersDestroyResponse(rsp)
}

// EmailProvidersRetrieveWithResponse request returning *EmailProvidersRetrieveResponse
func (c *ClientWithResponses) EmailProvidersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EmailProvidersRetrieveResponse, error) {
	rsp, err := c.EmailProvidersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersRetrieveResponse(rsp)
}

// EmailProvidersPartialUpdateWithBodyWithResponse request with arbitrary body returning *EmailProvidersPartialUpdateResponse
func (c *ClientWithResponses) EmailProvidersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersPartialUpdateResponse, error) {
	rsp, err := c.EmailProvidersPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersPartialUpdateWithResponse(ctx context.Context, id int, body EmailProvidersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersPartialUpdateResponse, error) {
	rsp, err := c.EmailProvidersPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EmailProvidersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersPartialUpdateResponse, error) {
	rsp, err := c.EmailProvidersPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersPartialUpdateResponse(rsp)
}

// EmailProvidersUpdateWithBodyWithResponse request with arbitrary body returning *EmailProvidersUpdateResponse
func (c *ClientWithResponses) EmailProvidersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailProvidersUpdateResponse, error) {
	rsp, err := c.EmailProvidersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersUpdateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersUpdateWithResponse(ctx context.Context, id int, body EmailProvidersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersUpdateResponse, error) {
	rsp, err := c.EmailProvidersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersUpdateResponse(rsp)
}

func (c *ClientWithResponses) EmailProvidersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EmailProvidersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EmailProvidersUpdateResponse, error) {
	rsp, err := c.EmailProvidersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailProvidersUpdateResponse(rsp)
}

// EmailsListWithResponse request returning *EmailsListResponse
func (c *ClientWithResponses) EmailsListWithResponse(ctx context.Context, params *EmailsListParams, reqEditors ...RequestEditorFn) (*EmailsListResponse, error) {
	rsp, err := c.EmailsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailsListResponse(rsp)
}

// EmailsRetrieveWithResponse request returning *EmailsRetrieveResponse
func (c *ClientWithResponses) EmailsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EmailsRetrieveResponse, error) {
	rsp, err := c.EmailsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailsRetrieveResponse(rsp)
}

// IdentitiesRetrieveWithResponse request returning *IdentitiesRetrieveResponse
func (c *ClientWithResponses) IdentitiesRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IdentitiesRetrieveResponse, error) {
	rsp, err := c.IdentitiesRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdentitiesRetrieveResponse(rsp)
}

// IdentitiesExportRetrieveWithResponse request returning *IdentitiesExportRetrieveResponse
func (c *ClientWithResponses) IdentitiesExportRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IdentitiesExportRetrieveResponse, error) {
	rsp, err := c.IdentitiesExportRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdentitiesExportRetrieveResponse(rsp)
}

// IdentitiesImportCreateWithBodyWithResponse request with arbitrary body returning *IdentitiesImportCreateResponse
func (c *ClientWithResponses) IdentitiesImportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdentitiesImportCreateResponse, error) {
	rsp, err := c.IdentitiesImportCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdentitiesImportCreateResponse(rsp)
}

func (c *ClientWithResponses) IdentitiesImportCreateWithFormdataBodyWithResponse(ctx context.Context, body IdentitiesImportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*IdentitiesImportCreateResponse, error) {
	rsp, err := c.IdentitiesImportCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdentitiesImportCreateResponse(rsp)
}

// LanguagesRetrieveWithResponse request returning *LanguagesRetrieveResponse
func (c *ClientWithResponses) LanguagesRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LanguagesRetrieveResponse, error) {
	rsp, err := c.LanguagesRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesRetrieveResponse(rsp)
}

// LogsAuditTrailListWithResponse request returning *LogsAuditTrailListResponse
func (c *ClientWithResponses) LogsAuditTrailListWithResponse(ctx context.Context, params *LogsAuditTrailListParams, reqEditors ...RequestEditorFn) (*LogsAuditTrailListResponse, error) {
	rsp, err := c.LogsAuditTrailList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogsAuditTrailListResponse(rsp)
}

// LogsAuditTrailRetrieveWithResponse request returning *LogsAuditTrailRetrieveResponse
func (c *ClientWithResponses) LogsAuditTrailRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LogsAuditTrailRetrieveResponse, error) {
	rsp, err := c.LogsAuditTrailRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogsAuditTrailRetrieveResponse(rsp)
}

// LogsMessagesListWithResponse request returning *LogsMessagesListResponse
func (c *ClientWithResponses) LogsMessagesListWithResponse(ctx context.Context, params *LogsMessagesListParams, reqEditors ...RequestEditorFn) (*LogsMessagesListResponse, error) {
	rsp, err := c.LogsMessagesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogsMessagesListResponse(rsp)
}

// LogsMessagesRetrieveWithResponse request returning *LogsMessagesRetrieveResponse
func (c *ClientWithResponses) LogsMessagesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LogsMessagesRetrieveResponse, error) {
	rsp, err := c.LogsMessagesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogsMessagesRetrieveResponse(rsp)
}

// MailboxesListWithResponse request returning *MailboxesListResponse
func (c *ClientWithResponses) MailboxesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MailboxesListResponse, error) {
	rsp, err := c.MailboxesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailboxesListResponse(rsp)
}

// MailboxesRetrieveWithResponse request returning *MailboxesRetrieveResponse
func (c *ClientWithResponses) MailboxesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MailboxesRetrieveResponse, error) {
	rsp, err := c.MailboxesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMailboxesRetrieveResponse(rsp)
}

// MigrationsListWithResponse request returning *MigrationsListResponse
func (c *ClientWithResponses) MigrationsListWithResponse(ctx context.Context, params *MigrationsListParams, reqEditors ...RequestEditorFn) (*MigrationsListResponse, error) {
	rsp, err := c.MigrationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrationsListResponse(rsp)
}

// MigrationsDestroyWithResponse request returning *MigrationsDestroyResponse
func (c *ClientWithResponses) MigrationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MigrationsDestroyResponse, error) {
	rsp, err := c.MigrationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrationsDestroyResponse(rsp)
}

// MigrationsRetrieveWithResponse request returning *MigrationsRetrieveResponse
func (c *ClientWithResponses) MigrationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MigrationsRetrieveResponse, error) {
	rsp, err := c.MigrationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrationsRetrieveResponse(rsp)
}

// ParametersApplicationsListWithResponse request returning *ParametersApplicationsListResponse
func (c *ClientWithResponses) ParametersApplicationsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ParametersApplicationsListResponse, error) {
	rsp, err := c.ParametersApplicationsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParametersApplicationsListResponse(rsp)
}

// ParametersStructureListWithResponse request returning *ParametersStructureListResponse
func (c *ClientWithResponses) ParametersStructureListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ParametersStructureListResponse, error) {
	rsp, err := c.ParametersStructureList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParametersStructureListResponse(rsp)
}

// ParametersRetrieveWithResponse request returning *ParametersRetrieveResponse
func (c *ClientWithResponses) ParametersRetrieveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ParametersRetrieveResponse, error) {
	rsp, err := c.ParametersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParametersRetrieveResponse(rsp)
}

// ParametersUpdateWithResponse request returning *ParametersUpdateResponse
func (c *ClientWithResponses) ParametersUpdateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ParametersUpdateResponse, error) {
	rsp, err := c.ParametersUpdate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParametersUpdateResponse(rsp)
}

// PasswordResetCreateWithResponse request returning *PasswordResetCreateResponse
func (c *ClientWithResponses) PasswordResetCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PasswordResetCreateResponse, error) {
	rsp, err := c.PasswordResetCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePasswordResetCreateResponse(rsp)
}

// RelaydomainsListWithResponse request returning *RelaydomainsListResponse
func (c *ClientWithResponses) RelaydomainsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RelaydomainsListResponse, error) {
	rsp, err := c.RelaydomainsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsListResponse(rsp)
}

// RelaydomainsCreateWithBodyWithResponse request with arbitrary body returning *RelaydomainsCreateResponse
func (c *ClientWithResponses) RelaydomainsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RelaydomainsCreateResponse, error) {
	rsp, err := c.RelaydomainsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsCreateResponse(rsp)
}

func (c *ClientWithResponses) RelaydomainsCreateWithResponse(ctx context.Context, body RelaydomainsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsCreateResponse, error) {
	rsp, err := c.RelaydomainsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsCreateResponse(rsp)
}

func (c *ClientWithResponses) RelaydomainsCreateWithFormdataBodyWithResponse(ctx context.Context, body RelaydomainsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsCreateResponse, error) {
	rsp, err := c.RelaydomainsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsCreateResponse(rsp)
}

// RelaydomainsDestroyWithResponse request returning *RelaydomainsDestroyResponse
func (c *ClientWithResponses) RelaydomainsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RelaydomainsDestroyResponse, error) {
	rsp, err := c.RelaydomainsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsDestroyResponse(rsp)
}

// RelaydomainsRetrieveWithResponse request returning *RelaydomainsRetrieveResponse
func (c *ClientWithResponses) RelaydomainsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RelaydomainsRetrieveResponse, error) {
	rsp, err := c.RelaydomainsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsRetrieveResponse(rsp)
}

// RelaydomainsPartialUpdateWithBodyWithResponse request with arbitrary body returning *RelaydomainsPartialUpdateResponse
func (c *ClientWithResponses) RelaydomainsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RelaydomainsPartialUpdateResponse, error) {
	rsp, err := c.RelaydomainsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RelaydomainsPartialUpdateWithResponse(ctx context.Context, id int, body RelaydomainsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsPartialUpdateResponse, error) {
	rsp, err := c.RelaydomainsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RelaydomainsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RelaydomainsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsPartialUpdateResponse, error) {
	rsp, err := c.RelaydomainsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsPartialUpdateResponse(rsp)
}

// RelaydomainsUpdateWithBodyWithResponse request with arbitrary body returning *RelaydomainsUpdateResponse
func (c *ClientWithResponses) RelaydomainsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RelaydomainsUpdateResponse, error) {
	rsp, err := c.RelaydomainsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsUpdateResponse(rsp)
}

func (c *ClientWithResponses) RelaydomainsUpdateWithResponse(ctx context.Context, id int, body RelaydomainsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsUpdateResponse, error) {
	rsp, err := c.RelaydomainsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsUpdateResponse(rsp)
}

func (c *ClientWithResponses) RelaydomainsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RelaydomainsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RelaydomainsUpdateResponse, error) {
	rsp, err := c.RelaydomainsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelaydomainsUpdateResponse(rsp)
}

// ResetConfirmCreateWithResponse request returning *ResetConfirmCreateResponse
func (c *ClientWithResponses) ResetConfirmCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetConfirmCreateResponse, error) {
	rsp, err := c.ResetConfirmCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetConfirmCreateResponse(rsp)
}

// ResourcesRetrieveWithResponse request returning *ResourcesRetrieveResponse
func (c *ClientWithResponses) ResourcesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ResourcesRetrieveResponse, error) {
	rsp, err := c.ResourcesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesRetrieveResponse(rsp)
}

// ResourcesPartialUpdateWithBodyWithResponse request with arbitrary body returning *ResourcesPartialUpdateResponse
func (c *ClientWithResponses) ResourcesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourcesPartialUpdateResponse, error) {
	rsp, err := c.ResourcesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ResourcesPartialUpdateWithResponse(ctx context.Context, id int, body ResourcesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourcesPartialUpdateResponse, error) {
	rsp, err := c.ResourcesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ResourcesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ResourcesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ResourcesPartialUpdateResponse, error) {
	rsp, err := c.ResourcesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesPartialUpdateResponse(rsp)
}

// ResourcesUpdateWithBodyWithResponse request with arbitrary body returning *ResourcesUpdateResponse
func (c *ClientWithResponses) ResourcesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error) {
	rsp, err := c.ResourcesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ResourcesUpdateWithResponse(ctx context.Context, id int, body ResourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error) {
	rsp, err := c.ResourcesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ResourcesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ResourcesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error) {
	rsp, err := c.ResourcesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesUpdateResponse(rsp)
}

// SenderaddressesListWithResponse request returning *SenderaddressesListResponse
func (c *ClientWithResponses) SenderaddressesListWithResponse(ctx context.Context, params *SenderaddressesListParams, reqEditors ...RequestEditorFn) (*SenderaddressesListResponse, error) {
	rsp, err := c.SenderaddressesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesListResponse(rsp)
}

// SenderaddressesCreateWithBodyWithResponse request with arbitrary body returning *SenderaddressesCreateResponse
func (c *ClientWithResponses) SenderaddressesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SenderaddressesCreateResponse, error) {
	rsp, err := c.SenderaddressesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesCreateResponse(rsp)
}

func (c *ClientWithResponses) SenderaddressesCreateWithResponse(ctx context.Context, body SenderaddressesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesCreateResponse, error) {
	rsp, err := c.SenderaddressesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesCreateResponse(rsp)
}

func (c *ClientWithResponses) SenderaddressesCreateWithFormdataBodyWithResponse(ctx context.Context, body SenderaddressesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesCreateResponse, error) {
	rsp, err := c.SenderaddressesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesCreateResponse(rsp)
}

// SenderaddressesDestroyWithResponse request returning *SenderaddressesDestroyResponse
func (c *ClientWithResponses) SenderaddressesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SenderaddressesDestroyResponse, error) {
	rsp, err := c.SenderaddressesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesDestroyResponse(rsp)
}

// SenderaddressesRetrieveWithResponse request returning *SenderaddressesRetrieveResponse
func (c *ClientWithResponses) SenderaddressesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SenderaddressesRetrieveResponse, error) {
	rsp, err := c.SenderaddressesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesRetrieveResponse(rsp)
}

// SenderaddressesPartialUpdateWithBodyWithResponse request with arbitrary body returning *SenderaddressesPartialUpdateResponse
func (c *ClientWithResponses) SenderaddressesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SenderaddressesPartialUpdateResponse, error) {
	rsp, err := c.SenderaddressesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SenderaddressesPartialUpdateWithResponse(ctx context.Context, id int, body SenderaddressesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesPartialUpdateResponse, error) {
	rsp, err := c.SenderaddressesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SenderaddressesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SenderaddressesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesPartialUpdateResponse, error) {
	rsp, err := c.SenderaddressesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesPartialUpdateResponse(rsp)
}

// SenderaddressesUpdateWithBodyWithResponse request with arbitrary body returning *SenderaddressesUpdateResponse
func (c *ClientWithResponses) SenderaddressesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SenderaddressesUpdateResponse, error) {
	rsp, err := c.SenderaddressesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesUpdateResponse(rsp)
}

func (c *ClientWithResponses) SenderaddressesUpdateWithResponse(ctx context.Context, id int, body SenderaddressesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesUpdateResponse, error) {
	rsp, err := c.SenderaddressesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesUpdateResponse(rsp)
}

func (c *ClientWithResponses) SenderaddressesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SenderaddressesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SenderaddressesUpdateResponse, error) {
	rsp, err := c.SenderaddressesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSenderaddressesUpdateResponse(rsp)
}

// SharedCalendarsListWithResponse request returning *SharedCalendarsListResponse
func (c *ClientWithResponses) SharedCalendarsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SharedCalendarsListResponse, error) {
	rsp, err := c.SharedCalendarsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsListResponse(rsp)
}

// SharedCalendarsCreateWithBodyWithResponse request with arbitrary body returning *SharedCalendarsCreateResponse
func (c *ClientWithResponses) SharedCalendarsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsCreateResponse, error) {
	rsp, err := c.SharedCalendarsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsCreateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsCreateWithResponse(ctx context.Context, body SharedCalendarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsCreateResponse, error) {
	rsp, err := c.SharedCalendarsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsCreateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsCreateWithFormdataBodyWithResponse(ctx context.Context, body SharedCalendarsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsCreateResponse, error) {
	rsp, err := c.SharedCalendarsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsCreateResponse(rsp)
}

// SharedCalendarsCheckTokenCreateWithBodyWithResponse request with arbitrary body returning *SharedCalendarsCheckTokenCreateResponse
func (c *ClientWithResponses) SharedCalendarsCheckTokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsCheckTokenCreateResponse, error) {
	rsp, err := c.SharedCalendarsCheckTokenCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsCheckTokenCreateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsCheckTokenCreateWithResponse(ctx context.Context, body SharedCalendarsCheckTokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsCheckTokenCreateResponse, error) {
	rsp, err := c.SharedCalendarsCheckTokenCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsCheckTokenCreateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsCheckTokenCreateWithFormdataBodyWithResponse(ctx context.Context, body SharedCalendarsCheckTokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsCheckTokenCreateResponse, error) {
	rsp, err := c.SharedCalendarsCheckTokenCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsCheckTokenCreateResponse(rsp)
}

// SharedCalendarsEventsListWithResponse request returning *SharedCalendarsEventsListResponse
func (c *ClientWithResponses) SharedCalendarsEventsListWithResponse(ctx context.Context, calendarPk string, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsListResponse, error) {
	rsp, err := c.SharedCalendarsEventsList(ctx, calendarPk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsListResponse(rsp)
}

// SharedCalendarsEventsCreateWithBodyWithResponse request with arbitrary body returning *SharedCalendarsEventsCreateResponse
func (c *ClientWithResponses) SharedCalendarsEventsCreateWithBodyWithResponse(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsCreateResponse, error) {
	rsp, err := c.SharedCalendarsEventsCreateWithBody(ctx, calendarPk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsCreateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsEventsCreateWithResponse(ctx context.Context, calendarPk string, body SharedCalendarsEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsCreateResponse, error) {
	rsp, err := c.SharedCalendarsEventsCreate(ctx, calendarPk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsCreateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsEventsCreateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, body SharedCalendarsEventsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsCreateResponse, error) {
	rsp, err := c.SharedCalendarsEventsCreateWithFormdataBody(ctx, calendarPk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsCreateResponse(rsp)
}

// SharedCalendarsEventsImportFromFileCreateWithBodyWithResponse request with arbitrary body returning *SharedCalendarsEventsImportFromFileCreateResponse
func (c *ClientWithResponses) SharedCalendarsEventsImportFromFileCreateWithBodyWithResponse(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsImportFromFileCreateResponse, error) {
	rsp, err := c.SharedCalendarsEventsImportFromFileCreateWithBody(ctx, calendarPk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsImportFromFileCreateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsEventsImportFromFileCreateWithResponse(ctx context.Context, calendarPk string, body SharedCalendarsEventsImportFromFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsImportFromFileCreateResponse, error) {
	rsp, err := c.SharedCalendarsEventsImportFromFileCreate(ctx, calendarPk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsImportFromFileCreateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsEventsImportFromFileCreateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, body SharedCalendarsEventsImportFromFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsImportFromFileCreateResponse, error) {
	rsp, err := c.SharedCalendarsEventsImportFromFileCreateWithFormdataBody(ctx, calendarPk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsImportFromFileCreateResponse(rsp)
}

// SharedCalendarsEventsDestroyWithResponse request returning *SharedCalendarsEventsDestroyResponse
func (c *ClientWithResponses) SharedCalendarsEventsDestroyWithResponse(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsDestroyResponse, error) {
	rsp, err := c.SharedCalendarsEventsDestroy(ctx, calendarPk, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsDestroyResponse(rsp)
}

// SharedCalendarsEventsRetrieveWithResponse request returning *SharedCalendarsEventsRetrieveResponse
func (c *ClientWithResponses) SharedCalendarsEventsRetrieveWithResponse(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsRetrieveResponse, error) {
	rsp, err := c.SharedCalendarsEventsRetrieve(ctx, calendarPk, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsRetrieveResponse(rsp)
}

// SharedCalendarsEventsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SharedCalendarsEventsPartialUpdateResponse
func (c *ClientWithResponses) SharedCalendarsEventsPartialUpdateWithBodyWithResponse(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsPartialUpdateResponse, error) {
	rsp, err := c.SharedCalendarsEventsPartialUpdateWithBody(ctx, calendarPk, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsEventsPartialUpdateWithResponse(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsPartialUpdateResponse, error) {
	rsp, err := c.SharedCalendarsEventsPartialUpdate(ctx, calendarPk, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsEventsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsPartialUpdateResponse, error) {
	rsp, err := c.SharedCalendarsEventsPartialUpdateWithFormdataBody(ctx, calendarPk, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsPartialUpdateResponse(rsp)
}

// SharedCalendarsEventsUpdateWithBodyWithResponse request with arbitrary body returning *SharedCalendarsEventsUpdateResponse
func (c *ClientWithResponses) SharedCalendarsEventsUpdateWithBodyWithResponse(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsUpdateResponse, error) {
	rsp, err := c.SharedCalendarsEventsUpdateWithBody(ctx, calendarPk, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsEventsUpdateWithResponse(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsUpdateResponse, error) {
	rsp, err := c.SharedCalendarsEventsUpdate(ctx, calendarPk, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsEventsUpdateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, id string, body SharedCalendarsEventsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsEventsUpdateResponse, error) {
	rsp, err := c.SharedCalendarsEventsUpdateWithFormdataBody(ctx, calendarPk, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsEventsUpdateResponse(rsp)
}

// SharedCalendarsDestroyWithResponse request returning *SharedCalendarsDestroyResponse
func (c *ClientWithResponses) SharedCalendarsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SharedCalendarsDestroyResponse, error) {
	rsp, err := c.SharedCalendarsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsDestroyResponse(rsp)
}

// SharedCalendarsRetrieveWithResponse request returning *SharedCalendarsRetrieveResponse
func (c *ClientWithResponses) SharedCalendarsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SharedCalendarsRetrieveResponse, error) {
	rsp, err := c.SharedCalendarsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsRetrieveResponse(rsp)
}

// SharedCalendarsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SharedCalendarsPartialUpdateResponse
func (c *ClientWithResponses) SharedCalendarsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsPartialUpdateResponse, error) {
	rsp, err := c.SharedCalendarsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsPartialUpdateWithResponse(ctx context.Context, id int, body SharedCalendarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsPartialUpdateResponse, error) {
	rsp, err := c.SharedCalendarsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SharedCalendarsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsPartialUpdateResponse, error) {
	rsp, err := c.SharedCalendarsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsPartialUpdateResponse(rsp)
}

// SharedCalendarsUpdateWithBodyWithResponse request with arbitrary body returning *SharedCalendarsUpdateResponse
func (c *ClientWithResponses) SharedCalendarsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SharedCalendarsUpdateResponse, error) {
	rsp, err := c.SharedCalendarsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsUpdateWithResponse(ctx context.Context, id int, body SharedCalendarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsUpdateResponse, error) {
	rsp, err := c.SharedCalendarsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SharedCalendarsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SharedCalendarsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SharedCalendarsUpdateResponse, error) {
	rsp, err := c.SharedCalendarsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedCalendarsUpdateResponse(rsp)
}

// SmsTotpCreateWithResponse request returning *SmsTotpCreateResponse
func (c *ClientWithResponses) SmsTotpCreateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SmsTotpCreateResponse, error) {
	rsp, err := c.SmsTotpCreate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTotpCreateResponse(rsp)
}

// StatisticsListWithResponse request returning *StatisticsListResponse
func (c *ClientWithResponses) StatisticsListWithResponse(ctx context.Context, params *StatisticsListParams, reqEditors ...RequestEditorFn) (*StatisticsListResponse, error) {
	rsp, err := c.StatisticsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatisticsListResponse(rsp)
}

// TokenCreateWithBodyWithResponse request with arbitrary body returning *TokenCreateResponse
func (c *ClientWithResponses) TokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error) {
	rsp, err := c.TokenCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenCreateResponse(rsp)
}

func (c *ClientWithResponses) TokenCreateWithResponse(ctx context.Context, body TokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error) {
	rsp, err := c.TokenCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenCreateResponse(rsp)
}

func (c *ClientWithResponses) TokenCreateWithFormdataBodyWithResponse(ctx context.Context, body TokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenCreateResponse, error) {
	rsp, err := c.TokenCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenCreateResponse(rsp)
}

// TokenRefreshCreateWithBodyWithResponse request with arbitrary body returning *TokenRefreshCreateResponse
func (c *ClientWithResponses) TokenRefreshCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenRefreshCreateResponse, error) {
	rsp, err := c.TokenRefreshCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenRefreshCreateResponse(rsp)
}

func (c *ClientWithResponses) TokenRefreshCreateWithResponse(ctx context.Context, body TokenRefreshCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenRefreshCreateResponse, error) {
	rsp, err := c.TokenRefreshCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenRefreshCreateResponse(rsp)
}

func (c *ClientWithResponses) TokenRefreshCreateWithFormdataBodyWithResponse(ctx context.Context, body TokenRefreshCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenRefreshCreateResponse, error) {
	rsp, err := c.TokenRefreshCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenRefreshCreateResponse(rsp)
}

// TransportsListWithResponse request returning *TransportsListResponse
func (c *ClientWithResponses) TransportsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TransportsListResponse, error) {
	rsp, err := c.TransportsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransportsListResponse(rsp)
}

// UserCalendarsListWithResponse request returning *UserCalendarsListResponse
func (c *ClientWithResponses) UserCalendarsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserCalendarsListResponse, error) {
	rsp, err := c.UserCalendarsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsListResponse(rsp)
}

// UserCalendarsCreateWithBodyWithResponse request with arbitrary body returning *UserCalendarsCreateResponse
func (c *ClientWithResponses) UserCalendarsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsCreateResponse, error) {
	rsp, err := c.UserCalendarsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsCreateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsCreateWithResponse(ctx context.Context, body UserCalendarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsCreateResponse, error) {
	rsp, err := c.UserCalendarsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsCreateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsCreateWithFormdataBodyWithResponse(ctx context.Context, body UserCalendarsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsCreateResponse, error) {
	rsp, err := c.UserCalendarsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsCreateResponse(rsp)
}

// UserCalendarsCheckTokenCreateWithBodyWithResponse request with arbitrary body returning *UserCalendarsCheckTokenCreateResponse
func (c *ClientWithResponses) UserCalendarsCheckTokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsCheckTokenCreateResponse, error) {
	rsp, err := c.UserCalendarsCheckTokenCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsCheckTokenCreateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsCheckTokenCreateWithResponse(ctx context.Context, body UserCalendarsCheckTokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsCheckTokenCreateResponse, error) {
	rsp, err := c.UserCalendarsCheckTokenCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsCheckTokenCreateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsCheckTokenCreateWithFormdataBodyWithResponse(ctx context.Context, body UserCalendarsCheckTokenCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsCheckTokenCreateResponse, error) {
	rsp, err := c.UserCalendarsCheckTokenCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsCheckTokenCreateResponse(rsp)
}

// UserCalendarsEventsListWithResponse request returning *UserCalendarsEventsListResponse
func (c *ClientWithResponses) UserCalendarsEventsListWithResponse(ctx context.Context, calendarPk string, reqEditors ...RequestEditorFn) (*UserCalendarsEventsListResponse, error) {
	rsp, err := c.UserCalendarsEventsList(ctx, calendarPk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsListResponse(rsp)
}

// UserCalendarsEventsCreateWithBodyWithResponse request with arbitrary body returning *UserCalendarsEventsCreateResponse
func (c *ClientWithResponses) UserCalendarsEventsCreateWithBodyWithResponse(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsEventsCreateResponse, error) {
	rsp, err := c.UserCalendarsEventsCreateWithBody(ctx, calendarPk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsCreateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsEventsCreateWithResponse(ctx context.Context, calendarPk string, body UserCalendarsEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsCreateResponse, error) {
	rsp, err := c.UserCalendarsEventsCreate(ctx, calendarPk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsCreateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsEventsCreateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, body UserCalendarsEventsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsCreateResponse, error) {
	rsp, err := c.UserCalendarsEventsCreateWithFormdataBody(ctx, calendarPk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsCreateResponse(rsp)
}

// UserCalendarsEventsImportFromFileCreateWithBodyWithResponse request with arbitrary body returning *UserCalendarsEventsImportFromFileCreateResponse
func (c *ClientWithResponses) UserCalendarsEventsImportFromFileCreateWithBodyWithResponse(ctx context.Context, calendarPk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsEventsImportFromFileCreateResponse, error) {
	rsp, err := c.UserCalendarsEventsImportFromFileCreateWithBody(ctx, calendarPk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsImportFromFileCreateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsEventsImportFromFileCreateWithResponse(ctx context.Context, calendarPk string, body UserCalendarsEventsImportFromFileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsImportFromFileCreateResponse, error) {
	rsp, err := c.UserCalendarsEventsImportFromFileCreate(ctx, calendarPk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsImportFromFileCreateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsEventsImportFromFileCreateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, body UserCalendarsEventsImportFromFileCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsImportFromFileCreateResponse, error) {
	rsp, err := c.UserCalendarsEventsImportFromFileCreateWithFormdataBody(ctx, calendarPk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsImportFromFileCreateResponse(rsp)
}

// UserCalendarsEventsDestroyWithResponse request returning *UserCalendarsEventsDestroyResponse
func (c *ClientWithResponses) UserCalendarsEventsDestroyWithResponse(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*UserCalendarsEventsDestroyResponse, error) {
	rsp, err := c.UserCalendarsEventsDestroy(ctx, calendarPk, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsDestroyResponse(rsp)
}

// UserCalendarsEventsRetrieveWithResponse request returning *UserCalendarsEventsRetrieveResponse
func (c *ClientWithResponses) UserCalendarsEventsRetrieveWithResponse(ctx context.Context, calendarPk string, id string, reqEditors ...RequestEditorFn) (*UserCalendarsEventsRetrieveResponse, error) {
	rsp, err := c.UserCalendarsEventsRetrieve(ctx, calendarPk, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsRetrieveResponse(rsp)
}

// UserCalendarsEventsPartialUpdateWithBodyWithResponse request with arbitrary body returning *UserCalendarsEventsPartialUpdateResponse
func (c *ClientWithResponses) UserCalendarsEventsPartialUpdateWithBodyWithResponse(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsEventsPartialUpdateResponse, error) {
	rsp, err := c.UserCalendarsEventsPartialUpdateWithBody(ctx, calendarPk, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsEventsPartialUpdateWithResponse(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsPartialUpdateResponse, error) {
	rsp, err := c.UserCalendarsEventsPartialUpdate(ctx, calendarPk, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsEventsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsPartialUpdateResponse, error) {
	rsp, err := c.UserCalendarsEventsPartialUpdateWithFormdataBody(ctx, calendarPk, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsPartialUpdateResponse(rsp)
}

// UserCalendarsEventsUpdateWithBodyWithResponse request with arbitrary body returning *UserCalendarsEventsUpdateResponse
func (c *ClientWithResponses) UserCalendarsEventsUpdateWithBodyWithResponse(ctx context.Context, calendarPk string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsEventsUpdateResponse, error) {
	rsp, err := c.UserCalendarsEventsUpdateWithBody(ctx, calendarPk, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsEventsUpdateWithResponse(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsUpdateResponse, error) {
	rsp, err := c.UserCalendarsEventsUpdate(ctx, calendarPk, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsEventsUpdateWithFormdataBodyWithResponse(ctx context.Context, calendarPk string, id string, body UserCalendarsEventsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsEventsUpdateResponse, error) {
	rsp, err := c.UserCalendarsEventsUpdateWithFormdataBody(ctx, calendarPk, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsEventsUpdateResponse(rsp)
}

// UserCalendarsDestroyWithResponse request returning *UserCalendarsDestroyResponse
func (c *ClientWithResponses) UserCalendarsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UserCalendarsDestroyResponse, error) {
	rsp, err := c.UserCalendarsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsDestroyResponse(rsp)
}

// UserCalendarsRetrieveWithResponse request returning *UserCalendarsRetrieveResponse
func (c *ClientWithResponses) UserCalendarsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UserCalendarsRetrieveResponse, error) {
	rsp, err := c.UserCalendarsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsRetrieveResponse(rsp)
}

// UserCalendarsPartialUpdateWithBodyWithResponse request with arbitrary body returning *UserCalendarsPartialUpdateResponse
func (c *ClientWithResponses) UserCalendarsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsPartialUpdateResponse, error) {
	rsp, err := c.UserCalendarsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsPartialUpdateWithResponse(ctx context.Context, id int, body UserCalendarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsPartialUpdateResponse, error) {
	rsp, err := c.UserCalendarsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserCalendarsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsPartialUpdateResponse, error) {
	rsp, err := c.UserCalendarsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsPartialUpdateResponse(rsp)
}

// UserCalendarsUpdateWithBodyWithResponse request with arbitrary body returning *UserCalendarsUpdateResponse
func (c *ClientWithResponses) UserCalendarsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserCalendarsUpdateResponse, error) {
	rsp, err := c.UserCalendarsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsUpdateWithResponse(ctx context.Context, id int, body UserCalendarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsUpdateResponse, error) {
	rsp, err := c.UserCalendarsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserCalendarsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserCalendarsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserCalendarsUpdateResponse, error) {
	rsp, err := c.UserCalendarsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserCalendarsUpdateResponse(rsp)
}

// ParseAccessrulesListResponse parses an HTTP response from a AccessrulesListWithResponse call
func ParseAccessrulesListResponse(rsp *http.Response) (*AccessrulesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessrulesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessrulesCreateResponse parses an HTTP response from a AccessrulesCreateWithResponse call
func ParseAccessrulesCreateResponse(rsp *http.Response) (*AccessrulesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessrulesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAccessrulesDestroyResponse parses an HTTP response from a AccessrulesDestroyWithResponse call
func ParseAccessrulesDestroyResponse(rsp *http.Response) (*AccessrulesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessrulesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccessrulesRetrieveResponse parses an HTTP response from a AccessrulesRetrieveWithResponse call
func ParseAccessrulesRetrieveResponse(rsp *http.Response) (*AccessrulesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessrulesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessrulesPartialUpdateResponse parses an HTTP response from a AccessrulesPartialUpdateWithResponse call
func ParseAccessrulesPartialUpdateResponse(rsp *http.Response) (*AccessrulesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessrulesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessrulesUpdateResponse parses an HTTP response from a AccessrulesUpdateWithResponse call
func ParseAccessrulesUpdateResponse(rsp *http.Response) (*AccessrulesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessrulesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountApiTokenDestroyResponse parses an HTTP response from a AccountApiTokenDestroyWithResponse call
func ParseAccountApiTokenDestroyResponse(rsp *http.Response) (*AccountApiTokenDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountApiTokenDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountApiTokenRetrieveResponse parses an HTTP response from a AccountApiTokenRetrieveWithResponse call
func ParseAccountApiTokenRetrieveResponse(rsp *http.Response) (*AccountApiTokenRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountApiTokenRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAPIToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountApiTokenCreateResponse parses an HTTP response from a AccountApiTokenCreateWithResponse call
func ParseAccountApiTokenCreateResponse(rsp *http.Response) (*AccountApiTokenCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountApiTokenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserAPIToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAccountForwardRetrieveResponse parses an HTTP response from a AccountForwardRetrieveWithResponse call
func ParseAccountForwardRetrieveResponse(rsp *http.Response) (*AccountForwardRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountForwardRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountForwardCreateResponse parses an HTTP response from a AccountForwardCreateWithResponse call
func ParseAccountForwardCreateResponse(rsp *http.Response) (*AccountForwardCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountForwardCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountMeRetrieveResponse parses an HTTP response from a AccountMeRetrieveWithResponse call
func ParseAccountMeRetrieveResponse(rsp *http.Response) (*AccountMeRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountMeRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountMePasswordCreateResponse parses an HTTP response from a AccountMePasswordCreateWithResponse call
func ParseAccountMePasswordCreateResponse(rsp *http.Response) (*AccountMePasswordCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountMePasswordCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckPassword
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountTfaDisableCreateResponse parses an HTTP response from a AccountTfaDisableCreateWithResponse call
func ParseAccountTfaDisableCreateResponse(rsp *http.Response) (*AccountTfaDisableCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountTfaDisableCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountTfaResetCodesCreateResponse parses an HTTP response from a AccountTfaResetCodesCreateWithResponse call
func ParseAccountTfaResetCodesCreateResponse(rsp *http.Response) (*AccountTfaResetCodesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountTfaResetCodesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountTfaSetupCreateResponse parses an HTTP response from a AccountTfaSetupCreateWithResponse call
func ParseAccountTfaSetupCreateResponse(rsp *http.Response) (*AccountTfaSetupCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountTfaSetupCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountTfaSetupCheckCreateResponse parses an HTTP response from a AccountTfaSetupCheckCreateWithResponse call
func ParseAccountTfaSetupCheckCreateResponse(rsp *http.Response) (*AccountTfaSetupCheckCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountTfaSetupCheckCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountTfaSetupKeyRetrieveResponse parses an HTTP response from a AccountTfaSetupKeyRetrieveWithResponse call
func ParseAccountTfaSetupKeyRetrieveResponse(rsp *http.Response) (*AccountTfaSetupKeyRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountTfaSetupKeyRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountTfaVerifyCreateResponse parses an HTTP response from a AccountTfaVerifyCreateWithResponse call
func ParseAccountTfaVerifyCreateResponse(rsp *http.Response) (*AccountTfaVerifyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountTfaVerifyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountsListResponse parses an HTTP response from a AccountsListWithResponse call
func ParseAccountsListResponse(rsp *http.Response) (*AccountsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsCreateResponse parses an HTTP response from a AccountsCreateWithResponse call
func ParseAccountsCreateResponse(rsp *http.Response) (*AccountsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WritableAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAccountsExistsRetrieveResponse parses an HTTP response from a AccountsExistsRetrieveWithResponse call
func ParseAccountsExistsRetrieveResponse(rsp *http.Response) (*AccountsExistsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsExistsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsRandomPasswordRetrieveResponse parses an HTTP response from a AccountsRandomPasswordRetrieveWithResponse call
func ParseAccountsRandomPasswordRetrieveResponse(rsp *http.Response) (*AccountsRandomPasswordRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsRandomPasswordRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsResetPasswordCreateResponse parses an HTTP response from a AccountsResetPasswordCreateWithResponse call
func ParseAccountsResetPasswordCreateResponse(rsp *http.Response) (*AccountsResetPasswordCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsResetPasswordCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResetPassword
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsValidateCreateResponse parses an HTTP response from a AccountsValidateCreateWithResponse call
func ParseAccountsValidateCreateResponse(rsp *http.Response) (*AccountsValidateCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsValidateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsDestroyResponse parses an HTTP response from a AccountsDestroyWithResponse call
func ParseAccountsDestroyResponse(rsp *http.Response) (*AccountsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountsRetrieveResponse parses an HTTP response from a AccountsRetrieveWithResponse call
func ParseAccountsRetrieveResponse(rsp *http.Response) (*AccountsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsPartialUpdateResponse parses an HTTP response from a AccountsPartialUpdateWithResponse call
func ParseAccountsPartialUpdateResponse(rsp *http.Response) (*AccountsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsUpdateResponse parses an HTTP response from a AccountsUpdateWithResponse call
func ParseAccountsUpdateResponse(rsp *http.Response) (*AccountsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsDeleteCreateResponse parses an HTTP response from a AccountsDeleteCreateWithResponse call
func ParseAccountsDeleteCreateResponse(rsp *http.Response) (*AccountsDeleteCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsDeleteCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsPasswordUpdateResponse parses an HTTP response from a AccountsPasswordUpdateWithResponse call
func ParseAccountsPasswordUpdateResponse(rsp *http.Response) (*AccountsPasswordUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsPasswordUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountPassword
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddressBooksDefaultRetrieveResponse parses an HTTP response from a AddressBooksDefaultRetrieveWithResponse call
func ParseAddressBooksDefaultRetrieveResponse(rsp *http.Response) (*AddressBooksDefaultRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddressBooksDefaultRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressBook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddressBooksSyncFromCdavRetrieveResponse parses an HTTP response from a AddressBooksSyncFromCdavRetrieveWithResponse call
func ParseAddressBooksSyncFromCdavRetrieveResponse(rsp *http.Response) (*AddressBooksSyncFromCdavRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddressBooksSyncFromCdavRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressBook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddressBooksSyncToCdavRetrieveResponse parses an HTTP response from a AddressBooksSyncToCdavRetrieveWithResponse call
func ParseAddressBooksSyncToCdavRetrieveResponse(rsp *http.Response) (*AddressBooksSyncToCdavRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddressBooksSyncToCdavRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressBook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminComponentsListResponse parses an HTTP response from a AdminComponentsListWithResponse call
func ParseAdminComponentsListResponse(rsp *http.Response) (*AdminComponentsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminComponentsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModoboaComponent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAlarmsListResponse parses an HTTP response from a AlarmsListWithResponse call
func ParseAlarmsListResponse(rsp *http.Response) (*AlarmsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAlarmList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAlarmsBulkDeleteDestroyResponse parses an HTTP response from a AlarmsBulkDeleteDestroyWithResponse call
func ParseAlarmsBulkDeleteDestroyResponse(rsp *http.Response) (*AlarmsBulkDeleteDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmsBulkDeleteDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAlarmsDestroyResponse parses an HTTP response from a AlarmsDestroyWithResponse call
func ParseAlarmsDestroyResponse(rsp *http.Response) (*AlarmsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAlarmsRetrieveResponse parses an HTTP response from a AlarmsRetrieveWithResponse call
func ParseAlarmsRetrieveResponse(rsp *http.Response) (*AlarmsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alarm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAlarmsSwitchPartialUpdateResponse parses an HTTP response from a AlarmsSwitchPartialUpdateWithResponse call
func ParseAlarmsSwitchPartialUpdateResponse(rsp *http.Response) (*AlarmsSwitchPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlarmsSwitchPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alarm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAliasesListResponse parses an HTTP response from a AliasesListWithResponse call
func ParseAliasesListResponse(rsp *http.Response) (*AliasesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AliasesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Alias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAliasesCreateResponse parses an HTTP response from a AliasesCreateWithResponse call
func ParseAliasesCreateResponse(rsp *http.Response) (*AliasesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AliasesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Alias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAliasesRandomAddressRetrieveResponse parses an HTTP response from a AliasesRandomAddressRetrieveWithResponse call
func ParseAliasesRandomAddressRetrieveResponse(rsp *http.Response) (*AliasesRandomAddressRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AliasesRandomAddressRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAliasesValidateCreateResponse parses an HTTP response from a AliasesValidateCreateWithResponse call
func ParseAliasesValidateCreateResponse(rsp *http.Response) (*AliasesValidateCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AliasesValidateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAliasesDestroyResponse parses an HTTP response from a AliasesDestroyWithResponse call
func ParseAliasesDestroyResponse(rsp *http.Response) (*AliasesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AliasesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAliasesRetrieveResponse parses an HTTP response from a AliasesRetrieveWithResponse call
func ParseAliasesRetrieveResponse(rsp *http.Response) (*AliasesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AliasesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAliasesPartialUpdateResponse parses an HTTP response from a AliasesPartialUpdateWithResponse call
func ParseAliasesPartialUpdateResponse(rsp *http.Response) (*AliasesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AliasesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAliasesUpdateResponse parses an HTTP response from a AliasesUpdateWithResponse call
func ParseAliasesUpdateResponse(rsp *http.Response) (*AliasesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AliasesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArmessagesListResponse parses an HTTP response from a ArmessagesListWithResponse call
func ParseArmessagesListResponse(rsp *http.Response) (*ArmessagesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArmessagesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ARMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArmessagesCreateResponse parses an HTTP response from a ArmessagesCreateWithResponse call
func ParseArmessagesCreateResponse(rsp *http.Response) (*ArmessagesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArmessagesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ARMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseArmessagesRetrieveResponse parses an HTTP response from a ArmessagesRetrieveWithResponse call
func ParseArmessagesRetrieveResponse(rsp *http.Response) (*ArmessagesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArmessagesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ARMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArmessagesPartialUpdateResponse parses an HTTP response from a ArmessagesPartialUpdateWithResponse call
func ParseArmessagesPartialUpdateResponse(rsp *http.Response) (*ArmessagesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArmessagesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ARMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArmessagesUpdateResponse parses an HTTP response from a ArmessagesUpdateWithResponse call
func ParseArmessagesUpdateResponse(rsp *http.Response) (*ArmessagesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArmessagesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ARMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAttendeesListResponse parses an HTTP response from a AttendeesListWithResponse call
func ParseAttendeesListResponse(rsp *http.Response) (*AttendeesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttendeesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Attendee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAttendeesRetrieveResponse parses an HTTP response from a AttendeesRetrieveWithResponse call
func ParseAttendeesRetrieveResponse(rsp *http.Response) (*AttendeesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttendeesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Attendee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCategoriesListResponse parses an HTTP response from a CategoriesListWithResponse call
func ParseCategoriesListResponse(rsp *http.Response) (*CategoriesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoriesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCategoriesCreateResponse parses an HTTP response from a CategoriesCreateWithResponse call
func ParseCategoriesCreateResponse(rsp *http.Response) (*CategoriesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoriesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCategoriesDestroyResponse parses an HTTP response from a CategoriesDestroyWithResponse call
func ParseCategoriesDestroyResponse(rsp *http.Response) (*CategoriesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoriesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCategoriesRetrieveResponse parses an HTTP response from a CategoriesRetrieveWithResponse call
func ParseCategoriesRetrieveResponse(rsp *http.Response) (*CategoriesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoriesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCategoriesPartialUpdateResponse parses an HTTP response from a CategoriesPartialUpdateWithResponse call
func ParseCategoriesPartialUpdateResponse(rsp *http.Response) (*CategoriesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoriesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCategoriesUpdateResponse parses an HTTP response from a CategoriesUpdateWithResponse call
func ParseCategoriesUpdateResponse(rsp *http.Response) (*CategoriesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoriesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContactsListResponse parses an HTTP response from a ContactsListWithResponse call
func ParseContactsListResponse(rsp *http.Response) (*ContactsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContactsCreateResponse parses an HTTP response from a ContactsCreateWithResponse call
func ParseContactsCreateResponse(rsp *http.Response) (*ContactsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseContactsDestroyResponse parses an HTTP response from a ContactsDestroyWithResponse call
func ParseContactsDestroyResponse(rsp *http.Response) (*ContactsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseContactsRetrieveResponse parses an HTTP response from a ContactsRetrieveWithResponse call
func ParseContactsRetrieveResponse(rsp *http.Response) (*ContactsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContactsPartialUpdateResponse parses an HTTP response from a ContactsPartialUpdateWithResponse call
func ParseContactsPartialUpdateResponse(rsp *http.Response) (*ContactsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContactsUpdateResponse parses an HTTP response from a ContactsUpdateWithResponse call
func ParseContactsUpdateResponse(rsp *http.Response) (*ContactsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialsRetrieveResponse parses an HTTP response from a CredentialsRetrieveWithResponse call
func ParseCredentialsRetrieveResponse(rsp *http.Response) (*CredentialsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccountCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainaliasesListResponse parses an HTTP response from a DomainaliasesListWithResponse call
func ParseDomainaliasesListResponse(rsp *http.Response) (*DomainaliasesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainaliasesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DomainAlias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseDomainaliasesCreateResponse parses an HTTP response from a DomainaliasesCreateWithResponse call
func ParseDomainaliasesCreateResponse(rsp *http.Response) (*DomainaliasesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainaliasesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DomainAlias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseDomainaliasesDestroyResponse parses an HTTP response from a DomainaliasesDestroyWithResponse call
func ParseDomainaliasesDestroyResponse(rsp *http.Response) (*DomainaliasesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainaliasesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainaliasesRetrieveResponse parses an HTTP response from a DomainaliasesRetrieveWithResponse call
func ParseDomainaliasesRetrieveResponse(rsp *http.Response) (*DomainaliasesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainaliasesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainAlias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseDomainaliasesPartialUpdateResponse parses an HTTP response from a DomainaliasesPartialUpdateWithResponse call
func ParseDomainaliasesPartialUpdateResponse(rsp *http.Response) (*DomainaliasesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainaliasesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainAlias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseDomainaliasesUpdateResponse parses an HTTP response from a DomainaliasesUpdateWithResponse call
func ParseDomainaliasesUpdateResponse(rsp *http.Response) (*DomainaliasesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainaliasesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainAlias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseDomainsListResponse parses an HTTP response from a DomainsListWithResponse call
func ParseDomainsListResponse(rsp *http.Response) (*DomainsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsCreateResponse parses an HTTP response from a DomainsCreateWithResponse call
func ParseDomainsCreateResponse(rsp *http.Response) (*DomainsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainsExportRetrieveResponse parses an HTTP response from a DomainsExportRetrieveWithResponse call
func ParseDomainsExportRetrieveResponse(rsp *http.Response) (*DomainsExportRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsExportRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainsImportCreateResponse parses an HTTP response from a DomainsImportCreateWithResponse call
func ParseDomainsImportCreateResponse(rsp *http.Response) (*DomainsImportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsImportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsRetrieveResponse parses an HTTP response from a DomainsRetrieveWithResponse call
func ParseDomainsRetrieveResponse(rsp *http.Response) (*DomainsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsPartialUpdateResponse parses an HTTP response from a DomainsPartialUpdateWithResponse call
func ParseDomainsPartialUpdateResponse(rsp *http.Response) (*DomainsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsUpdateResponse parses an HTTP response from a DomainsUpdateWithResponse call
func ParseDomainsUpdateResponse(rsp *http.Response) (*DomainsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsAdministratorsRetrieveResponse parses an HTTP response from a DomainsAdministratorsRetrieveWithResponse call
func ParseDomainsAdministratorsRetrieveResponse(rsp *http.Response) (*DomainsAdministratorsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsAdministratorsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainAdmin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsAdministratorsAddCreateResponse parses an HTTP response from a DomainsAdministratorsAddCreateWithResponse call
func ParseDomainsAdministratorsAddCreateResponse(rsp *http.Response) (*DomainsAdministratorsAddCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsAdministratorsAddCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleDomainAdmin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsAdministratorsRemoveCreateResponse parses an HTTP response from a DomainsAdministratorsRemoveCreateWithResponse call
func ParseDomainsAdministratorsRemoveCreateResponse(rsp *http.Response) (*DomainsAdministratorsRemoveCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsAdministratorsRemoveCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleDomainAdmin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsDeleteCreateResponse parses an HTTP response from a DomainsDeleteCreateWithResponse call
func ParseDomainsDeleteCreateResponse(rsp *http.Response) (*DomainsDeleteCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsDeleteCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsDmarcAlignmentStatsRetrieveResponse parses an HTTP response from a DomainsDmarcAlignmentStatsRetrieveWithResponse call
func ParseDomainsDmarcAlignmentStatsRetrieveResponse(rsp *http.Response) (*DomainsDmarcAlignmentStatsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsDmarcAlignmentStatsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DMARCAligment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainsDnsDetailRetrieveResponse parses an HTTP response from a DomainsDnsDetailRetrieveWithResponse call
func ParseDomainsDnsDetailRetrieveResponse(rsp *http.Response) (*DomainsDnsDetailRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsDnsDetailRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmailProvidersListResponse parses an HTTP response from a EmailProvidersListWithResponse call
func ParseEmailProvidersListResponse(rsp *http.Response) (*EmailProvidersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailProvidersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmailProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmailProvidersCreateResponse parses an HTTP response from a EmailProvidersCreateWithResponse call
func ParseEmailProvidersCreateResponse(rsp *http.Response) (*EmailProvidersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailProvidersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EmailProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEmailProvidersCheckAssociatedDomainCreateResponse parses an HTTP response from a EmailProvidersCheckAssociatedDomainCreateWithResponse call
func ParseEmailProvidersCheckAssociatedDomainCreateResponse(rsp *http.Response) (*EmailProvidersCheckAssociatedDomainCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailProvidersCheckAssociatedDomainCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmailProvidersCheckConnectionCreateResponse parses an HTTP response from a EmailProvidersCheckConnectionCreateWithResponse call
func ParseEmailProvidersCheckConnectionCreateResponse(rsp *http.Response) (*EmailProvidersCheckConnectionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailProvidersCheckConnectionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmailProvidersDestroyResponse parses an HTTP response from a EmailProvidersDestroyWithResponse call
func ParseEmailProvidersDestroyResponse(rsp *http.Response) (*EmailProvidersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailProvidersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEmailProvidersRetrieveResponse parses an HTTP response from a EmailProvidersRetrieveWithResponse call
func ParseEmailProvidersRetrieveResponse(rsp *http.Response) (*EmailProvidersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailProvidersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmailProvidersPartialUpdateResponse parses an HTTP response from a EmailProvidersPartialUpdateWithResponse call
func ParseEmailProvidersPartialUpdateResponse(rsp *http.Response) (*EmailProvidersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailProvidersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmailProvidersUpdateResponse parses an HTTP response from a EmailProvidersUpdateWithResponse call
func ParseEmailProvidersUpdateResponse(rsp *http.Response) (*EmailProvidersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailProvidersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmailsListResponse parses an HTTP response from a EmailsListWithResponse call
func ParseEmailsListResponse(rsp *http.Response) (*EmailsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmailAddressWithName
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmailsRetrieveResponse parses an HTTP response from a EmailsRetrieveWithResponse call
func ParseEmailsRetrieveResponse(rsp *http.Response) (*EmailsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailAddressWithName
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIdentitiesRetrieveResponse parses an HTTP response from a IdentitiesRetrieveWithResponse call
func ParseIdentitiesRetrieveResponse(rsp *http.Response) (*IdentitiesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdentitiesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdentitiesExportRetrieveResponse parses an HTTP response from a IdentitiesExportRetrieveWithResponse call
func ParseIdentitiesExportRetrieveResponse(rsp *http.Response) (*IdentitiesExportRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdentitiesExportRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIdentitiesImportCreateResponse parses an HTTP response from a IdentitiesImportCreateWithResponse call
func ParseIdentitiesImportCreateResponse(rsp *http.Response) (*IdentitiesImportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdentitiesImportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLanguagesRetrieveResponse parses an HTTP response from a LanguagesRetrieveWithResponse call
func ParseLanguagesRetrieveResponse(rsp *http.Response) (*LanguagesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLogsAuditTrailListResponse parses an HTTP response from a LogsAuditTrailListWithResponse call
func ParseLogsAuditTrailListResponse(rsp *http.Response) (*LogsAuditTrailListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogsAuditTrailListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedLogList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogsAuditTrailRetrieveResponse parses an HTTP response from a LogsAuditTrailRetrieveWithResponse call
func ParseLogsAuditTrailRetrieveResponse(rsp *http.Response) (*LogsAuditTrailRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogsAuditTrailRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Log
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogsMessagesListResponse parses an HTTP response from a LogsMessagesListWithResponse call
func ParseLogsMessagesListResponse(rsp *http.Response) (*LogsMessagesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogsMessagesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedMaillogList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLogsMessagesRetrieveResponse parses an HTTP response from a LogsMessagesRetrieveWithResponse call
func ParseLogsMessagesRetrieveResponse(rsp *http.Response) (*LogsMessagesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogsMessagesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Maillog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailboxesListResponse parses an HTTP response from a MailboxesListWithResponse call
func ParseMailboxesListResponse(rsp *http.Response) (*MailboxesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailboxesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Mailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMailboxesRetrieveResponse parses an HTTP response from a MailboxesRetrieveWithResponse call
func ParseMailboxesRetrieveResponse(rsp *http.Response) (*MailboxesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MailboxesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Mailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMigrationsListResponse parses an HTTP response from a MigrationsListWithResponse call
func ParseMigrationsListResponse(rsp *http.Response) (*MigrationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigrationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Migration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMigrationsDestroyResponse parses an HTTP response from a MigrationsDestroyWithResponse call
func ParseMigrationsDestroyResponse(rsp *http.Response) (*MigrationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigrationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMigrationsRetrieveResponse parses an HTTP response from a MigrationsRetrieveWithResponse call
func ParseMigrationsRetrieveResponse(rsp *http.Response) (*MigrationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigrationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Migration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseParametersApplicationsListResponse parses an HTTP response from a ParametersApplicationsListWithResponse call
func ParseParametersApplicationsListResponse(rsp *http.Response) (*ParametersApplicationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ParametersApplicationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseParametersStructureListResponse parses an HTTP response from a ParametersStructureListWithResponse call
func ParseParametersStructureListResponse(rsp *http.Response) (*ParametersStructureListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ParametersStructureListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Parameter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseParametersRetrieveResponse parses an HTTP response from a ParametersRetrieveWithResponse call
func ParseParametersRetrieveResponse(rsp *http.Response) (*ParametersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ParametersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppParameters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseParametersUpdateResponse parses an HTTP response from a ParametersUpdateWithResponse call
func ParseParametersUpdateResponse(rsp *http.Response) (*ParametersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ParametersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePasswordResetCreateResponse parses an HTTP response from a PasswordResetCreateWithResponse call
func ParsePasswordResetCreateResponse(rsp *http.Response) (*PasswordResetCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PasswordResetCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRelaydomainsListResponse parses an HTTP response from a RelaydomainsListWithResponse call
func ParseRelaydomainsListResponse(rsp *http.Response) (*RelaydomainsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RelaydomainsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RelayDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRelaydomainsCreateResponse parses an HTTP response from a RelaydomainsCreateWithResponse call
func ParseRelaydomainsCreateResponse(rsp *http.Response) (*RelaydomainsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RelaydomainsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RelayDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRelaydomainsDestroyResponse parses an HTTP response from a RelaydomainsDestroyWithResponse call
func ParseRelaydomainsDestroyResponse(rsp *http.Response) (*RelaydomainsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RelaydomainsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRelaydomainsRetrieveResponse parses an HTTP response from a RelaydomainsRetrieveWithResponse call
func ParseRelaydomainsRetrieveResponse(rsp *http.Response) (*RelaydomainsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RelaydomainsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelayDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRelaydomainsPartialUpdateResponse parses an HTTP response from a RelaydomainsPartialUpdateWithResponse call
func ParseRelaydomainsPartialUpdateResponse(rsp *http.Response) (*RelaydomainsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RelaydomainsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelayDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRelaydomainsUpdateResponse parses an HTTP response from a RelaydomainsUpdateWithResponse call
func ParseRelaydomainsUpdateResponse(rsp *http.Response) (*RelaydomainsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RelaydomainsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelayDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResetConfirmCreateResponse parses an HTTP response from a ResetConfirmCreateWithResponse call
func ParseResetConfirmCreateResponse(rsp *http.Response) (*ResetConfirmCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetConfirmCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResourcesRetrieveResponse parses an HTTP response from a ResourcesRetrieveWithResponse call
func ParseResourcesRetrieveResponse(rsp *http.Response) (*ResourcesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourcesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resources
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourcesPartialUpdateResponse parses an HTTP response from a ResourcesPartialUpdateWithResponse call
func ParseResourcesPartialUpdateResponse(rsp *http.Response) (*ResourcesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourcesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resources
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourcesUpdateResponse parses an HTTP response from a ResourcesUpdateWithResponse call
func ParseResourcesUpdateResponse(rsp *http.Response) (*ResourcesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourcesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resources
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSenderaddressesListResponse parses an HTTP response from a SenderaddressesListWithResponse call
func ParseSenderaddressesListResponse(rsp *http.Response) (*SenderaddressesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SenderaddressesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SenderAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSenderaddressesCreateResponse parses an HTTP response from a SenderaddressesCreateWithResponse call
func ParseSenderaddressesCreateResponse(rsp *http.Response) (*SenderaddressesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SenderaddressesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SenderAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSenderaddressesDestroyResponse parses an HTTP response from a SenderaddressesDestroyWithResponse call
func ParseSenderaddressesDestroyResponse(rsp *http.Response) (*SenderaddressesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SenderaddressesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSenderaddressesRetrieveResponse parses an HTTP response from a SenderaddressesRetrieveWithResponse call
func ParseSenderaddressesRetrieveResponse(rsp *http.Response) (*SenderaddressesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SenderaddressesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SenderAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSenderaddressesPartialUpdateResponse parses an HTTP response from a SenderaddressesPartialUpdateWithResponse call
func ParseSenderaddressesPartialUpdateResponse(rsp *http.Response) (*SenderaddressesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SenderaddressesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SenderAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSenderaddressesUpdateResponse parses an HTTP response from a SenderaddressesUpdateWithResponse call
func ParseSenderaddressesUpdateResponse(rsp *http.Response) (*SenderaddressesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SenderaddressesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SenderAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsListResponse parses an HTTP response from a SharedCalendarsListWithResponse call
func ParseSharedCalendarsListResponse(rsp *http.Response) (*SharedCalendarsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SharedCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsCreateResponse parses an HTTP response from a SharedCalendarsCreateWithResponse call
func ParseSharedCalendarsCreateResponse(rsp *http.Response) (*SharedCalendarsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SharedCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsCheckTokenCreateResponse parses an HTTP response from a SharedCalendarsCheckTokenCreateWithResponse call
func ParseSharedCalendarsCheckTokenCreateResponse(rsp *http.Response) (*SharedCalendarsCheckTokenCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsCheckTokenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsEventsListResponse parses an HTTP response from a SharedCalendarsEventsListWithResponse call
func ParseSharedCalendarsEventsListResponse(rsp *http.Response) (*SharedCalendarsEventsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsEventsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ROEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsEventsCreateResponse parses an HTTP response from a SharedCalendarsEventsCreateWithResponse call
func ParseSharedCalendarsEventsCreateResponse(rsp *http.Response) (*SharedCalendarsEventsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsEventsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WritableEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsEventsImportFromFileCreateResponse parses an HTTP response from a SharedCalendarsEventsImportFromFileCreateWithResponse call
func ParseSharedCalendarsEventsImportFromFileCreateResponse(rsp *http.Response) (*SharedCalendarsEventsImportFromFileCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsEventsImportFromFileCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsEventsDestroyResponse parses an HTTP response from a SharedCalendarsEventsDestroyWithResponse call
func ParseSharedCalendarsEventsDestroyResponse(rsp *http.Response) (*SharedCalendarsEventsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsEventsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSharedCalendarsEventsRetrieveResponse parses an HTTP response from a SharedCalendarsEventsRetrieveWithResponse call
func ParseSharedCalendarsEventsRetrieveResponse(rsp *http.Response) (*SharedCalendarsEventsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsEventsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ROEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsEventsPartialUpdateResponse parses an HTTP response from a SharedCalendarsEventsPartialUpdateWithResponse call
func ParseSharedCalendarsEventsPartialUpdateResponse(rsp *http.Response) (*SharedCalendarsEventsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsEventsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsEventsUpdateResponse parses an HTTP response from a SharedCalendarsEventsUpdateWithResponse call
func ParseSharedCalendarsEventsUpdateResponse(rsp *http.Response) (*SharedCalendarsEventsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsEventsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsDestroyResponse parses an HTTP response from a SharedCalendarsDestroyWithResponse call
func ParseSharedCalendarsDestroyResponse(rsp *http.Response) (*SharedCalendarsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSharedCalendarsRetrieveResponse parses an HTTP response from a SharedCalendarsRetrieveWithResponse call
func ParseSharedCalendarsRetrieveResponse(rsp *http.Response) (*SharedCalendarsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsPartialUpdateResponse parses an HTTP response from a SharedCalendarsPartialUpdateWithResponse call
func ParseSharedCalendarsPartialUpdateResponse(rsp *http.Response) (*SharedCalendarsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharedCalendarsUpdateResponse parses an HTTP response from a SharedCalendarsUpdateWithResponse call
func ParseSharedCalendarsUpdateResponse(rsp *http.Response) (*SharedCalendarsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedCalendarsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSmsTotpCreateResponse parses an HTTP response from a SmsTotpCreateWithResponse call
func ParseSmsTotpCreateResponse(rsp *http.Response) (*SmsTotpCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmsTotpCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStatisticsListResponse parses an HTTP response from a StatisticsListWithResponse call
func ParseStatisticsListResponse(rsp *http.Response) (*StatisticsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatisticsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Statistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTokenCreateResponse parses an HTTP response from a TokenCreateWithResponse call
func ParseTokenCreateResponse(rsp *http.Response) (*TokenCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenObtainPair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTokenRefreshCreateResponse parses an HTTP response from a TokenRefreshCreateWithResponse call
func ParseTokenRefreshCreateResponse(rsp *http.Response) (*TokenRefreshCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenRefreshCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenRefresh
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTransportsListResponse parses an HTTP response from a TransportsListWithResponse call
func ParseTransportsListResponse(rsp *http.Response) (*TransportsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TransportsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TransportBackend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsListResponse parses an HTTP response from a UserCalendarsListWithResponse call
func ParseUserCalendarsListResponse(rsp *http.Response) (*UserCalendarsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsCreateResponse parses an HTTP response from a UserCalendarsCreateWithResponse call
func ParseUserCalendarsCreateResponse(rsp *http.Response) (*UserCalendarsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUserCalendarsCheckTokenCreateResponse parses an HTTP response from a UserCalendarsCheckTokenCreateWithResponse call
func ParseUserCalendarsCheckTokenCreateResponse(rsp *http.Response) (*UserCalendarsCheckTokenCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsCheckTokenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsEventsListResponse parses an HTTP response from a UserCalendarsEventsListWithResponse call
func ParseUserCalendarsEventsListResponse(rsp *http.Response) (*UserCalendarsEventsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsEventsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ROEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsEventsCreateResponse parses an HTTP response from a UserCalendarsEventsCreateWithResponse call
func ParseUserCalendarsEventsCreateResponse(rsp *http.Response) (*UserCalendarsEventsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsEventsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WritableEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUserCalendarsEventsImportFromFileCreateResponse parses an HTTP response from a UserCalendarsEventsImportFromFileCreateWithResponse call
func ParseUserCalendarsEventsImportFromFileCreateResponse(rsp *http.Response) (*UserCalendarsEventsImportFromFileCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsEventsImportFromFileCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsEventsDestroyResponse parses an HTTP response from a UserCalendarsEventsDestroyWithResponse call
func ParseUserCalendarsEventsDestroyResponse(rsp *http.Response) (*UserCalendarsEventsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsEventsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUserCalendarsEventsRetrieveResponse parses an HTTP response from a UserCalendarsEventsRetrieveWithResponse call
func ParseUserCalendarsEventsRetrieveResponse(rsp *http.Response) (*UserCalendarsEventsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsEventsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ROEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsEventsPartialUpdateResponse parses an HTTP response from a UserCalendarsEventsPartialUpdateWithResponse call
func ParseUserCalendarsEventsPartialUpdateResponse(rsp *http.Response) (*UserCalendarsEventsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsEventsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsEventsUpdateResponse parses an HTTP response from a UserCalendarsEventsUpdateWithResponse call
func ParseUserCalendarsEventsUpdateResponse(rsp *http.Response) (*UserCalendarsEventsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsEventsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WritableEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsDestroyResponse parses an HTTP response from a UserCalendarsDestroyWithResponse call
func ParseUserCalendarsDestroyResponse(rsp *http.Response) (*UserCalendarsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUserCalendarsRetrieveResponse parses an HTTP response from a UserCalendarsRetrieveWithResponse call
func ParseUserCalendarsRetrieveResponse(rsp *http.Response) (*UserCalendarsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsPartialUpdateResponse parses an HTTP response from a UserCalendarsPartialUpdateWithResponse call
func ParseUserCalendarsPartialUpdateResponse(rsp *http.Response) (*UserCalendarsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserCalendarsUpdateResponse parses an HTTP response from a UserCalendarsUpdateWithResponse call
func ParseUserCalendarsUpdateResponse(rsp *http.Response) (*UserCalendarsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCalendarsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
